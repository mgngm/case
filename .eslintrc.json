{
  "root": true,
  "plugins": ["@typescript-eslint", "no-relative-import-paths"],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "next/core-web-vitals",
    "prettier"
  ],
  "globals": {
    "cy": true
  },
  "overrides": [
    {
      "files": ["tests/**/*"],
      "plugins": ["jest", "jest-dom"],
      "extends": ["plugin:jest/recommended", "plugin:jest-dom/recommended", "plugin:testing-library/react"]
    }
  ],
  "rules": {
    "@typescript-eslint/consistent-type-imports": ["warn", { "prefer": "type-imports" }],
    "@typescript-eslint/prefer-ts-expect-error": "warn",
    "import/order": [
      "warn",
      {
        "groups": ["builtin", "external", "internal"],
        "pathGroups": [
          {
            "pattern": "react",
            "group": "external",
            "position": "before"
          },
          {
            "pattern": "src/store",
            "group": "internal",
            "position": "before"
          },
          {
            "pattern": "styles/**/*",
            "group": "type",
            "position": "after"
          }
        ],
        "pathGroupsExcludedImportTypes": ["react"],
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        }
      }
    ],
    "no-relative-import-paths/no-relative-import-paths": ["warn", { "allowSameFolder": true }],
    "@typescript-eslint/no-restricted-imports": [
      "error",
      {
        "paths": [
          {
            "name": "react-redux",
            "importNames": ["useDispatch", "useSelector", "useStore"],
            "message": "Please use 'useAppDispatch', 'useAppSelector',  and/or 'useAppStore' from 'src/hooks' instead."
          },
          {
            "name": "src/store",
            "importNames": ["store"],
            "message": "Importing the store directly is (almost) always a bad idea. If you're inside a component, use the hooks. To access them outside a component, consider whether your function should be a thunk instead, or whether the logic could live in a middleware."
          },
          {
            "name": "aws-amplify",
            "importNames": ["API", "graphqlOperation"],
            "message": "Please use 'graphQL', 'graphQLSubscription',  and/or 'graphqlOperation' from 'src/logic/client/graphql' instead."
          },
          {
            "name": "@aws-amplify/api-graphql",
            "importNames": ["GraphQLAPI", "graphqlOperation", "default"],
            "message": "Please use 'graphQL', 'graphQLSubscription',  and/or 'graphqlOperation' from 'src/logic/client/graphql' instead."
          }
        ]
      }
    ]
  }
}
