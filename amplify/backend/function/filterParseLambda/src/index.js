'use strict';
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod2) =>
  function __require() {
    return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
  };
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod2, isNodeMode, target) => (
  (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}),
  __copyProps(
    isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, 'default', { value: mod2, enumerable: true }) : target,
    mod2
  )
);
var __toCommonJS = (mod2) => __copyProps(__defProp({}, '__esModule', { value: true }), mod2);

// node_modules/@aws-sdk/lib-dynamodb/node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/node_modules/tslib/tslib.js'(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function (factory) {
      var root =
        typeof global === 'object' ? global : typeof self === 'object' ? self : typeof this === 'object' ? this : {};
      if (typeof define === 'function' && define.amd) {
        define('tslib', ['exports'], function (exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === 'object' && typeof module2.exports === 'object') {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === 'function') {
            Object.defineProperty(exports2, '__esModule', { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function (id, v) {
          return (exports2[id] = previous ? previous(id, v) : v);
        };
      }
    })(function (exporter) {
      var extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      __extends = function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
      __assign =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function (decorators, target, key, desc) {
        var c = arguments.length,
          r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
          d;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function (thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g;
        return (
          (g = { next: verb(0), throw: verb(1), return: verb(2) }),
          typeof Symbol === 'function' &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError('Generator is already executing.');
          while (_)
            try {
              if (
                ((f = 1),
                y &&
                  (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function (m, o) {
        for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
      };
      __createBinding = Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          };
      __values = function (o) {
        var s = typeof Symbol === 'function' && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === 'number')
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            },
          };
        throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      };
      __read = function (o, n) {
        var m = typeof Symbol === 'function' && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i['return'])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
        return r;
      };
      __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function (v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      };
      __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = {}),
          verb('next'),
          verb('throw'),
          verb('return'),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        function verb(n) {
          if (g[n])
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume('next', value);
        }
        function reject(value) {
          resume('throw', value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function (o) {
        var i, p;
        return (
          (i = {}),
          verb('next'),
          verb('throw', function (e) {
            throw e;
          }),
          verb('return'),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p) ? { value: __await(o[n](v)), done: n === 'return' } : f ? f(v) : v;
              }
            : f;
        }
      };
      __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, 'raw', { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          };
      __importStar = function (mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      __importDefault = function (mod2) {
        return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
      };
      __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot read private member from an object whose class did not declare it');
        return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot write private member to an object whose class did not declare it');
        return kind === 'a' ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== 'object' && typeof receiver !== 'function'))
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === 'function' ? receiver === state : state.has(receiver);
      };
      exporter('__extends', __extends);
      exporter('__assign', __assign);
      exporter('__rest', __rest);
      exporter('__decorate', __decorate);
      exporter('__param', __param);
      exporter('__metadata', __metadata);
      exporter('__awaiter', __awaiter);
      exporter('__generator', __generator);
      exporter('__exportStar', __exportStar);
      exporter('__createBinding', __createBinding);
      exporter('__values', __values);
      exporter('__read', __read);
      exporter('__spread', __spread);
      exporter('__spreadArrays', __spreadArrays);
      exporter('__spreadArray', __spreadArray);
      exporter('__await', __await);
      exporter('__asyncGenerator', __asyncGenerator);
      exporter('__asyncDelegator', __asyncDelegator);
      exporter('__asyncValues', __asyncValues);
      exporter('__makeTemplateObject', __makeTemplateObject);
      exporter('__importStar', __importStar);
      exporter('__importDefault', __importDefault);
      exporter('__classPrivateFieldGet', __classPrivateFieldGet);
      exporter('__classPrivateFieldSet', __classPrivateFieldSet);
      exporter('__classPrivateFieldIn', __classPrivateFieldIn);
    });
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/tslib/tslib.js
var require_tslib2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/tslib/tslib.js'(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function (factory) {
      var root =
        typeof global === 'object' ? global : typeof self === 'object' ? self : typeof this === 'object' ? this : {};
      if (typeof define === 'function' && define.amd) {
        define('tslib', ['exports'], function (exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === 'object' && typeof module2.exports === 'object') {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === 'function') {
            Object.defineProperty(exports2, '__esModule', { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function (id, v) {
          return (exports2[id] = previous ? previous(id, v) : v);
        };
      }
    })(function (exporter) {
      var extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      __extends = function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
      __assign =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function (decorators, target, key, desc) {
        var c = arguments.length,
          r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
          d;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function (thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g;
        return (
          (g = { next: verb(0), throw: verb(1), return: verb(2) }),
          typeof Symbol === 'function' &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError('Generator is already executing.');
          while (_)
            try {
              if (
                ((f = 1),
                y &&
                  (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function (m, o) {
        for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
      };
      __createBinding = Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          };
      __values = function (o) {
        var s = typeof Symbol === 'function' && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === 'number')
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            },
          };
        throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      };
      __read = function (o, n) {
        var m = typeof Symbol === 'function' && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i['return'])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
        return r;
      };
      __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function (v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      };
      __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = {}),
          verb('next'),
          verb('throw'),
          verb('return'),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        function verb(n) {
          if (g[n])
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume('next', value);
        }
        function reject(value) {
          resume('throw', value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function (o) {
        var i, p;
        return (
          (i = {}),
          verb('next'),
          verb('throw', function (e) {
            throw e;
          }),
          verb('return'),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p) ? { value: __await(o[n](v)), done: n === 'return' } : f ? f(v) : v;
              }
            : f;
        }
      };
      __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, 'raw', { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          };
      __importStar = function (mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      __importDefault = function (mod2) {
        return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
      };
      __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot read private member from an object whose class did not declare it');
        return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot write private member to an object whose class did not declare it');
        return kind === 'a' ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== 'object' && typeof receiver !== 'function'))
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === 'function' ? receiver === state : state.has(receiver);
      };
      exporter('__extends', __extends);
      exporter('__assign', __assign);
      exporter('__rest', __rest);
      exporter('__decorate', __decorate);
      exporter('__param', __param);
      exporter('__metadata', __metadata);
      exporter('__awaiter', __awaiter);
      exporter('__generator', __generator);
      exporter('__exportStar', __exportStar);
      exporter('__createBinding', __createBinding);
      exporter('__values', __values);
      exporter('__read', __read);
      exporter('__spread', __spread);
      exporter('__spreadArrays', __spreadArrays);
      exporter('__spreadArray', __spreadArray);
      exporter('__await', __await);
      exporter('__asyncGenerator', __asyncGenerator);
      exporter('__asyncDelegator', __asyncDelegator);
      exporter('__asyncValues', __asyncValues);
      exporter('__makeTemplateObject', __makeTemplateObject);
      exporter('__importStar', __importStar);
      exporter('__importDefault', __importDefault);
      exporter('__classPrivateFieldGet', __classPrivateFieldGet);
      exporter('__classPrivateFieldSet', __classPrivateFieldSet);
      exporter('__classPrivateFieldIn', __classPrivateFieldIn);
    });
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js
var require_deserializerMiddleware = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.deserializerMiddleware = void 0;
    var deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed,
        };
      } catch (error) {
        Object.defineProperty(error, '$response', {
          value: response,
        });
        throw error;
      }
    };
    exports.deserializerMiddleware = deserializerMiddleware;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js
var require_serializerMiddleware = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.serializerMiddleware = void 0;
    var serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
      const request = await serializer(args.input, options);
      return next({
        ...args,
        request,
      });
    };
    exports.serializerMiddleware = serializerMiddleware;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js
var require_serdePlugin = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSerdePlugin = exports.serializerMiddlewareOption = exports.deserializerMiddlewareOption = void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware();
    var serializerMiddleware_1 = require_serializerMiddleware();
    exports.deserializerMiddlewareOption = {
      name: 'deserializerMiddleware',
      step: 'deserialize',
      tags: ['DESERIALIZER'],
      override: true,
    };
    exports.serializerMiddlewareOption = {
      name: 'serializerMiddleware',
      step: 'serialize',
      tags: ['SERIALIZER'],
      override: true,
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add(
            (0, deserializerMiddleware_1.deserializerMiddleware)(config, deserializer),
            exports.deserializerMiddlewareOption
          );
          commandStack.add(
            (0, serializerMiddleware_1.serializerMiddleware)(config, serializer),
            exports.serializerMiddlewareOption
          );
        },
      };
    }
    exports.getSerdePlugin = getSerdePlugin;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_deserializerMiddleware(), exports);
    tslib_1.__exportStar(require_serdePlugin(), exports);
    tslib_1.__exportStar(require_serializerMiddleware(), exports);
  },
});

// node_modules/@aws-sdk/smithy-client/node_modules/tslib/tslib.js
var require_tslib3 = __commonJS({
  'node_modules/@aws-sdk/smithy-client/node_modules/tslib/tslib.js'(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function (factory) {
      var root =
        typeof global === 'object' ? global : typeof self === 'object' ? self : typeof this === 'object' ? this : {};
      if (typeof define === 'function' && define.amd) {
        define('tslib', ['exports'], function (exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === 'object' && typeof module2.exports === 'object') {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === 'function') {
            Object.defineProperty(exports2, '__esModule', { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function (id, v) {
          return (exports2[id] = previous ? previous(id, v) : v);
        };
      }
    })(function (exporter) {
      var extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      __extends = function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
      __assign =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function (decorators, target, key, desc) {
        var c = arguments.length,
          r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
          d;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function (thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g;
        return (
          (g = { next: verb(0), throw: verb(1), return: verb(2) }),
          typeof Symbol === 'function' &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError('Generator is already executing.');
          while (_)
            try {
              if (
                ((f = 1),
                y &&
                  (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function (m, o) {
        for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
      };
      __createBinding = Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          };
      __values = function (o) {
        var s = typeof Symbol === 'function' && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === 'number')
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            },
          };
        throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      };
      __read = function (o, n) {
        var m = typeof Symbol === 'function' && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i['return'])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
        return r;
      };
      __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function (v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      };
      __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = {}),
          verb('next'),
          verb('throw'),
          verb('return'),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        function verb(n) {
          if (g[n])
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume('next', value);
        }
        function reject(value) {
          resume('throw', value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function (o) {
        var i, p;
        return (
          (i = {}),
          verb('next'),
          verb('throw', function (e) {
            throw e;
          }),
          verb('return'),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p) ? { value: __await(o[n](v)), done: n === 'return' } : f ? f(v) : v;
              }
            : f;
        }
      };
      __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, 'raw', { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          };
      __importStar = function (mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      __importDefault = function (mod2) {
        return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
      };
      __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot read private member from an object whose class did not declare it');
        return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot write private member to an object whose class did not declare it');
        return kind === 'a' ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== 'object' && typeof receiver !== 'function'))
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === 'function' ? receiver === state : state.has(receiver);
      };
      exporter('__extends', __extends);
      exporter('__assign', __assign);
      exporter('__rest', __rest);
      exporter('__decorate', __decorate);
      exporter('__param', __param);
      exporter('__metadata', __metadata);
      exporter('__awaiter', __awaiter);
      exporter('__generator', __generator);
      exporter('__exportStar', __exportStar);
      exporter('__createBinding', __createBinding);
      exporter('__values', __values);
      exporter('__read', __read);
      exporter('__spread', __spread);
      exporter('__spreadArrays', __spreadArrays);
      exporter('__spreadArray', __spreadArray);
      exporter('__await', __await);
      exporter('__asyncGenerator', __asyncGenerator);
      exporter('__asyncDelegator', __asyncDelegator);
      exporter('__asyncValues', __asyncValues);
      exporter('__makeTemplateObject', __makeTemplateObject);
      exporter('__importStar', __importStar);
      exporter('__importDefault', __importDefault);
      exporter('__classPrivateFieldGet', __classPrivateFieldGet);
      exporter('__classPrivateFieldSet', __classPrivateFieldSet);
      exporter('__classPrivateFieldIn', __classPrivateFieldIn);
    });
  },
});

// node_modules/@aws-sdk/smithy-client/node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js
var require_MiddlewareStack = __commonJS({
  'node_modules/@aws-sdk/smithy-client/node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.constructStack = void 0;
    var constructStack = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) =>
        entries.sort(
          (a, b) =>
            stepWeights[b.step] - stepWeights[a.step] ||
            priorityWeights[b.priority || 'normal'] - priorityWeights[a.priority || 'normal']
        );
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.name && entry.name === toRemove) {
            isRemoved = true;
            entriesNameSet.delete(toRemove);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            if (entry.name) entriesNameSet.delete(entry.name);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = () => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: [],
          };
          if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: [],
          };
          if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              throw new Error(
                `${entry.toMiddleware} is not found when adding ${entry.name || 'anonymous'} middleware ${
                  entry.relation
                } ${entry.toMiddleware}`
              );
            }
            if (entry.relation === 'after') {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === 'before') {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries)
          .map(expandRelativeMiddlewareList)
          .reduce((wholeList, expendedMiddlewareList) => {
            wholeList.push(...expendedMiddlewareList);
            return wholeList;
          }, []);
        return mainChain.map((entry) => entry.middleware);
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override } = options;
          const entry = {
            step: 'initialize',
            priority: 'normal',
            middleware,
            ...options,
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override) throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = absoluteEntries[toOverrideIndex];
              if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
                throw new Error(
                  `"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`
                );
              }
              absoluteEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override } = options;
          const entry = {
            middleware,
            ...options,
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override) throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = relativeEntries[toOverrideIndex];
              if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                throw new Error(
                  `"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`
                );
              }
              relativeEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo((0, exports.constructStack)()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === 'string') return removeByName(toRemove);
          else return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name } = entry;
            if (tags && tags.includes(toRemove)) {
              if (name) entriesNameSet.delete(name);
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo((0, exports.constructStack)());
          cloned.use(from);
          return cloned;
        },
        applyToStack: cloneTo,
        resolve: (handler2, context) => {
          for (const middleware of getMiddlewareList().reverse()) {
            handler2 = middleware(handler2, context);
          }
          return handler2;
        },
      };
      return stack;
    };
    exports.constructStack = constructStack;
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1,
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1,
    };
  },
});

// node_modules/@aws-sdk/smithy-client/node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  'node_modules/@aws-sdk/smithy-client/node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib3();
    tslib_1.__exportStar(require_MiddlewareStack(), exports);
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/client.js
var require_client = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/client.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Client = void 0;
    var middleware_stack_1 = require_dist_cjs2();
    var Client = class {
      constructor(config) {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
        this.config = config;
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== 'function' ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === 'function' ? optionsOrCb : cb;
        const handler2 = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
          handler2(command)
            .then(
              (result) => callback(null, result.output),
              (err) => callback(err)
            )
            .catch(() => {});
        } else {
          return handler2(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy) this.config.requestHandler.destroy();
      }
    };
    exports.Client = Client;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/command.js
var require_command = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/command.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Command = void 0;
    var middleware_stack_1 = require_dist_cjs2();
    var Command = class {
      constructor() {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
      }
    };
    exports.Command = Command;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js
var require_constants = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SENSITIVE_STRING = void 0;
    exports.SENSITIVE_STRING = '***SensitiveInformation***';
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js
var require_parse_utils = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.strictParseByte =
      exports.strictParseShort =
      exports.strictParseInt32 =
      exports.strictParseInt =
      exports.strictParseLong =
      exports.limitedParseFloat32 =
      exports.limitedParseFloat =
      exports.handleFloat =
      exports.limitedParseDouble =
      exports.strictParseFloat32 =
      exports.strictParseFloat =
      exports.strictParseDouble =
      exports.expectUnion =
      exports.expectString =
      exports.expectObject =
      exports.expectNonNull =
      exports.expectByte =
      exports.expectShort =
      exports.expectInt32 =
      exports.expectInt =
      exports.expectLong =
      exports.expectFloat32 =
      exports.expectNumber =
      exports.expectBoolean =
      exports.parseBoolean =
        void 0;
    var parseBoolean = (value) => {
      switch (value) {
        case 'true':
          return true;
        case 'false':
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    };
    exports.parseBoolean = parseBoolean;
    var expectBoolean = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === 'boolean') {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}`);
    };
    exports.expectBoolean = expectBoolean;
    var expectNumber = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === 'number') {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}`);
    };
    exports.expectNumber = expectNumber;
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = (value) => {
      const expected = (0, exports.expectNumber)(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    };
    exports.expectFloat32 = expectFloat32;
    var expectLong = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}`);
    };
    exports.expectLong = expectLong;
    exports.expectInt = exports.expectLong;
    var expectInt32 = (value) => expectSizedInt(value, 32);
    exports.expectInt32 = expectInt32;
    var expectShort = (value) => expectSizedInt(value, 16);
    exports.expectShort = expectShort;
    var expectByte = (value) => expectSizedInt(value, 8);
    exports.expectByte = expectByte;
    var expectSizedInt = (value, size) => {
      const expected = (0, exports.expectLong)(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    };
    var castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    var expectNonNull = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError('Expected a non-null value');
      }
      return value;
    };
    exports.expectNonNull = expectNonNull;
    var expectObject = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === 'object' && !Array.isArray(value)) {
        return value;
      }
      throw new TypeError(`Expected object, got ${typeof value}`);
    };
    exports.expectObject = expectObject;
    var expectString = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === 'string') {
        return value;
      }
      throw new TypeError(`Expected string, got ${typeof value}`);
    };
    exports.expectString = expectString;
    var expectUnion = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = (0, exports.expectObject)(value);
      const setKeys = Object.entries(asObject)
        .filter(([_, v]) => v !== null && v !== void 0)
        .map(([k, _]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    };
    exports.expectUnion = expectUnion;
    var strictParseDouble = (value) => {
      if (typeof value == 'string') {
        return (0, exports.expectNumber)(parseNumber(value));
      }
      return (0, exports.expectNumber)(value);
    };
    exports.strictParseDouble = strictParseDouble;
    exports.strictParseFloat = exports.strictParseDouble;
    var strictParseFloat32 = (value) => {
      if (typeof value == 'string') {
        return (0, exports.expectFloat32)(parseNumber(value));
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.strictParseFloat32 = strictParseFloat32;
    var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    };
    var limitedParseDouble = (value) => {
      if (typeof value == 'string') {
        return parseFloatString(value);
      }
      return (0, exports.expectNumber)(value);
    };
    exports.limitedParseDouble = limitedParseDouble;
    exports.handleFloat = exports.limitedParseDouble;
    exports.limitedParseFloat = exports.limitedParseDouble;
    var limitedParseFloat32 = (value) => {
      if (typeof value == 'string') {
        return parseFloatString(value);
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.limitedParseFloat32 = limitedParseFloat32;
    var parseFloatString = (value) => {
      switch (value) {
        case 'NaN':
          return NaN;
        case 'Infinity':
          return Infinity;
        case '-Infinity':
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    };
    var strictParseLong = (value) => {
      if (typeof value === 'string') {
        return (0, exports.expectLong)(parseNumber(value));
      }
      return (0, exports.expectLong)(value);
    };
    exports.strictParseLong = strictParseLong;
    exports.strictParseInt = exports.strictParseLong;
    var strictParseInt32 = (value) => {
      if (typeof value === 'string') {
        return (0, exports.expectInt32)(parseNumber(value));
      }
      return (0, exports.expectInt32)(value);
    };
    exports.strictParseInt32 = strictParseInt32;
    var strictParseShort = (value) => {
      if (typeof value === 'string') {
        return (0, exports.expectShort)(parseNumber(value));
      }
      return (0, exports.expectShort)(value);
    };
    exports.strictParseShort = strictParseShort;
    var strictParseByte = (value) => {
      if (typeof value === 'string') {
        return (0, exports.expectByte)(parseNumber(value));
      }
      return (0, exports.expectByte)(value);
    };
    exports.strictParseByte = strictParseByte;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js
var require_date_utils = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseEpochTimestamp =
      exports.parseRfc7231DateTime =
      exports.parseRfc3339DateTime =
      exports.dateToUtcString =
        void 0;
    var parse_utils_1 = require_parse_utils();
    var DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    var MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    exports.dateToUtcString = dateToUtcString;
    var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    var parseRfc3339DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== 'string') {
        throw new TypeError('RFC-3339 date-times must be expressed as strings');
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError('Invalid RFC-3339 date-time value');
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, 'month', 1, 12);
      const day = parseDateValue(dayStr, 'day', 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    };
    exports.parseRfc3339DateTime = parseRfc3339DateTime;
    var IMF_FIXDATE = new RegExp(
      /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/
    );
    var RFC_850_DATE = new RegExp(
      /^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/
    );
    var ASC_TIME = new RegExp(
      /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/
    );
    var parseRfc7231DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== 'string') {
        throw new TypeError('RFC-7231 date-times must be expressed as strings');
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate(
          (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)),
          parseMonthByShortName(monthStr),
          parseDateValue(dayStr, 'day', 1, 31),
          { hours, minutes, seconds, fractionalMilliseconds }
        );
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(
          buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, 'day', 1, 31), {
            hours,
            minutes,
            seconds,
            fractionalMilliseconds,
          })
        );
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate(
          (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)),
          parseMonthByShortName(monthStr),
          parseDateValue(dayStr.trimLeft(), 'day', 1, 31),
          { hours, minutes, seconds, fractionalMilliseconds }
        );
      }
      throw new TypeError('Invalid RFC-7231 date-time value');
    };
    exports.parseRfc7231DateTime = parseRfc7231DateTime;
    var parseEpochTimestamp = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === 'number') {
        valueAsDouble = value;
      } else if (typeof value === 'string') {
        valueAsDouble = (0, parse_utils_1.strictParseDouble)(value);
      } else {
        throw new TypeError(
          'Epoch timestamps must be expressed as floating point numbers or their string representation'
        );
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError('Epoch timestamps must be valid, non-Infinite, non-NaN numerics');
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    };
    exports.parseEpochTimestamp = parseEpochTimestamp;
    var buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(
        Date.UTC(
          year,
          adjustedMonth,
          day,
          parseDateValue(time.hours, 'hour', 0, 23),
          parseDateValue(time.minutes, 'minute', 0, 59),
          parseDateValue(time.seconds, 'seconds', 0, 60),
          parseMilliseconds(time.fractionalMilliseconds)
        )
      );
    };
    var parseTwoDigitYear = (value) => {
      const thisYear = new Date().getUTCFullYear();
      const valueInThisCentury =
        Math.floor(thisYear / 100) * 100 + (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    };
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = (input) => {
      if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(
          Date.UTC(
            input.getUTCFullYear() - 100,
            input.getUTCMonth(),
            input.getUTCDate(),
            input.getUTCHours(),
            input.getUTCMinutes(),
            input.getUTCSeconds(),
            input.getUTCMilliseconds()
          )
        );
      }
      return input;
    };
    var parseMonthByShortName = (value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    };
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    };
    var isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    var parseDateValue = (value, type, lower, upper) => {
      const dateVal = (0, parse_utils_1.strictParseByte)(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    };
    var parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return (0, parse_utils_1.strictParseFloat32)('0.' + value) * 1e3;
    };
    var stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === '0') {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js
var require_defaults_mode = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.loadConfigsForDefaultMode = void 0;
    var loadConfigsForDefaultMode = (mode) => {
      switch (mode) {
        case 'standard':
          return {
            retryMode: 'standard',
            connectionTimeout: 3100,
          };
        case 'in-region':
          return {
            retryMode: 'standard',
            connectionTimeout: 1100,
          };
        case 'cross-region':
          return {
            retryMode: 'standard',
            connectionTimeout: 3100,
          };
        case 'mobile':
          return {
            retryMode: 'standard',
            connectionTimeout: 3e4,
          };
        default:
          return {};
      }
    };
    exports.loadConfigsForDefaultMode = loadConfigsForDefaultMode;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js
var require_emitWarningIfUnsupportedVersion = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.emitWarningIfUnsupportedVersion = void 0;
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion = (version) => {
      if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf('.'))) < 14) {
        warningEmitted = true;
        process.emitWarning(
          `The AWS SDK for JavaScript (v3) will
no longer support Node.js ${version} on November 1, 2022.

To continue receiving updates to AWS services, bug fixes, and security
updates please upgrade to Node.js 14.x or later.

For details, please refer our blog post: https://a.co/48dbdYz`,
          `NodeDeprecationWarning`
        );
      }
    };
    exports.emitWarningIfUnsupportedVersion = emitWarningIfUnsupportedVersion;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js
var require_exceptions = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.decorateServiceException = exports.ServiceException = void 0;
    var ServiceException = class extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    exports.ServiceException = ServiceException;
    var decorateServiceException = (exception, additions = {}) => {
      Object.entries(additions)
        .filter(([, v]) => v !== void 0)
        .forEach(([k, v]) => {
          if (exception[k] == void 0 || exception[k] === '') {
            exception[k] = v;
          }
        });
      const message = exception.message || exception.Message || 'UnknownError';
      exception.message = message;
      delete exception.Message;
      return exception;
    };
    exports.decorateServiceException = decorateServiceException;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js
var require_extended_encode_uri_component = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.extendedEncodeURIComponent = void 0;
    function extendedEncodeURIComponent(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
        return '%' + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    exports.extendedEncodeURIComponent = extendedEncodeURIComponent;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js
var require_get_array_if_single_item = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getArrayIfSingleItem = void 0;
    var getArrayIfSingleItem = (mayBeArray) => (Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray]);
    exports.getArrayIfSingleItem = getArrayIfSingleItem;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js
var require_get_value_from_text_node = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getValueFromTextNode = void 0;
    var getValueFromTextNode = (obj) => {
      const textNodeName = '#text';
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === 'object' && obj[key] !== null) {
          obj[key] = (0, exports.getValueFromTextNode)(obj[key]);
        }
      }
      return obj;
    };
    exports.getValueFromTextNode = getValueFromTextNode;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js
var require_lazy_json = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.LazyJsonString = exports.StringWrapper = void 0;
    var StringWrapper = function () {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    };
    exports.StringWrapper = StringWrapper;
    exports.StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: exports.StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true,
      },
    });
    Object.setPrototypeOf(exports.StringWrapper, String);
    var LazyJsonString = class extends exports.StringWrapper {
      deserializeJSON() {
        return JSON.parse(super.toString());
      }
      toJSON() {
        return super.toString();
      }
      static fromObject(object) {
        if (object instanceof LazyJsonString) {
          return object;
        } else if (object instanceof String || typeof object === 'string') {
          return new LazyJsonString(object);
        }
        return new LazyJsonString(JSON.stringify(object));
      }
    };
    exports.LazyJsonString = LazyJsonString;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js
var require_ser_utils = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.serializeFloat = void 0;
    var serializeFloat = (value) => {
      if (value !== value) {
        return 'NaN';
      }
      switch (value) {
        case Infinity:
          return 'Infinity';
        case -Infinity:
          return '-Infinity';
        default:
          return value;
      }
    };
    exports.serializeFloat = serializeFloat;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js
var require_split_every = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.splitEvery = void 0;
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error('Invalid number of delimiters (' + numDelimiters + ') for splitEvery.');
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = '';
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === '') {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = '';
        }
      }
      if (currentSegment !== '') {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    exports.splitEvery = splitEvery;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib3();
    tslib_1.__exportStar(require_client(), exports);
    tslib_1.__exportStar(require_command(), exports);
    tslib_1.__exportStar(require_constants(), exports);
    tslib_1.__exportStar(require_date_utils(), exports);
    tslib_1.__exportStar(require_defaults_mode(), exports);
    tslib_1.__exportStar(require_emitWarningIfUnsupportedVersion(), exports);
    tslib_1.__exportStar(require_exceptions(), exports);
    tslib_1.__exportStar(require_extended_encode_uri_component(), exports);
    tslib_1.__exportStar(require_get_array_if_single_item(), exports);
    tslib_1.__exportStar(require_get_value_from_text_node(), exports);
    tslib_1.__exportStar(require_lazy_json(), exports);
    tslib_1.__exportStar(require_parse_utils(), exports);
    tslib_1.__exportStar(require_ser_utils(), exports);
    tslib_1.__exportStar(require_split_every(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/DynamoDBServiceException.js
var require_DynamoDBServiceException = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/DynamoDBServiceException.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDBServiceException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var DynamoDBServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, DynamoDBServiceException.prototype);
      }
    };
    exports.DynamoDBServiceException = DynamoDBServiceException;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/models_0.js
var require_models_0 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/models_0.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ProjectionFilterSensitiveLog =
      exports.SourceTableDetailsFilterSensitiveLog =
      exports.ProvisionedThroughputFilterSensitiveLog =
      exports.KeySchemaElementFilterSensitiveLog =
      exports.BackupDetailsFilterSensitiveLog =
      exports.AutoScalingSettingsUpdateFilterSensitiveLog =
      exports.AutoScalingSettingsDescriptionFilterSensitiveLog =
      exports.AutoScalingPolicyUpdateFilterSensitiveLog =
      exports.AutoScalingTargetTrackingScalingPolicyConfigurationUpdateFilterSensitiveLog =
      exports.AutoScalingPolicyDescriptionFilterSensitiveLog =
      exports.AutoScalingTargetTrackingScalingPolicyConfigurationDescriptionFilterSensitiveLog =
      exports.AttributeDefinitionFilterSensitiveLog =
      exports.ArchivalSummaryFilterSensitiveLog =
      exports.TransactionCanceledException =
      exports.AttributeValue =
      exports.IndexNotFoundException =
      exports.ReplicaNotFoundException =
      exports.ReplicaAlreadyExistsException =
      exports.InvalidRestoreTimeException =
      exports.TableAlreadyExistsException =
      exports.PointInTimeRecoveryUnavailableException =
      exports.InvalidExportTimeException =
      exports.ExportConflictException =
      exports.TransactionInProgressException =
      exports.IdempotentParameterMismatchException =
      exports.DuplicateItemException =
      exports.GlobalTableNotFoundException =
      exports.ExportNotFoundException =
      exports.ExportStatus =
      exports.ExportFormat =
      exports.TransactionConflictException =
      exports.ResourceInUseException =
      exports.GlobalTableAlreadyExistsException =
      exports.TableClass =
      exports.TableNotFoundException =
      exports.TableInUseException =
      exports.LimitExceededException =
      exports.ContinuousBackupsUnavailableException =
      exports.ConditionalCheckFailedException =
      exports.ItemCollectionSizeLimitExceededException =
      exports.ResourceNotFoundException =
      exports.ProvisionedThroughputExceededException =
      exports.InvalidEndpointException =
      exports.RequestLimitExceeded =
      exports.InternalServerError =
      exports.BatchStatementErrorCodeEnum =
      exports.BackupTypeFilter =
      exports.BackupNotFoundException =
      exports.BackupInUseException =
      exports.BackupType =
        void 0;
    exports.DescribeContinuousBackupsInputFilterSensitiveLog =
      exports.DescribeBackupOutputFilterSensitiveLog =
      exports.DescribeBackupInputFilterSensitiveLog =
      exports.DeleteTableOutputFilterSensitiveLog =
      exports.DeleteTableInputFilterSensitiveLog =
      exports.DeleteReplicationGroupMemberActionFilterSensitiveLog =
      exports.DeleteReplicaActionFilterSensitiveLog =
      exports.DeleteGlobalSecondaryIndexActionFilterSensitiveLog =
      exports.DeleteBackupOutputFilterSensitiveLog =
      exports.DeleteBackupInputFilterSensitiveLog =
      exports.CreateTableOutputFilterSensitiveLog =
      exports.TableDescriptionFilterSensitiveLog =
      exports.RestoreSummaryFilterSensitiveLog =
      exports.LocalSecondaryIndexDescriptionFilterSensitiveLog =
      exports.GlobalSecondaryIndexDescriptionFilterSensitiveLog =
      exports.ProvisionedThroughputDescriptionFilterSensitiveLog =
      exports.CreateTableInputFilterSensitiveLog =
      exports.TagFilterSensitiveLog =
      exports.SSESpecificationFilterSensitiveLog =
      exports.LocalSecondaryIndexFilterSensitiveLog =
      exports.GlobalSecondaryIndexFilterSensitiveLog =
      exports.CreateReplicationGroupMemberActionFilterSensitiveLog =
      exports.ReplicaGlobalSecondaryIndexFilterSensitiveLog =
      exports.CreateReplicaActionFilterSensitiveLog =
      exports.CreateGlobalTableOutputFilterSensitiveLog =
      exports.GlobalTableDescriptionFilterSensitiveLog =
      exports.ReplicaDescriptionFilterSensitiveLog =
      exports.TableClassSummaryFilterSensitiveLog =
      exports.ReplicaGlobalSecondaryIndexDescriptionFilterSensitiveLog =
      exports.ProvisionedThroughputOverrideFilterSensitiveLog =
      exports.CreateGlobalTableInputFilterSensitiveLog =
      exports.ReplicaFilterSensitiveLog =
      exports.CreateGlobalSecondaryIndexActionFilterSensitiveLog =
      exports.CreateBackupOutputFilterSensitiveLog =
      exports.CreateBackupInputFilterSensitiveLog =
      exports.ContributorInsightsSummaryFilterSensitiveLog =
      exports.ContinuousBackupsDescriptionFilterSensitiveLog =
      exports.PointInTimeRecoveryDescriptionFilterSensitiveLog =
      exports.BillingModeSummaryFilterSensitiveLog =
      exports.BatchStatementErrorFilterSensitiveLog =
      exports.ConsumedCapacityFilterSensitiveLog =
      exports.CapacityFilterSensitiveLog =
      exports.BackupSummaryFilterSensitiveLog =
      exports.BackupDescriptionFilterSensitiveLog =
      exports.SourceTableFeatureDetailsFilterSensitiveLog =
      exports.TimeToLiveDescriptionFilterSensitiveLog =
      exports.StreamSpecificationFilterSensitiveLog =
      exports.SSEDescriptionFilterSensitiveLog =
      exports.LocalSecondaryIndexInfoFilterSensitiveLog =
      exports.GlobalSecondaryIndexInfoFilterSensitiveLog =
        void 0;
    exports.RestoreTableFromBackupOutputFilterSensitiveLog =
      exports.RestoreTableFromBackupInputFilterSensitiveLog =
      exports.ListTagsOfResourceOutputFilterSensitiveLog =
      exports.ListTagsOfResourceInputFilterSensitiveLog =
      exports.ListTablesOutputFilterSensitiveLog =
      exports.ListTablesInputFilterSensitiveLog =
      exports.ListGlobalTablesOutputFilterSensitiveLog =
      exports.GlobalTableFilterSensitiveLog =
      exports.ListGlobalTablesInputFilterSensitiveLog =
      exports.ListExportsOutputFilterSensitiveLog =
      exports.ExportSummaryFilterSensitiveLog =
      exports.ListExportsInputFilterSensitiveLog =
      exports.ListContributorInsightsOutputFilterSensitiveLog =
      exports.ListContributorInsightsInputFilterSensitiveLog =
      exports.ListBackupsOutputFilterSensitiveLog =
      exports.ListBackupsInputFilterSensitiveLog =
      exports.ExportTableToPointInTimeOutputFilterSensitiveLog =
      exports.ExportTableToPointInTimeInputFilterSensitiveLog =
      exports.KinesisStreamingDestinationOutputFilterSensitiveLog =
      exports.KinesisStreamingDestinationInputFilterSensitiveLog =
      exports.DescribeTimeToLiveOutputFilterSensitiveLog =
      exports.DescribeTimeToLiveInputFilterSensitiveLog =
      exports.DescribeTableReplicaAutoScalingOutputFilterSensitiveLog =
      exports.TableAutoScalingDescriptionFilterSensitiveLog =
      exports.ReplicaAutoScalingDescriptionFilterSensitiveLog =
      exports.ReplicaGlobalSecondaryIndexAutoScalingDescriptionFilterSensitiveLog =
      exports.DescribeTableReplicaAutoScalingInputFilterSensitiveLog =
      exports.DescribeTableOutputFilterSensitiveLog =
      exports.DescribeTableInputFilterSensitiveLog =
      exports.DescribeLimitsOutputFilterSensitiveLog =
      exports.DescribeLimitsInputFilterSensitiveLog =
      exports.DescribeKinesisStreamingDestinationOutputFilterSensitiveLog =
      exports.KinesisDataStreamDestinationFilterSensitiveLog =
      exports.DescribeKinesisStreamingDestinationInputFilterSensitiveLog =
      exports.DescribeGlobalTableSettingsOutputFilterSensitiveLog =
      exports.ReplicaSettingsDescriptionFilterSensitiveLog =
      exports.ReplicaGlobalSecondaryIndexSettingsDescriptionFilterSensitiveLog =
      exports.DescribeGlobalTableSettingsInputFilterSensitiveLog =
      exports.DescribeGlobalTableOutputFilterSensitiveLog =
      exports.DescribeGlobalTableInputFilterSensitiveLog =
      exports.DescribeExportOutputFilterSensitiveLog =
      exports.ExportDescriptionFilterSensitiveLog =
      exports.DescribeExportInputFilterSensitiveLog =
      exports.DescribeEndpointsResponseFilterSensitiveLog =
      exports.EndpointFilterSensitiveLog =
      exports.DescribeEndpointsRequestFilterSensitiveLog =
      exports.DescribeContributorInsightsOutputFilterSensitiveLog =
      exports.FailureExceptionFilterSensitiveLog =
      exports.DescribeContributorInsightsInputFilterSensitiveLog =
      exports.DescribeContinuousBackupsOutputFilterSensitiveLog =
        void 0;
    exports.BatchExecuteStatementOutputFilterSensitiveLog =
      exports.BatchExecuteStatementInputFilterSensitiveLog =
      exports.TransactGetItemFilterSensitiveLog =
      exports.KeysAndAttributesFilterSensitiveLog =
      exports.PutRequestFilterSensitiveLog =
      exports.ParameterizedStatementFilterSensitiveLog =
      exports.ItemResponseFilterSensitiveLog =
      exports.ItemCollectionMetricsFilterSensitiveLog =
      exports.GetItemOutputFilterSensitiveLog =
      exports.GetItemInputFilterSensitiveLog =
      exports.GetFilterSensitiveLog =
      exports.ExecuteStatementInputFilterSensitiveLog =
      exports.DeleteRequestFilterSensitiveLog =
      exports.ConditionFilterSensitiveLog =
      exports.CancellationReasonFilterSensitiveLog =
      exports.BatchStatementResponseFilterSensitiveLog =
      exports.BatchStatementRequestFilterSensitiveLog =
      exports.AttributeValueUpdateFilterSensitiveLog =
      exports.AttributeValueFilterSensitiveLog =
      exports.UpdateTimeToLiveOutputFilterSensitiveLog =
      exports.UpdateTimeToLiveInputFilterSensitiveLog =
      exports.TimeToLiveSpecificationFilterSensitiveLog =
      exports.UpdateTableReplicaAutoScalingOutputFilterSensitiveLog =
      exports.UpdateTableReplicaAutoScalingInputFilterSensitiveLog =
      exports.ReplicaAutoScalingUpdateFilterSensitiveLog =
      exports.ReplicaGlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog =
      exports.GlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog =
      exports.UpdateTableOutputFilterSensitiveLog =
      exports.UpdateTableInputFilterSensitiveLog =
      exports.ReplicationGroupUpdateFilterSensitiveLog =
      exports.UpdateReplicationGroupMemberActionFilterSensitiveLog =
      exports.GlobalSecondaryIndexUpdateFilterSensitiveLog =
      exports.UpdateGlobalSecondaryIndexActionFilterSensitiveLog =
      exports.UpdateGlobalTableSettingsOutputFilterSensitiveLog =
      exports.UpdateGlobalTableSettingsInputFilterSensitiveLog =
      exports.ReplicaSettingsUpdateFilterSensitiveLog =
      exports.ReplicaGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog =
      exports.GlobalTableGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog =
      exports.UpdateGlobalTableOutputFilterSensitiveLog =
      exports.UpdateGlobalTableInputFilterSensitiveLog =
      exports.ReplicaUpdateFilterSensitiveLog =
      exports.UpdateContributorInsightsOutputFilterSensitiveLog =
      exports.UpdateContributorInsightsInputFilterSensitiveLog =
      exports.UpdateContinuousBackupsOutputFilterSensitiveLog =
      exports.UpdateContinuousBackupsInputFilterSensitiveLog =
      exports.PointInTimeRecoverySpecificationFilterSensitiveLog =
      exports.UntagResourceInputFilterSensitiveLog =
      exports.TagResourceInputFilterSensitiveLog =
      exports.RestoreTableToPointInTimeOutputFilterSensitiveLog =
      exports.RestoreTableToPointInTimeInputFilterSensitiveLog =
        void 0;
    exports.TransactWriteItemsInputFilterSensitiveLog =
      exports.TransactWriteItemFilterSensitiveLog =
      exports.UpdateItemInputFilterSensitiveLog =
      exports.BatchWriteItemOutputFilterSensitiveLog =
      exports.QueryInputFilterSensitiveLog =
      exports.PutItemInputFilterSensitiveLog =
      exports.DeleteItemInputFilterSensitiveLog =
      exports.BatchWriteItemInputFilterSensitiveLog =
      exports.ScanInputFilterSensitiveLog =
      exports.BatchGetItemOutputFilterSensitiveLog =
      exports.WriteRequestFilterSensitiveLog =
      exports.UpdateItemOutputFilterSensitiveLog =
      exports.ScanOutputFilterSensitiveLog =
      exports.QueryOutputFilterSensitiveLog =
      exports.PutItemOutputFilterSensitiveLog =
      exports.ExecuteStatementOutputFilterSensitiveLog =
      exports.DeleteItemOutputFilterSensitiveLog =
      exports.UpdateFilterSensitiveLog =
      exports.PutFilterSensitiveLog =
      exports.DeleteFilterSensitiveLog =
      exports.ConditionCheckFilterSensitiveLog =
      exports.TransactWriteItemsOutputFilterSensitiveLog =
      exports.TransactGetItemsInputFilterSensitiveLog =
      exports.ExpectedAttributeValueFilterSensitiveLog =
      exports.BatchGetItemInputFilterSensitiveLog =
      exports.TransactGetItemsOutputFilterSensitiveLog =
      exports.ExecuteTransactionOutputFilterSensitiveLog =
      exports.ExecuteTransactionInputFilterSensitiveLog =
        void 0;
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    var BackupType;
    (function (BackupType2) {
      BackupType2['AWS_BACKUP'] = 'AWS_BACKUP';
      BackupType2['SYSTEM'] = 'SYSTEM';
      BackupType2['USER'] = 'USER';
    })((BackupType = exports.BackupType || (exports.BackupType = {})));
    var BackupInUseException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'BackupInUseException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'BackupInUseException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, BackupInUseException.prototype);
      }
    };
    exports.BackupInUseException = BackupInUseException;
    var BackupNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'BackupNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'BackupNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, BackupNotFoundException.prototype);
      }
    };
    exports.BackupNotFoundException = BackupNotFoundException;
    var BackupTypeFilter;
    (function (BackupTypeFilter2) {
      BackupTypeFilter2['ALL'] = 'ALL';
      BackupTypeFilter2['AWS_BACKUP'] = 'AWS_BACKUP';
      BackupTypeFilter2['SYSTEM'] = 'SYSTEM';
      BackupTypeFilter2['USER'] = 'USER';
    })((BackupTypeFilter = exports.BackupTypeFilter || (exports.BackupTypeFilter = {})));
    var BatchStatementErrorCodeEnum;
    (function (BatchStatementErrorCodeEnum2) {
      BatchStatementErrorCodeEnum2['AccessDenied'] = 'AccessDenied';
      BatchStatementErrorCodeEnum2['ConditionalCheckFailed'] = 'ConditionalCheckFailed';
      BatchStatementErrorCodeEnum2['DuplicateItem'] = 'DuplicateItem';
      BatchStatementErrorCodeEnum2['InternalServerError'] = 'InternalServerError';
      BatchStatementErrorCodeEnum2['ItemCollectionSizeLimitExceeded'] = 'ItemCollectionSizeLimitExceeded';
      BatchStatementErrorCodeEnum2['ProvisionedThroughputExceeded'] = 'ProvisionedThroughputExceeded';
      BatchStatementErrorCodeEnum2['RequestLimitExceeded'] = 'RequestLimitExceeded';
      BatchStatementErrorCodeEnum2['ResourceNotFound'] = 'ResourceNotFound';
      BatchStatementErrorCodeEnum2['ThrottlingError'] = 'ThrottlingError';
      BatchStatementErrorCodeEnum2['TransactionConflict'] = 'TransactionConflict';
      BatchStatementErrorCodeEnum2['ValidationError'] = 'ValidationError';
    })(
      (BatchStatementErrorCodeEnum = exports.BatchStatementErrorCodeEnum || (exports.BatchStatementErrorCodeEnum = {}))
    );
    var InternalServerError = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'InternalServerError',
          $fault: 'server',
          ...opts,
        });
        this.name = 'InternalServerError';
        this.$fault = 'server';
        Object.setPrototypeOf(this, InternalServerError.prototype);
      }
    };
    exports.InternalServerError = InternalServerError;
    var RequestLimitExceeded = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'RequestLimitExceeded',
          $fault: 'client',
          ...opts,
        });
        this.name = 'RequestLimitExceeded';
        this.$fault = 'client';
        Object.setPrototypeOf(this, RequestLimitExceeded.prototype);
      }
    };
    exports.RequestLimitExceeded = RequestLimitExceeded;
    var InvalidEndpointException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'InvalidEndpointException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidEndpointException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidEndpointException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidEndpointException = InvalidEndpointException;
    var ProvisionedThroughputExceededException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ProvisionedThroughputExceededException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ProvisionedThroughputExceededException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ProvisionedThroughputExceededException.prototype);
      }
    };
    exports.ProvisionedThroughputExceededException = ProvisionedThroughputExceededException;
    var ResourceNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ResourceNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ResourceNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
      }
    };
    exports.ResourceNotFoundException = ResourceNotFoundException;
    var ItemCollectionSizeLimitExceededException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ItemCollectionSizeLimitExceededException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ItemCollectionSizeLimitExceededException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ItemCollectionSizeLimitExceededException.prototype);
      }
    };
    exports.ItemCollectionSizeLimitExceededException = ItemCollectionSizeLimitExceededException;
    var ConditionalCheckFailedException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ConditionalCheckFailedException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ConditionalCheckFailedException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ConditionalCheckFailedException.prototype);
      }
    };
    exports.ConditionalCheckFailedException = ConditionalCheckFailedException;
    var ContinuousBackupsUnavailableException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ContinuousBackupsUnavailableException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ContinuousBackupsUnavailableException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ContinuousBackupsUnavailableException.prototype);
      }
    };
    exports.ContinuousBackupsUnavailableException = ContinuousBackupsUnavailableException;
    var LimitExceededException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'LimitExceededException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'LimitExceededException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, LimitExceededException.prototype);
      }
    };
    exports.LimitExceededException = LimitExceededException;
    var TableInUseException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'TableInUseException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TableInUseException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TableInUseException.prototype);
      }
    };
    exports.TableInUseException = TableInUseException;
    var TableNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'TableNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TableNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TableNotFoundException.prototype);
      }
    };
    exports.TableNotFoundException = TableNotFoundException;
    var TableClass;
    (function (TableClass2) {
      TableClass2['STANDARD'] = 'STANDARD';
      TableClass2['STANDARD_INFREQUENT_ACCESS'] = 'STANDARD_INFREQUENT_ACCESS';
    })((TableClass = exports.TableClass || (exports.TableClass = {})));
    var GlobalTableAlreadyExistsException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'GlobalTableAlreadyExistsException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'GlobalTableAlreadyExistsException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, GlobalTableAlreadyExistsException.prototype);
      }
    };
    exports.GlobalTableAlreadyExistsException = GlobalTableAlreadyExistsException;
    var ResourceInUseException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ResourceInUseException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ResourceInUseException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
      }
    };
    exports.ResourceInUseException = ResourceInUseException;
    var TransactionConflictException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'TransactionConflictException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TransactionConflictException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TransactionConflictException.prototype);
      }
    };
    exports.TransactionConflictException = TransactionConflictException;
    var ExportFormat;
    (function (ExportFormat2) {
      ExportFormat2['DYNAMODB_JSON'] = 'DYNAMODB_JSON';
      ExportFormat2['ION'] = 'ION';
    })((ExportFormat = exports.ExportFormat || (exports.ExportFormat = {})));
    var ExportStatus;
    (function (ExportStatus2) {
      ExportStatus2['COMPLETED'] = 'COMPLETED';
      ExportStatus2['FAILED'] = 'FAILED';
      ExportStatus2['IN_PROGRESS'] = 'IN_PROGRESS';
    })((ExportStatus = exports.ExportStatus || (exports.ExportStatus = {})));
    var ExportNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ExportNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ExportNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ExportNotFoundException.prototype);
      }
    };
    exports.ExportNotFoundException = ExportNotFoundException;
    var GlobalTableNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'GlobalTableNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'GlobalTableNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, GlobalTableNotFoundException.prototype);
      }
    };
    exports.GlobalTableNotFoundException = GlobalTableNotFoundException;
    var DuplicateItemException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'DuplicateItemException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'DuplicateItemException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, DuplicateItemException.prototype);
      }
    };
    exports.DuplicateItemException = DuplicateItemException;
    var IdempotentParameterMismatchException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'IdempotentParameterMismatchException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'IdempotentParameterMismatchException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.IdempotentParameterMismatchException = IdempotentParameterMismatchException;
    var TransactionInProgressException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'TransactionInProgressException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TransactionInProgressException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TransactionInProgressException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TransactionInProgressException = TransactionInProgressException;
    var ExportConflictException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ExportConflictException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ExportConflictException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ExportConflictException.prototype);
      }
    };
    exports.ExportConflictException = ExportConflictException;
    var InvalidExportTimeException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'InvalidExportTimeException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidExportTimeException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidExportTimeException.prototype);
      }
    };
    exports.InvalidExportTimeException = InvalidExportTimeException;
    var PointInTimeRecoveryUnavailableException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'PointInTimeRecoveryUnavailableException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'PointInTimeRecoveryUnavailableException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, PointInTimeRecoveryUnavailableException.prototype);
      }
    };
    exports.PointInTimeRecoveryUnavailableException = PointInTimeRecoveryUnavailableException;
    var TableAlreadyExistsException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'TableAlreadyExistsException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TableAlreadyExistsException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TableAlreadyExistsException.prototype);
      }
    };
    exports.TableAlreadyExistsException = TableAlreadyExistsException;
    var InvalidRestoreTimeException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'InvalidRestoreTimeException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidRestoreTimeException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidRestoreTimeException.prototype);
      }
    };
    exports.InvalidRestoreTimeException = InvalidRestoreTimeException;
    var ReplicaAlreadyExistsException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ReplicaAlreadyExistsException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ReplicaAlreadyExistsException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ReplicaAlreadyExistsException.prototype);
      }
    };
    exports.ReplicaAlreadyExistsException = ReplicaAlreadyExistsException;
    var ReplicaNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ReplicaNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ReplicaNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ReplicaNotFoundException.prototype);
      }
    };
    exports.ReplicaNotFoundException = ReplicaNotFoundException;
    var IndexNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'IndexNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'IndexNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, IndexNotFoundException.prototype);
      }
    };
    exports.IndexNotFoundException = IndexNotFoundException;
    var AttributeValue;
    (function (AttributeValue2) {
      AttributeValue2.visit = (value, visitor) => {
        if (value.S !== void 0) return visitor.S(value.S);
        if (value.N !== void 0) return visitor.N(value.N);
        if (value.B !== void 0) return visitor.B(value.B);
        if (value.SS !== void 0) return visitor.SS(value.SS);
        if (value.NS !== void 0) return visitor.NS(value.NS);
        if (value.BS !== void 0) return visitor.BS(value.BS);
        if (value.M !== void 0) return visitor.M(value.M);
        if (value.L !== void 0) return visitor.L(value.L);
        if (value.NULL !== void 0) return visitor.NULL(value.NULL);
        if (value.BOOL !== void 0) return visitor.BOOL(value.BOOL);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })((AttributeValue = exports.AttributeValue || (exports.AttributeValue = {})));
    var TransactionCanceledException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'TransactionCanceledException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TransactionCanceledException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TransactionCanceledException.prototype);
        this.Message = opts.Message;
        this.CancellationReasons = opts.CancellationReasons;
      }
    };
    exports.TransactionCanceledException = TransactionCanceledException;
    var ArchivalSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ArchivalSummaryFilterSensitiveLog = ArchivalSummaryFilterSensitiveLog;
    var AttributeDefinitionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.AttributeDefinitionFilterSensitiveLog = AttributeDefinitionFilterSensitiveLog;
    var AutoScalingTargetTrackingScalingPolicyConfigurationDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.AutoScalingTargetTrackingScalingPolicyConfigurationDescriptionFilterSensitiveLog =
      AutoScalingTargetTrackingScalingPolicyConfigurationDescriptionFilterSensitiveLog;
    var AutoScalingPolicyDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.AutoScalingPolicyDescriptionFilterSensitiveLog = AutoScalingPolicyDescriptionFilterSensitiveLog;
    var AutoScalingTargetTrackingScalingPolicyConfigurationUpdateFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.AutoScalingTargetTrackingScalingPolicyConfigurationUpdateFilterSensitiveLog =
      AutoScalingTargetTrackingScalingPolicyConfigurationUpdateFilterSensitiveLog;
    var AutoScalingPolicyUpdateFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.AutoScalingPolicyUpdateFilterSensitiveLog = AutoScalingPolicyUpdateFilterSensitiveLog;
    var AutoScalingSettingsDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.AutoScalingSettingsDescriptionFilterSensitiveLog = AutoScalingSettingsDescriptionFilterSensitiveLog;
    var AutoScalingSettingsUpdateFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.AutoScalingSettingsUpdateFilterSensitiveLog = AutoScalingSettingsUpdateFilterSensitiveLog;
    var BackupDetailsFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.BackupDetailsFilterSensitiveLog = BackupDetailsFilterSensitiveLog;
    var KeySchemaElementFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.KeySchemaElementFilterSensitiveLog = KeySchemaElementFilterSensitiveLog;
    var ProvisionedThroughputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ProvisionedThroughputFilterSensitiveLog = ProvisionedThroughputFilterSensitiveLog;
    var SourceTableDetailsFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.SourceTableDetailsFilterSensitiveLog = SourceTableDetailsFilterSensitiveLog;
    var ProjectionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ProjectionFilterSensitiveLog = ProjectionFilterSensitiveLog;
    var GlobalSecondaryIndexInfoFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.GlobalSecondaryIndexInfoFilterSensitiveLog = GlobalSecondaryIndexInfoFilterSensitiveLog;
    var LocalSecondaryIndexInfoFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.LocalSecondaryIndexInfoFilterSensitiveLog = LocalSecondaryIndexInfoFilterSensitiveLog;
    var SSEDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.SSEDescriptionFilterSensitiveLog = SSEDescriptionFilterSensitiveLog;
    var StreamSpecificationFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.StreamSpecificationFilterSensitiveLog = StreamSpecificationFilterSensitiveLog;
    var TimeToLiveDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.TimeToLiveDescriptionFilterSensitiveLog = TimeToLiveDescriptionFilterSensitiveLog;
    var SourceTableFeatureDetailsFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.SourceTableFeatureDetailsFilterSensitiveLog = SourceTableFeatureDetailsFilterSensitiveLog;
    var BackupDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.BackupDescriptionFilterSensitiveLog = BackupDescriptionFilterSensitiveLog;
    var BackupSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.BackupSummaryFilterSensitiveLog = BackupSummaryFilterSensitiveLog;
    var CapacityFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.CapacityFilterSensitiveLog = CapacityFilterSensitiveLog;
    var ConsumedCapacityFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ConsumedCapacityFilterSensitiveLog = ConsumedCapacityFilterSensitiveLog;
    var BatchStatementErrorFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.BatchStatementErrorFilterSensitiveLog = BatchStatementErrorFilterSensitiveLog;
    var BillingModeSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.BillingModeSummaryFilterSensitiveLog = BillingModeSummaryFilterSensitiveLog;
    var PointInTimeRecoveryDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.PointInTimeRecoveryDescriptionFilterSensitiveLog = PointInTimeRecoveryDescriptionFilterSensitiveLog;
    var ContinuousBackupsDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ContinuousBackupsDescriptionFilterSensitiveLog = ContinuousBackupsDescriptionFilterSensitiveLog;
    var ContributorInsightsSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ContributorInsightsSummaryFilterSensitiveLog = ContributorInsightsSummaryFilterSensitiveLog;
    var CreateBackupInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.CreateBackupInputFilterSensitiveLog = CreateBackupInputFilterSensitiveLog;
    var CreateBackupOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.CreateBackupOutputFilterSensitiveLog = CreateBackupOutputFilterSensitiveLog;
    var CreateGlobalSecondaryIndexActionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.CreateGlobalSecondaryIndexActionFilterSensitiveLog = CreateGlobalSecondaryIndexActionFilterSensitiveLog;
    var ReplicaFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ReplicaFilterSensitiveLog = ReplicaFilterSensitiveLog;
    var CreateGlobalTableInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.CreateGlobalTableInputFilterSensitiveLog = CreateGlobalTableInputFilterSensitiveLog;
    var ProvisionedThroughputOverrideFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ProvisionedThroughputOverrideFilterSensitiveLog = ProvisionedThroughputOverrideFilterSensitiveLog;
    var ReplicaGlobalSecondaryIndexDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ReplicaGlobalSecondaryIndexDescriptionFilterSensitiveLog =
      ReplicaGlobalSecondaryIndexDescriptionFilterSensitiveLog;
    var TableClassSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.TableClassSummaryFilterSensitiveLog = TableClassSummaryFilterSensitiveLog;
    var ReplicaDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ReplicaDescriptionFilterSensitiveLog = ReplicaDescriptionFilterSensitiveLog;
    var GlobalTableDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.GlobalTableDescriptionFilterSensitiveLog = GlobalTableDescriptionFilterSensitiveLog;
    var CreateGlobalTableOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.CreateGlobalTableOutputFilterSensitiveLog = CreateGlobalTableOutputFilterSensitiveLog;
    var CreateReplicaActionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.CreateReplicaActionFilterSensitiveLog = CreateReplicaActionFilterSensitiveLog;
    var ReplicaGlobalSecondaryIndexFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ReplicaGlobalSecondaryIndexFilterSensitiveLog = ReplicaGlobalSecondaryIndexFilterSensitiveLog;
    var CreateReplicationGroupMemberActionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.CreateReplicationGroupMemberActionFilterSensitiveLog = CreateReplicationGroupMemberActionFilterSensitiveLog;
    var GlobalSecondaryIndexFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.GlobalSecondaryIndexFilterSensitiveLog = GlobalSecondaryIndexFilterSensitiveLog;
    var LocalSecondaryIndexFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.LocalSecondaryIndexFilterSensitiveLog = LocalSecondaryIndexFilterSensitiveLog;
    var SSESpecificationFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.SSESpecificationFilterSensitiveLog = SSESpecificationFilterSensitiveLog;
    var TagFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.TagFilterSensitiveLog = TagFilterSensitiveLog;
    var CreateTableInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.CreateTableInputFilterSensitiveLog = CreateTableInputFilterSensitiveLog;
    var ProvisionedThroughputDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ProvisionedThroughputDescriptionFilterSensitiveLog = ProvisionedThroughputDescriptionFilterSensitiveLog;
    var GlobalSecondaryIndexDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.GlobalSecondaryIndexDescriptionFilterSensitiveLog = GlobalSecondaryIndexDescriptionFilterSensitiveLog;
    var LocalSecondaryIndexDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.LocalSecondaryIndexDescriptionFilterSensitiveLog = LocalSecondaryIndexDescriptionFilterSensitiveLog;
    var RestoreSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.RestoreSummaryFilterSensitiveLog = RestoreSummaryFilterSensitiveLog;
    var TableDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.TableDescriptionFilterSensitiveLog = TableDescriptionFilterSensitiveLog;
    var CreateTableOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.CreateTableOutputFilterSensitiveLog = CreateTableOutputFilterSensitiveLog;
    var DeleteBackupInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DeleteBackupInputFilterSensitiveLog = DeleteBackupInputFilterSensitiveLog;
    var DeleteBackupOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DeleteBackupOutputFilterSensitiveLog = DeleteBackupOutputFilterSensitiveLog;
    var DeleteGlobalSecondaryIndexActionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DeleteGlobalSecondaryIndexActionFilterSensitiveLog = DeleteGlobalSecondaryIndexActionFilterSensitiveLog;
    var DeleteReplicaActionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DeleteReplicaActionFilterSensitiveLog = DeleteReplicaActionFilterSensitiveLog;
    var DeleteReplicationGroupMemberActionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DeleteReplicationGroupMemberActionFilterSensitiveLog = DeleteReplicationGroupMemberActionFilterSensitiveLog;
    var DeleteTableInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DeleteTableInputFilterSensitiveLog = DeleteTableInputFilterSensitiveLog;
    var DeleteTableOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DeleteTableOutputFilterSensitiveLog = DeleteTableOutputFilterSensitiveLog;
    var DescribeBackupInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeBackupInputFilterSensitiveLog = DescribeBackupInputFilterSensitiveLog;
    var DescribeBackupOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeBackupOutputFilterSensitiveLog = DescribeBackupOutputFilterSensitiveLog;
    var DescribeContinuousBackupsInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeContinuousBackupsInputFilterSensitiveLog = DescribeContinuousBackupsInputFilterSensitiveLog;
    var DescribeContinuousBackupsOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeContinuousBackupsOutputFilterSensitiveLog = DescribeContinuousBackupsOutputFilterSensitiveLog;
    var DescribeContributorInsightsInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeContributorInsightsInputFilterSensitiveLog = DescribeContributorInsightsInputFilterSensitiveLog;
    var FailureExceptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.FailureExceptionFilterSensitiveLog = FailureExceptionFilterSensitiveLog;
    var DescribeContributorInsightsOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeContributorInsightsOutputFilterSensitiveLog = DescribeContributorInsightsOutputFilterSensitiveLog;
    var DescribeEndpointsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeEndpointsRequestFilterSensitiveLog = DescribeEndpointsRequestFilterSensitiveLog;
    var EndpointFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.EndpointFilterSensitiveLog = EndpointFilterSensitiveLog;
    var DescribeEndpointsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeEndpointsResponseFilterSensitiveLog = DescribeEndpointsResponseFilterSensitiveLog;
    var DescribeExportInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeExportInputFilterSensitiveLog = DescribeExportInputFilterSensitiveLog;
    var ExportDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ExportDescriptionFilterSensitiveLog = ExportDescriptionFilterSensitiveLog;
    var DescribeExportOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeExportOutputFilterSensitiveLog = DescribeExportOutputFilterSensitiveLog;
    var DescribeGlobalTableInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeGlobalTableInputFilterSensitiveLog = DescribeGlobalTableInputFilterSensitiveLog;
    var DescribeGlobalTableOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeGlobalTableOutputFilterSensitiveLog = DescribeGlobalTableOutputFilterSensitiveLog;
    var DescribeGlobalTableSettingsInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeGlobalTableSettingsInputFilterSensitiveLog = DescribeGlobalTableSettingsInputFilterSensitiveLog;
    var ReplicaGlobalSecondaryIndexSettingsDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ReplicaGlobalSecondaryIndexSettingsDescriptionFilterSensitiveLog =
      ReplicaGlobalSecondaryIndexSettingsDescriptionFilterSensitiveLog;
    var ReplicaSettingsDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ReplicaSettingsDescriptionFilterSensitiveLog = ReplicaSettingsDescriptionFilterSensitiveLog;
    var DescribeGlobalTableSettingsOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeGlobalTableSettingsOutputFilterSensitiveLog = DescribeGlobalTableSettingsOutputFilterSensitiveLog;
    var DescribeKinesisStreamingDestinationInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeKinesisStreamingDestinationInputFilterSensitiveLog =
      DescribeKinesisStreamingDestinationInputFilterSensitiveLog;
    var KinesisDataStreamDestinationFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.KinesisDataStreamDestinationFilterSensitiveLog = KinesisDataStreamDestinationFilterSensitiveLog;
    var DescribeKinesisStreamingDestinationOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeKinesisStreamingDestinationOutputFilterSensitiveLog =
      DescribeKinesisStreamingDestinationOutputFilterSensitiveLog;
    var DescribeLimitsInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeLimitsInputFilterSensitiveLog = DescribeLimitsInputFilterSensitiveLog;
    var DescribeLimitsOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeLimitsOutputFilterSensitiveLog = DescribeLimitsOutputFilterSensitiveLog;
    var DescribeTableInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeTableInputFilterSensitiveLog = DescribeTableInputFilterSensitiveLog;
    var DescribeTableOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeTableOutputFilterSensitiveLog = DescribeTableOutputFilterSensitiveLog;
    var DescribeTableReplicaAutoScalingInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeTableReplicaAutoScalingInputFilterSensitiveLog =
      DescribeTableReplicaAutoScalingInputFilterSensitiveLog;
    var ReplicaGlobalSecondaryIndexAutoScalingDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ReplicaGlobalSecondaryIndexAutoScalingDescriptionFilterSensitiveLog =
      ReplicaGlobalSecondaryIndexAutoScalingDescriptionFilterSensitiveLog;
    var ReplicaAutoScalingDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ReplicaAutoScalingDescriptionFilterSensitiveLog = ReplicaAutoScalingDescriptionFilterSensitiveLog;
    var TableAutoScalingDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.TableAutoScalingDescriptionFilterSensitiveLog = TableAutoScalingDescriptionFilterSensitiveLog;
    var DescribeTableReplicaAutoScalingOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeTableReplicaAutoScalingOutputFilterSensitiveLog =
      DescribeTableReplicaAutoScalingOutputFilterSensitiveLog;
    var DescribeTimeToLiveInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeTimeToLiveInputFilterSensitiveLog = DescribeTimeToLiveInputFilterSensitiveLog;
    var DescribeTimeToLiveOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DescribeTimeToLiveOutputFilterSensitiveLog = DescribeTimeToLiveOutputFilterSensitiveLog;
    var KinesisStreamingDestinationInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.KinesisStreamingDestinationInputFilterSensitiveLog = KinesisStreamingDestinationInputFilterSensitiveLog;
    var KinesisStreamingDestinationOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.KinesisStreamingDestinationOutputFilterSensitiveLog = KinesisStreamingDestinationOutputFilterSensitiveLog;
    var ExportTableToPointInTimeInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ExportTableToPointInTimeInputFilterSensitiveLog = ExportTableToPointInTimeInputFilterSensitiveLog;
    var ExportTableToPointInTimeOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ExportTableToPointInTimeOutputFilterSensitiveLog = ExportTableToPointInTimeOutputFilterSensitiveLog;
    var ListBackupsInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ListBackupsInputFilterSensitiveLog = ListBackupsInputFilterSensitiveLog;
    var ListBackupsOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ListBackupsOutputFilterSensitiveLog = ListBackupsOutputFilterSensitiveLog;
    var ListContributorInsightsInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ListContributorInsightsInputFilterSensitiveLog = ListContributorInsightsInputFilterSensitiveLog;
    var ListContributorInsightsOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ListContributorInsightsOutputFilterSensitiveLog = ListContributorInsightsOutputFilterSensitiveLog;
    var ListExportsInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ListExportsInputFilterSensitiveLog = ListExportsInputFilterSensitiveLog;
    var ExportSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ExportSummaryFilterSensitiveLog = ExportSummaryFilterSensitiveLog;
    var ListExportsOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ListExportsOutputFilterSensitiveLog = ListExportsOutputFilterSensitiveLog;
    var ListGlobalTablesInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ListGlobalTablesInputFilterSensitiveLog = ListGlobalTablesInputFilterSensitiveLog;
    var GlobalTableFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.GlobalTableFilterSensitiveLog = GlobalTableFilterSensitiveLog;
    var ListGlobalTablesOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ListGlobalTablesOutputFilterSensitiveLog = ListGlobalTablesOutputFilterSensitiveLog;
    var ListTablesInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ListTablesInputFilterSensitiveLog = ListTablesInputFilterSensitiveLog;
    var ListTablesOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ListTablesOutputFilterSensitiveLog = ListTablesOutputFilterSensitiveLog;
    var ListTagsOfResourceInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ListTagsOfResourceInputFilterSensitiveLog = ListTagsOfResourceInputFilterSensitiveLog;
    var ListTagsOfResourceOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ListTagsOfResourceOutputFilterSensitiveLog = ListTagsOfResourceOutputFilterSensitiveLog;
    var RestoreTableFromBackupInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.RestoreTableFromBackupInputFilterSensitiveLog = RestoreTableFromBackupInputFilterSensitiveLog;
    var RestoreTableFromBackupOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.RestoreTableFromBackupOutputFilterSensitiveLog = RestoreTableFromBackupOutputFilterSensitiveLog;
    var RestoreTableToPointInTimeInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.RestoreTableToPointInTimeInputFilterSensitiveLog = RestoreTableToPointInTimeInputFilterSensitiveLog;
    var RestoreTableToPointInTimeOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.RestoreTableToPointInTimeOutputFilterSensitiveLog = RestoreTableToPointInTimeOutputFilterSensitiveLog;
    var TagResourceInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.TagResourceInputFilterSensitiveLog = TagResourceInputFilterSensitiveLog;
    var UntagResourceInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.UntagResourceInputFilterSensitiveLog = UntagResourceInputFilterSensitiveLog;
    var PointInTimeRecoverySpecificationFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.PointInTimeRecoverySpecificationFilterSensitiveLog = PointInTimeRecoverySpecificationFilterSensitiveLog;
    var UpdateContinuousBackupsInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.UpdateContinuousBackupsInputFilterSensitiveLog = UpdateContinuousBackupsInputFilterSensitiveLog;
    var UpdateContinuousBackupsOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.UpdateContinuousBackupsOutputFilterSensitiveLog = UpdateContinuousBackupsOutputFilterSensitiveLog;
    var UpdateContributorInsightsInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.UpdateContributorInsightsInputFilterSensitiveLog = UpdateContributorInsightsInputFilterSensitiveLog;
    var UpdateContributorInsightsOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.UpdateContributorInsightsOutputFilterSensitiveLog = UpdateContributorInsightsOutputFilterSensitiveLog;
    var ReplicaUpdateFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ReplicaUpdateFilterSensitiveLog = ReplicaUpdateFilterSensitiveLog;
    var UpdateGlobalTableInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.UpdateGlobalTableInputFilterSensitiveLog = UpdateGlobalTableInputFilterSensitiveLog;
    var UpdateGlobalTableOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.UpdateGlobalTableOutputFilterSensitiveLog = UpdateGlobalTableOutputFilterSensitiveLog;
    var GlobalTableGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.GlobalTableGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog =
      GlobalTableGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog;
    var ReplicaGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ReplicaGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog =
      ReplicaGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog;
    var ReplicaSettingsUpdateFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ReplicaSettingsUpdateFilterSensitiveLog = ReplicaSettingsUpdateFilterSensitiveLog;
    var UpdateGlobalTableSettingsInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.UpdateGlobalTableSettingsInputFilterSensitiveLog = UpdateGlobalTableSettingsInputFilterSensitiveLog;
    var UpdateGlobalTableSettingsOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.UpdateGlobalTableSettingsOutputFilterSensitiveLog = UpdateGlobalTableSettingsOutputFilterSensitiveLog;
    var UpdateGlobalSecondaryIndexActionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.UpdateGlobalSecondaryIndexActionFilterSensitiveLog = UpdateGlobalSecondaryIndexActionFilterSensitiveLog;
    var GlobalSecondaryIndexUpdateFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.GlobalSecondaryIndexUpdateFilterSensitiveLog = GlobalSecondaryIndexUpdateFilterSensitiveLog;
    var UpdateReplicationGroupMemberActionFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.UpdateReplicationGroupMemberActionFilterSensitiveLog = UpdateReplicationGroupMemberActionFilterSensitiveLog;
    var ReplicationGroupUpdateFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ReplicationGroupUpdateFilterSensitiveLog = ReplicationGroupUpdateFilterSensitiveLog;
    var UpdateTableInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.UpdateTableInputFilterSensitiveLog = UpdateTableInputFilterSensitiveLog;
    var UpdateTableOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.UpdateTableOutputFilterSensitiveLog = UpdateTableOutputFilterSensitiveLog;
    var GlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.GlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog =
      GlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog;
    var ReplicaGlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ReplicaGlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog =
      ReplicaGlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog;
    var ReplicaAutoScalingUpdateFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ReplicaAutoScalingUpdateFilterSensitiveLog = ReplicaAutoScalingUpdateFilterSensitiveLog;
    var UpdateTableReplicaAutoScalingInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.UpdateTableReplicaAutoScalingInputFilterSensitiveLog = UpdateTableReplicaAutoScalingInputFilterSensitiveLog;
    var UpdateTableReplicaAutoScalingOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.UpdateTableReplicaAutoScalingOutputFilterSensitiveLog =
      UpdateTableReplicaAutoScalingOutputFilterSensitiveLog;
    var TimeToLiveSpecificationFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.TimeToLiveSpecificationFilterSensitiveLog = TimeToLiveSpecificationFilterSensitiveLog;
    var UpdateTimeToLiveInputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.UpdateTimeToLiveInputFilterSensitiveLog = UpdateTimeToLiveInputFilterSensitiveLog;
    var UpdateTimeToLiveOutputFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.UpdateTimeToLiveOutputFilterSensitiveLog = UpdateTimeToLiveOutputFilterSensitiveLog;
    var AttributeValueFilterSensitiveLog = (obj) => {
      if (obj.S !== void 0) return { S: obj.S };
      if (obj.N !== void 0) return { N: obj.N };
      if (obj.B !== void 0) return { B: obj.B };
      if (obj.SS !== void 0) return { SS: obj.SS };
      if (obj.NS !== void 0) return { NS: obj.NS };
      if (obj.BS !== void 0) return { BS: obj.BS };
      if (obj.M !== void 0)
        return {
          M: Object.entries(obj.M).reduce(
            (acc, [key, value]) => ({
              ...acc,
              [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
            }),
            {}
          ),
        };
      if (obj.L !== void 0) return { L: obj.L.map((item) => (0, exports.AttributeValueFilterSensitiveLog)(item)) };
      if (obj.NULL !== void 0) return { NULL: obj.NULL };
      if (obj.BOOL !== void 0) return { BOOL: obj.BOOL };
      if (obj.$unknown !== void 0) return { [obj.$unknown[0]]: 'UNKNOWN' };
    };
    exports.AttributeValueFilterSensitiveLog = AttributeValueFilterSensitiveLog;
    var AttributeValueUpdateFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Value && { Value: (0, exports.AttributeValueFilterSensitiveLog)(obj.Value) }),
    });
    exports.AttributeValueUpdateFilterSensitiveLog = AttributeValueUpdateFilterSensitiveLog;
    var BatchStatementRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Parameters && {
        Parameters: obj.Parameters.map((item) => (0, exports.AttributeValueFilterSensitiveLog)(item)),
      }),
    });
    exports.BatchStatementRequestFilterSensitiveLog = BatchStatementRequestFilterSensitiveLog;
    var BatchStatementResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Item && {
        Item: Object.entries(obj.Item).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.BatchStatementResponseFilterSensitiveLog = BatchStatementResponseFilterSensitiveLog;
    var CancellationReasonFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Item && {
        Item: Object.entries(obj.Item).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.CancellationReasonFilterSensitiveLog = CancellationReasonFilterSensitiveLog;
    var ConditionFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.AttributeValueList && {
        AttributeValueList: obj.AttributeValueList.map((item) => (0, exports.AttributeValueFilterSensitiveLog)(item)),
      }),
    });
    exports.ConditionFilterSensitiveLog = ConditionFilterSensitiveLog;
    var DeleteRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Key && {
        Key: Object.entries(obj.Key).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.DeleteRequestFilterSensitiveLog = DeleteRequestFilterSensitiveLog;
    var ExecuteStatementInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Parameters && {
        Parameters: obj.Parameters.map((item) => (0, exports.AttributeValueFilterSensitiveLog)(item)),
      }),
    });
    exports.ExecuteStatementInputFilterSensitiveLog = ExecuteStatementInputFilterSensitiveLog;
    var GetFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Key && {
        Key: Object.entries(obj.Key).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.GetFilterSensitiveLog = GetFilterSensitiveLog;
    var GetItemInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Key && {
        Key: Object.entries(obj.Key).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.GetItemInputFilterSensitiveLog = GetItemInputFilterSensitiveLog;
    var GetItemOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Item && {
        Item: Object.entries(obj.Item).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.GetItemOutputFilterSensitiveLog = GetItemOutputFilterSensitiveLog;
    var ItemCollectionMetricsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.ItemCollectionKey && {
        ItemCollectionKey: Object.entries(obj.ItemCollectionKey).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.ItemCollectionMetricsFilterSensitiveLog = ItemCollectionMetricsFilterSensitiveLog;
    var ItemResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Item && {
        Item: Object.entries(obj.Item).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.ItemResponseFilterSensitiveLog = ItemResponseFilterSensitiveLog;
    var ParameterizedStatementFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Parameters && {
        Parameters: obj.Parameters.map((item) => (0, exports.AttributeValueFilterSensitiveLog)(item)),
      }),
    });
    exports.ParameterizedStatementFilterSensitiveLog = ParameterizedStatementFilterSensitiveLog;
    var PutRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Item && {
        Item: Object.entries(obj.Item).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.PutRequestFilterSensitiveLog = PutRequestFilterSensitiveLog;
    var KeysAndAttributesFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Keys && {
        Keys: obj.Keys.map((item) =>
          Object.entries(item).reduce(
            (acc, [key, value]) => ({
              ...acc,
              [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
            }),
            {}
          )
        ),
      }),
    });
    exports.KeysAndAttributesFilterSensitiveLog = KeysAndAttributesFilterSensitiveLog;
    var TransactGetItemFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Get && { Get: (0, exports.GetFilterSensitiveLog)(obj.Get) }),
    });
    exports.TransactGetItemFilterSensitiveLog = TransactGetItemFilterSensitiveLog;
    var BatchExecuteStatementInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Statements && {
        Statements: obj.Statements.map((item) => (0, exports.BatchStatementRequestFilterSensitiveLog)(item)),
      }),
    });
    exports.BatchExecuteStatementInputFilterSensitiveLog = BatchExecuteStatementInputFilterSensitiveLog;
    var BatchExecuteStatementOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Responses && {
        Responses: obj.Responses.map((item) => (0, exports.BatchStatementResponseFilterSensitiveLog)(item)),
      }),
    });
    exports.BatchExecuteStatementOutputFilterSensitiveLog = BatchExecuteStatementOutputFilterSensitiveLog;
    var ExecuteTransactionInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.TransactStatements && {
        TransactStatements: obj.TransactStatements.map((item) =>
          (0, exports.ParameterizedStatementFilterSensitiveLog)(item)
        ),
      }),
    });
    exports.ExecuteTransactionInputFilterSensitiveLog = ExecuteTransactionInputFilterSensitiveLog;
    var ExecuteTransactionOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Responses && {
        Responses: obj.Responses.map((item) => (0, exports.ItemResponseFilterSensitiveLog)(item)),
      }),
    });
    exports.ExecuteTransactionOutputFilterSensitiveLog = ExecuteTransactionOutputFilterSensitiveLog;
    var TransactGetItemsOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Responses && {
        Responses: obj.Responses.map((item) => (0, exports.ItemResponseFilterSensitiveLog)(item)),
      }),
    });
    exports.TransactGetItemsOutputFilterSensitiveLog = TransactGetItemsOutputFilterSensitiveLog;
    var BatchGetItemInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.RequestItems && {
        RequestItems: Object.entries(obj.RequestItems).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.KeysAndAttributesFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.BatchGetItemInputFilterSensitiveLog = BatchGetItemInputFilterSensitiveLog;
    var ExpectedAttributeValueFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Value && { Value: (0, exports.AttributeValueFilterSensitiveLog)(obj.Value) }),
      ...(obj.AttributeValueList && {
        AttributeValueList: obj.AttributeValueList.map((item) => (0, exports.AttributeValueFilterSensitiveLog)(item)),
      }),
    });
    exports.ExpectedAttributeValueFilterSensitiveLog = ExpectedAttributeValueFilterSensitiveLog;
    var TransactGetItemsInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.TransactItems && {
        TransactItems: obj.TransactItems.map((item) => (0, exports.TransactGetItemFilterSensitiveLog)(item)),
      }),
    });
    exports.TransactGetItemsInputFilterSensitiveLog = TransactGetItemsInputFilterSensitiveLog;
    var TransactWriteItemsOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.ItemCollectionMetrics && {
        ItemCollectionMetrics: Object.entries(obj.ItemCollectionMetrics).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: value.map((item) => (0, exports.ItemCollectionMetricsFilterSensitiveLog)(item)),
          }),
          {}
        ),
      }),
    });
    exports.TransactWriteItemsOutputFilterSensitiveLog = TransactWriteItemsOutputFilterSensitiveLog;
    var ConditionCheckFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Key && {
        Key: Object.entries(obj.Key).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
      ...(obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.ConditionCheckFilterSensitiveLog = ConditionCheckFilterSensitiveLog;
    var DeleteFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Key && {
        Key: Object.entries(obj.Key).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
      ...(obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.DeleteFilterSensitiveLog = DeleteFilterSensitiveLog;
    var PutFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Item && {
        Item: Object.entries(obj.Item).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
      ...(obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.PutFilterSensitiveLog = PutFilterSensitiveLog;
    var UpdateFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Key && {
        Key: Object.entries(obj.Key).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
      ...(obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.UpdateFilterSensitiveLog = UpdateFilterSensitiveLog;
    var DeleteItemOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Attributes && {
        Attributes: Object.entries(obj.Attributes).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
      ...(obj.ItemCollectionMetrics && {
        ItemCollectionMetrics: (0, exports.ItemCollectionMetricsFilterSensitiveLog)(obj.ItemCollectionMetrics),
      }),
    });
    exports.DeleteItemOutputFilterSensitiveLog = DeleteItemOutputFilterSensitiveLog;
    var ExecuteStatementOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Items && {
        Items: obj.Items.map((item) =>
          Object.entries(item).reduce(
            (acc, [key, value]) => ({
              ...acc,
              [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
            }),
            {}
          )
        ),
      }),
      ...(obj.LastEvaluatedKey && {
        LastEvaluatedKey: Object.entries(obj.LastEvaluatedKey).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.ExecuteStatementOutputFilterSensitiveLog = ExecuteStatementOutputFilterSensitiveLog;
    var PutItemOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Attributes && {
        Attributes: Object.entries(obj.Attributes).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
      ...(obj.ItemCollectionMetrics && {
        ItemCollectionMetrics: (0, exports.ItemCollectionMetricsFilterSensitiveLog)(obj.ItemCollectionMetrics),
      }),
    });
    exports.PutItemOutputFilterSensitiveLog = PutItemOutputFilterSensitiveLog;
    var QueryOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Items && {
        Items: obj.Items.map((item) =>
          Object.entries(item).reduce(
            (acc, [key, value]) => ({
              ...acc,
              [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
            }),
            {}
          )
        ),
      }),
      ...(obj.LastEvaluatedKey && {
        LastEvaluatedKey: Object.entries(obj.LastEvaluatedKey).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.QueryOutputFilterSensitiveLog = QueryOutputFilterSensitiveLog;
    var ScanOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Items && {
        Items: obj.Items.map((item) =>
          Object.entries(item).reduce(
            (acc, [key, value]) => ({
              ...acc,
              [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
            }),
            {}
          )
        ),
      }),
      ...(obj.LastEvaluatedKey && {
        LastEvaluatedKey: Object.entries(obj.LastEvaluatedKey).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.ScanOutputFilterSensitiveLog = ScanOutputFilterSensitiveLog;
    var UpdateItemOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Attributes && {
        Attributes: Object.entries(obj.Attributes).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
      ...(obj.ItemCollectionMetrics && {
        ItemCollectionMetrics: (0, exports.ItemCollectionMetricsFilterSensitiveLog)(obj.ItemCollectionMetrics),
      }),
    });
    exports.UpdateItemOutputFilterSensitiveLog = UpdateItemOutputFilterSensitiveLog;
    var WriteRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.PutRequest && { PutRequest: (0, exports.PutRequestFilterSensitiveLog)(obj.PutRequest) }),
      ...(obj.DeleteRequest && { DeleteRequest: (0, exports.DeleteRequestFilterSensitiveLog)(obj.DeleteRequest) }),
    });
    exports.WriteRequestFilterSensitiveLog = WriteRequestFilterSensitiveLog;
    var BatchGetItemOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Responses && {
        Responses: Object.entries(obj.Responses).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: value.map((item) =>
              Object.entries(item).reduce(
                (acc2, [key2, value2]) => ({
                  ...acc2,
                  [key2]: (0, exports.AttributeValueFilterSensitiveLog)(value2),
                }),
                {}
              )
            ),
          }),
          {}
        ),
      }),
      ...(obj.UnprocessedKeys && {
        UnprocessedKeys: Object.entries(obj.UnprocessedKeys).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.KeysAndAttributesFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.BatchGetItemOutputFilterSensitiveLog = BatchGetItemOutputFilterSensitiveLog;
    var ScanInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.ScanFilter && {
        ScanFilter: Object.entries(obj.ScanFilter).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.ConditionFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
      ...(obj.ExclusiveStartKey && {
        ExclusiveStartKey: Object.entries(obj.ExclusiveStartKey).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
      ...(obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.ScanInputFilterSensitiveLog = ScanInputFilterSensitiveLog;
    var BatchWriteItemInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.RequestItems && {
        RequestItems: Object.entries(obj.RequestItems).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: value.map((item) => (0, exports.WriteRequestFilterSensitiveLog)(item)),
          }),
          {}
        ),
      }),
    });
    exports.BatchWriteItemInputFilterSensitiveLog = BatchWriteItemInputFilterSensitiveLog;
    var DeleteItemInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Key && {
        Key: Object.entries(obj.Key).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
      ...(obj.Expected && {
        Expected: Object.entries(obj.Expected).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.ExpectedAttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
      ...(obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.DeleteItemInputFilterSensitiveLog = DeleteItemInputFilterSensitiveLog;
    var PutItemInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Item && {
        Item: Object.entries(obj.Item).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
      ...(obj.Expected && {
        Expected: Object.entries(obj.Expected).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.ExpectedAttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
      ...(obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.PutItemInputFilterSensitiveLog = PutItemInputFilterSensitiveLog;
    var QueryInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.KeyConditions && {
        KeyConditions: Object.entries(obj.KeyConditions).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.ConditionFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
      ...(obj.QueryFilter && {
        QueryFilter: Object.entries(obj.QueryFilter).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.ConditionFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
      ...(obj.ExclusiveStartKey && {
        ExclusiveStartKey: Object.entries(obj.ExclusiveStartKey).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
      ...(obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.QueryInputFilterSensitiveLog = QueryInputFilterSensitiveLog;
    var BatchWriteItemOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.UnprocessedItems && {
        UnprocessedItems: Object.entries(obj.UnprocessedItems).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: value.map((item) => (0, exports.WriteRequestFilterSensitiveLog)(item)),
          }),
          {}
        ),
      }),
      ...(obj.ItemCollectionMetrics && {
        ItemCollectionMetrics: Object.entries(obj.ItemCollectionMetrics).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: value.map((item) => (0, exports.ItemCollectionMetricsFilterSensitiveLog)(item)),
          }),
          {}
        ),
      }),
    });
    exports.BatchWriteItemOutputFilterSensitiveLog = BatchWriteItemOutputFilterSensitiveLog;
    var UpdateItemInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.Key && {
        Key: Object.entries(obj.Key).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
      ...(obj.AttributeUpdates && {
        AttributeUpdates: Object.entries(obj.AttributeUpdates).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueUpdateFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
      ...(obj.Expected && {
        Expected: Object.entries(obj.Expected).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.ExpectedAttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
      ...(obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce(
          (acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports.AttributeValueFilterSensitiveLog)(value),
          }),
          {}
        ),
      }),
    });
    exports.UpdateItemInputFilterSensitiveLog = UpdateItemInputFilterSensitiveLog;
    var TransactWriteItemFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.ConditionCheck && { ConditionCheck: (0, exports.ConditionCheckFilterSensitiveLog)(obj.ConditionCheck) }),
      ...(obj.Put && { Put: (0, exports.PutFilterSensitiveLog)(obj.Put) }),
      ...(obj.Delete && { Delete: (0, exports.DeleteFilterSensitiveLog)(obj.Delete) }),
      ...(obj.Update && { Update: (0, exports.UpdateFilterSensitiveLog)(obj.Update) }),
    });
    exports.TransactWriteItemFilterSensitiveLog = TransactWriteItemFilterSensitiveLog;
    var TransactWriteItemsInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.TransactItems && {
        TransactItems: obj.TransactItems.map((item) => (0, exports.TransactWriteItemFilterSensitiveLog)(item)),
      }),
    });
    exports.TransactWriteItemsInputFilterSensitiveLog = TransactWriteItemsInputFilterSensitiveLog;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HttpRequest = void 0;
    var HttpRequest = class {
      constructor(options) {
        this.method = options.method || 'GET';
        this.hostname = options.hostname || 'localhost';
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol
          ? options.protocol.slice(-1) !== ':'
            ? `${options.protocol}:`
            : options.protocol
          : 'https:';
        this.path = options.path ? (options.path.charAt(0) !== '/' ? `/${options.path}` : options.path) : '/';
      }
      static isInstance(request) {
        if (!request) return false;
        const req = request;
        return (
          'method' in req &&
          'protocol' in req &&
          'hostname' in req &&
          'path' in req &&
          typeof req['query'] === 'object' &&
          typeof req['headers'] === 'object'
        );
      }
      clone() {
        const cloned = new HttpRequest({
          ...this,
          headers: { ...this.headers },
        });
        if (cloned.query) cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param,
        };
      }, {});
    }
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response) return false;
        const resp = response;
        return typeof resp.statusCode === 'number' && typeof resp.headers === 'object';
      }
    };
    exports.HttpResponse = HttpResponse;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports.isValidHostname = isValidHostname;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/protocol-http/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/protocol-http/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_httpHandler(), exports);
    tslib_1.__exportStar(require_httpRequest(), exports);
    tslib_1.__exportStar(require_httpResponse(), exports);
    tslib_1.__exportStar(require_isValidHostname(), exports);
  },
});

// node_modules/uuid/dist/rng.js
var require_rng = __commonJS({
  'node_modules/uuid/dist/rng.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = rng;
    var _crypto = _interopRequireDefault(require('crypto'));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var rnds8Pool = new Uint8Array(256);
    var poolPtr = rnds8Pool.length;
    function rng() {
      if (poolPtr > rnds8Pool.length - 16) {
        _crypto.default.randomFillSync(rnds8Pool);
        poolPtr = 0;
      }
      return rnds8Pool.slice(poolPtr, (poolPtr += 16));
    }
  },
});

// node_modules/uuid/dist/regex.js
var require_regex = __commonJS({
  'node_modules/uuid/dist/regex.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _default =
      /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/validate.js
var require_validate = __commonJS({
  'node_modules/uuid/dist/validate.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _regex = _interopRequireDefault(require_regex());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function validate(uuid) {
      return typeof uuid === 'string' && _regex.default.test(uuid);
    }
    var _default = validate;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/stringify.js
var require_stringify = __commonJS({
  'node_modules/uuid/dist/stringify.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    function stringify(arr, offset = 0) {
      const uuid = (
        byteToHex[arr[offset + 0]] +
        byteToHex[arr[offset + 1]] +
        byteToHex[arr[offset + 2]] +
        byteToHex[arr[offset + 3]] +
        '-' +
        byteToHex[arr[offset + 4]] +
        byteToHex[arr[offset + 5]] +
        '-' +
        byteToHex[arr[offset + 6]] +
        byteToHex[arr[offset + 7]] +
        '-' +
        byteToHex[arr[offset + 8]] +
        byteToHex[arr[offset + 9]] +
        '-' +
        byteToHex[arr[offset + 10]] +
        byteToHex[arr[offset + 11]] +
        byteToHex[arr[offset + 12]] +
        byteToHex[arr[offset + 13]] +
        byteToHex[arr[offset + 14]] +
        byteToHex[arr[offset + 15]]
      ).toLowerCase();
      if (!(0, _validate.default)(uuid)) {
        throw TypeError('Stringified UUID is invalid');
      }
      return uuid;
    }
    var _default = stringify;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/v1.js
var require_v1 = __commonJS({
  'node_modules/uuid/dist/v1.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = _interopRequireDefault(require_stringify());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      let i = (buf && offset) || 0;
      const b = buf || new Array(16);
      options = options || {};
      let node = options.node || _nodeId;
      let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        const seedBytes = options.random || (options.rng || _rng.default)();
        if (node == null) {
          node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
        }
        if (clockseq == null) {
          clockseq = _clockseq = ((seedBytes[6] << 8) | seedBytes[7]) & 16383;
        }
      }
      let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
      let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = (clockseq + 1) & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b[i++] = (tl >>> 24) & 255;
      b[i++] = (tl >>> 16) & 255;
      b[i++] = (tl >>> 8) & 255;
      b[i++] = tl & 255;
      const tmh = ((msecs / 4294967296) * 1e4) & 268435455;
      b[i++] = (tmh >>> 8) & 255;
      b[i++] = tmh & 255;
      b[i++] = ((tmh >>> 24) & 15) | 16;
      b[i++] = (tmh >>> 16) & 255;
      b[i++] = (clockseq >>> 8) | 128;
      b[i++] = clockseq & 255;
      for (let n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }
      return buf || (0, _stringify.default)(b);
    }
    var _default = v1;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/parse.js
var require_parse = __commonJS({
  'node_modules/uuid/dist/parse.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function parse(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError('Invalid UUID');
      }
      let v;
      const arr = new Uint8Array(16);
      arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
      arr[1] = (v >>> 16) & 255;
      arr[2] = (v >>> 8) & 255;
      arr[3] = v & 255;
      arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
      arr[5] = v & 255;
      arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
      arr[7] = v & 255;
      arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
      arr[9] = v & 255;
      arr[10] = ((v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776) & 255;
      arr[11] = (v / 4294967296) & 255;
      arr[12] = (v >>> 24) & 255;
      arr[13] = (v >>> 16) & 255;
      arr[14] = (v >>> 8) & 255;
      arr[15] = v & 255;
      return arr;
    }
    var _default = parse;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/v35.js
var require_v35 = __commonJS({
  'node_modules/uuid/dist/v35.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = _default;
    exports.URL = exports.DNS = void 0;
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str));
      const bytes = [];
      for (let i = 0; i < str.length; ++i) {
        bytes.push(str.charCodeAt(i));
      }
      return bytes;
    }
    var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
    exports.DNS = DNS;
    var URL2 = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
    exports.URL = URL2;
    function _default(name, version, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        if (typeof value === 'string') {
          value = stringToBytes(value);
        }
        if (typeof namespace === 'string') {
          namespace = (0, _parse.default)(namespace);
        }
        if (namespace.length !== 16) {
          throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
        }
        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = (bytes[6] & 15) | version;
        bytes[8] = (bytes[8] & 63) | 128;
        if (buf) {
          offset = offset || 0;
          for (let i = 0; i < 16; ++i) {
            buf[offset + i] = bytes[i];
          }
          return buf;
        }
        return (0, _stringify.default)(bytes);
      }
      try {
        generateUUID.name = name;
      } catch (err) {}
      generateUUID.DNS = DNS;
      generateUUID.URL = URL2;
      return generateUUID;
    }
  },
});

// node_modules/uuid/dist/md5.js
var require_md5 = __commonJS({
  'node_modules/uuid/dist/md5.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _crypto = _interopRequireDefault(require('crypto'));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function md5(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === 'string') {
        bytes = Buffer.from(bytes, 'utf8');
      }
      return _crypto.default.createHash('md5').update(bytes).digest();
    }
    var _default = md5;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/v3.js
var require_v3 = __commonJS({
  'node_modules/uuid/dist/v3.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _md = _interopRequireDefault(require_md5());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v3 = (0, _v.default)('v3', 48, _md.default);
    var _default = v3;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/v4.js
var require_v4 = __commonJS({
  'node_modules/uuid/dist/v4.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = _interopRequireDefault(require_stringify());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function v4(options, buf, offset) {
      options = options || {};
      const rnds = options.random || (options.rng || _rng.default)();
      rnds[6] = (rnds[6] & 15) | 64;
      rnds[8] = (rnds[8] & 63) | 128;
      if (buf) {
        offset = offset || 0;
        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }
        return buf;
      }
      return (0, _stringify.default)(rnds);
    }
    var _default = v4;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/sha1.js
var require_sha1 = __commonJS({
  'node_modules/uuid/dist/sha1.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _crypto = _interopRequireDefault(require('crypto'));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function sha1(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === 'string') {
        bytes = Buffer.from(bytes, 'utf8');
      }
      return _crypto.default.createHash('sha1').update(bytes).digest();
    }
    var _default = sha1;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/v5.js
var require_v5 = __commonJS({
  'node_modules/uuid/dist/v5.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _sha = _interopRequireDefault(require_sha1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v5 = (0, _v.default)('v5', 80, _sha.default);
    var _default = v5;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/nil.js
var require_nil = __commonJS({
  'node_modules/uuid/dist/nil.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _default = '00000000-0000-0000-0000-000000000000';
    exports.default = _default;
  },
});

// node_modules/uuid/dist/version.js
var require_version = __commonJS({
  'node_modules/uuid/dist/version.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function version(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError('Invalid UUID');
      }
      return parseInt(uuid.substr(14, 1), 16);
    }
    var _default = version;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/index.js
var require_dist = __commonJS({
  'node_modules/uuid/dist/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(exports, 'v1', {
      enumerable: true,
      get: function () {
        return _v.default;
      },
    });
    Object.defineProperty(exports, 'v3', {
      enumerable: true,
      get: function () {
        return _v2.default;
      },
    });
    Object.defineProperty(exports, 'v4', {
      enumerable: true,
      get: function () {
        return _v3.default;
      },
    });
    Object.defineProperty(exports, 'v5', {
      enumerable: true,
      get: function () {
        return _v4.default;
      },
    });
    Object.defineProperty(exports, 'NIL', {
      enumerable: true,
      get: function () {
        return _nil.default;
      },
    });
    Object.defineProperty(exports, 'version', {
      enumerable: true,
      get: function () {
        return _version.default;
      },
    });
    Object.defineProperty(exports, 'validate', {
      enumerable: true,
      get: function () {
        return _validate.default;
      },
    });
    Object.defineProperty(exports, 'stringify', {
      enumerable: true,
      get: function () {
        return _stringify.default;
      },
    });
    Object.defineProperty(exports, 'parse', {
      enumerable: true,
      get: function () {
        return _parse.default;
      },
    });
    var _v = _interopRequireDefault(require_v1());
    var _v2 = _interopRequireDefault(require_v3());
    var _v3 = _interopRequireDefault(require_v4());
    var _v4 = _interopRequireDefault(require_v5());
    var _nil = _interopRequireDefault(require_nil());
    var _version = _interopRequireDefault(require_version());
    var _validate = _interopRequireDefault(require_validate());
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/protocols/Aws_json1_0.js
var require_Aws_json1_0 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/protocols/Aws_json1_0.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.serializeAws_json1_0UpdateTimeToLiveCommand =
      exports.serializeAws_json1_0UpdateTableReplicaAutoScalingCommand =
      exports.serializeAws_json1_0UpdateTableCommand =
      exports.serializeAws_json1_0UpdateItemCommand =
      exports.serializeAws_json1_0UpdateGlobalTableSettingsCommand =
      exports.serializeAws_json1_0UpdateGlobalTableCommand =
      exports.serializeAws_json1_0UpdateContributorInsightsCommand =
      exports.serializeAws_json1_0UpdateContinuousBackupsCommand =
      exports.serializeAws_json1_0UntagResourceCommand =
      exports.serializeAws_json1_0TransactWriteItemsCommand =
      exports.serializeAws_json1_0TransactGetItemsCommand =
      exports.serializeAws_json1_0TagResourceCommand =
      exports.serializeAws_json1_0ScanCommand =
      exports.serializeAws_json1_0RestoreTableToPointInTimeCommand =
      exports.serializeAws_json1_0RestoreTableFromBackupCommand =
      exports.serializeAws_json1_0QueryCommand =
      exports.serializeAws_json1_0PutItemCommand =
      exports.serializeAws_json1_0ListTagsOfResourceCommand =
      exports.serializeAws_json1_0ListTablesCommand =
      exports.serializeAws_json1_0ListGlobalTablesCommand =
      exports.serializeAws_json1_0ListExportsCommand =
      exports.serializeAws_json1_0ListContributorInsightsCommand =
      exports.serializeAws_json1_0ListBackupsCommand =
      exports.serializeAws_json1_0GetItemCommand =
      exports.serializeAws_json1_0ExportTableToPointInTimeCommand =
      exports.serializeAws_json1_0ExecuteTransactionCommand =
      exports.serializeAws_json1_0ExecuteStatementCommand =
      exports.serializeAws_json1_0EnableKinesisStreamingDestinationCommand =
      exports.serializeAws_json1_0DisableKinesisStreamingDestinationCommand =
      exports.serializeAws_json1_0DescribeTimeToLiveCommand =
      exports.serializeAws_json1_0DescribeTableReplicaAutoScalingCommand =
      exports.serializeAws_json1_0DescribeTableCommand =
      exports.serializeAws_json1_0DescribeLimitsCommand =
      exports.serializeAws_json1_0DescribeKinesisStreamingDestinationCommand =
      exports.serializeAws_json1_0DescribeGlobalTableSettingsCommand =
      exports.serializeAws_json1_0DescribeGlobalTableCommand =
      exports.serializeAws_json1_0DescribeExportCommand =
      exports.serializeAws_json1_0DescribeEndpointsCommand =
      exports.serializeAws_json1_0DescribeContributorInsightsCommand =
      exports.serializeAws_json1_0DescribeContinuousBackupsCommand =
      exports.serializeAws_json1_0DescribeBackupCommand =
      exports.serializeAws_json1_0DeleteTableCommand =
      exports.serializeAws_json1_0DeleteItemCommand =
      exports.serializeAws_json1_0DeleteBackupCommand =
      exports.serializeAws_json1_0CreateTableCommand =
      exports.serializeAws_json1_0CreateGlobalTableCommand =
      exports.serializeAws_json1_0CreateBackupCommand =
      exports.serializeAws_json1_0BatchWriteItemCommand =
      exports.serializeAws_json1_0BatchGetItemCommand =
      exports.serializeAws_json1_0BatchExecuteStatementCommand =
        void 0;
    exports.deserializeAws_json1_0UpdateTimeToLiveCommand =
      exports.deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand =
      exports.deserializeAws_json1_0UpdateTableCommand =
      exports.deserializeAws_json1_0UpdateItemCommand =
      exports.deserializeAws_json1_0UpdateGlobalTableSettingsCommand =
      exports.deserializeAws_json1_0UpdateGlobalTableCommand =
      exports.deserializeAws_json1_0UpdateContributorInsightsCommand =
      exports.deserializeAws_json1_0UpdateContinuousBackupsCommand =
      exports.deserializeAws_json1_0UntagResourceCommand =
      exports.deserializeAws_json1_0TransactWriteItemsCommand =
      exports.deserializeAws_json1_0TransactGetItemsCommand =
      exports.deserializeAws_json1_0TagResourceCommand =
      exports.deserializeAws_json1_0ScanCommand =
      exports.deserializeAws_json1_0RestoreTableToPointInTimeCommand =
      exports.deserializeAws_json1_0RestoreTableFromBackupCommand =
      exports.deserializeAws_json1_0QueryCommand =
      exports.deserializeAws_json1_0PutItemCommand =
      exports.deserializeAws_json1_0ListTagsOfResourceCommand =
      exports.deserializeAws_json1_0ListTablesCommand =
      exports.deserializeAws_json1_0ListGlobalTablesCommand =
      exports.deserializeAws_json1_0ListExportsCommand =
      exports.deserializeAws_json1_0ListContributorInsightsCommand =
      exports.deserializeAws_json1_0ListBackupsCommand =
      exports.deserializeAws_json1_0GetItemCommand =
      exports.deserializeAws_json1_0ExportTableToPointInTimeCommand =
      exports.deserializeAws_json1_0ExecuteTransactionCommand =
      exports.deserializeAws_json1_0ExecuteStatementCommand =
      exports.deserializeAws_json1_0EnableKinesisStreamingDestinationCommand =
      exports.deserializeAws_json1_0DisableKinesisStreamingDestinationCommand =
      exports.deserializeAws_json1_0DescribeTimeToLiveCommand =
      exports.deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand =
      exports.deserializeAws_json1_0DescribeTableCommand =
      exports.deserializeAws_json1_0DescribeLimitsCommand =
      exports.deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand =
      exports.deserializeAws_json1_0DescribeGlobalTableSettingsCommand =
      exports.deserializeAws_json1_0DescribeGlobalTableCommand =
      exports.deserializeAws_json1_0DescribeExportCommand =
      exports.deserializeAws_json1_0DescribeEndpointsCommand =
      exports.deserializeAws_json1_0DescribeContributorInsightsCommand =
      exports.deserializeAws_json1_0DescribeContinuousBackupsCommand =
      exports.deserializeAws_json1_0DescribeBackupCommand =
      exports.deserializeAws_json1_0DeleteTableCommand =
      exports.deserializeAws_json1_0DeleteItemCommand =
      exports.deserializeAws_json1_0DeleteBackupCommand =
      exports.deserializeAws_json1_0CreateTableCommand =
      exports.deserializeAws_json1_0CreateGlobalTableCommand =
      exports.deserializeAws_json1_0CreateBackupCommand =
      exports.deserializeAws_json1_0BatchWriteItemCommand =
      exports.deserializeAws_json1_0BatchGetItemCommand =
      exports.deserializeAws_json1_0BatchExecuteStatementCommand =
        void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs3();
    var uuid_1 = require_dist();
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    var models_0_1 = require_models_0();
    var serializeAws_json1_0BatchExecuteStatementCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.BatchExecuteStatement',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0BatchExecuteStatementInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0BatchExecuteStatementCommand = serializeAws_json1_0BatchExecuteStatementCommand;
    var serializeAws_json1_0BatchGetItemCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.BatchGetItem',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0BatchGetItemInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0BatchGetItemCommand = serializeAws_json1_0BatchGetItemCommand;
    var serializeAws_json1_0BatchWriteItemCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.BatchWriteItem',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0BatchWriteItemInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0BatchWriteItemCommand = serializeAws_json1_0BatchWriteItemCommand;
    var serializeAws_json1_0CreateBackupCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.CreateBackup',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0CreateBackupInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0CreateBackupCommand = serializeAws_json1_0CreateBackupCommand;
    var serializeAws_json1_0CreateGlobalTableCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.CreateGlobalTable',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0CreateGlobalTableInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0CreateGlobalTableCommand = serializeAws_json1_0CreateGlobalTableCommand;
    var serializeAws_json1_0CreateTableCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.CreateTable',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0CreateTableInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0CreateTableCommand = serializeAws_json1_0CreateTableCommand;
    var serializeAws_json1_0DeleteBackupCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.DeleteBackup',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DeleteBackupInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0DeleteBackupCommand = serializeAws_json1_0DeleteBackupCommand;
    var serializeAws_json1_0DeleteItemCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.DeleteItem',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DeleteItemInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0DeleteItemCommand = serializeAws_json1_0DeleteItemCommand;
    var serializeAws_json1_0DeleteTableCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.DeleteTable',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DeleteTableInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0DeleteTableCommand = serializeAws_json1_0DeleteTableCommand;
    var serializeAws_json1_0DescribeBackupCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.DescribeBackup',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeBackupInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0DescribeBackupCommand = serializeAws_json1_0DescribeBackupCommand;
    var serializeAws_json1_0DescribeContinuousBackupsCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.DescribeContinuousBackups',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeContinuousBackupsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0DescribeContinuousBackupsCommand = serializeAws_json1_0DescribeContinuousBackupsCommand;
    var serializeAws_json1_0DescribeContributorInsightsCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.DescribeContributorInsights',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeContributorInsightsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0DescribeContributorInsightsCommand =
      serializeAws_json1_0DescribeContributorInsightsCommand;
    var serializeAws_json1_0DescribeEndpointsCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.DescribeEndpoints',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeEndpointsRequest(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0DescribeEndpointsCommand = serializeAws_json1_0DescribeEndpointsCommand;
    var serializeAws_json1_0DescribeExportCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.DescribeExport',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeExportInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0DescribeExportCommand = serializeAws_json1_0DescribeExportCommand;
    var serializeAws_json1_0DescribeGlobalTableCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.DescribeGlobalTable',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeGlobalTableInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0DescribeGlobalTableCommand = serializeAws_json1_0DescribeGlobalTableCommand;
    var serializeAws_json1_0DescribeGlobalTableSettingsCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.DescribeGlobalTableSettings',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeGlobalTableSettingsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0DescribeGlobalTableSettingsCommand =
      serializeAws_json1_0DescribeGlobalTableSettingsCommand;
    var serializeAws_json1_0DescribeKinesisStreamingDestinationCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.DescribeKinesisStreamingDestination',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeKinesisStreamingDestinationInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0DescribeKinesisStreamingDestinationCommand =
      serializeAws_json1_0DescribeKinesisStreamingDestinationCommand;
    var serializeAws_json1_0DescribeLimitsCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.DescribeLimits',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeLimitsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0DescribeLimitsCommand = serializeAws_json1_0DescribeLimitsCommand;
    var serializeAws_json1_0DescribeTableCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.DescribeTable',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeTableInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0DescribeTableCommand = serializeAws_json1_0DescribeTableCommand;
    var serializeAws_json1_0DescribeTableReplicaAutoScalingCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.DescribeTableReplicaAutoScaling',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeTableReplicaAutoScalingInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0DescribeTableReplicaAutoScalingCommand =
      serializeAws_json1_0DescribeTableReplicaAutoScalingCommand;
    var serializeAws_json1_0DescribeTimeToLiveCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.DescribeTimeToLive',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeTimeToLiveInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0DescribeTimeToLiveCommand = serializeAws_json1_0DescribeTimeToLiveCommand;
    var serializeAws_json1_0DisableKinesisStreamingDestinationCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.DisableKinesisStreamingDestination',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0KinesisStreamingDestinationInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0DisableKinesisStreamingDestinationCommand =
      serializeAws_json1_0DisableKinesisStreamingDestinationCommand;
    var serializeAws_json1_0EnableKinesisStreamingDestinationCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.EnableKinesisStreamingDestination',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0KinesisStreamingDestinationInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0EnableKinesisStreamingDestinationCommand =
      serializeAws_json1_0EnableKinesisStreamingDestinationCommand;
    var serializeAws_json1_0ExecuteStatementCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.ExecuteStatement',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ExecuteStatementInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0ExecuteStatementCommand = serializeAws_json1_0ExecuteStatementCommand;
    var serializeAws_json1_0ExecuteTransactionCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.ExecuteTransaction',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ExecuteTransactionInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0ExecuteTransactionCommand = serializeAws_json1_0ExecuteTransactionCommand;
    var serializeAws_json1_0ExportTableToPointInTimeCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.ExportTableToPointInTime',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ExportTableToPointInTimeInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0ExportTableToPointInTimeCommand = serializeAws_json1_0ExportTableToPointInTimeCommand;
    var serializeAws_json1_0GetItemCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.GetItem',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0GetItemInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0GetItemCommand = serializeAws_json1_0GetItemCommand;
    var serializeAws_json1_0ListBackupsCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.ListBackups',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ListBackupsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0ListBackupsCommand = serializeAws_json1_0ListBackupsCommand;
    var serializeAws_json1_0ListContributorInsightsCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.ListContributorInsights',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ListContributorInsightsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0ListContributorInsightsCommand = serializeAws_json1_0ListContributorInsightsCommand;
    var serializeAws_json1_0ListExportsCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.ListExports',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ListExportsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0ListExportsCommand = serializeAws_json1_0ListExportsCommand;
    var serializeAws_json1_0ListGlobalTablesCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.ListGlobalTables',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ListGlobalTablesInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0ListGlobalTablesCommand = serializeAws_json1_0ListGlobalTablesCommand;
    var serializeAws_json1_0ListTablesCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.ListTables',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ListTablesInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0ListTablesCommand = serializeAws_json1_0ListTablesCommand;
    var serializeAws_json1_0ListTagsOfResourceCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.ListTagsOfResource',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ListTagsOfResourceInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0ListTagsOfResourceCommand = serializeAws_json1_0ListTagsOfResourceCommand;
    var serializeAws_json1_0PutItemCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.PutItem',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0PutItemInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0PutItemCommand = serializeAws_json1_0PutItemCommand;
    var serializeAws_json1_0QueryCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.Query',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0QueryInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0QueryCommand = serializeAws_json1_0QueryCommand;
    var serializeAws_json1_0RestoreTableFromBackupCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.RestoreTableFromBackup',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0RestoreTableFromBackupInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0RestoreTableFromBackupCommand = serializeAws_json1_0RestoreTableFromBackupCommand;
    var serializeAws_json1_0RestoreTableToPointInTimeCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.RestoreTableToPointInTime',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0RestoreTableToPointInTimeInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0RestoreTableToPointInTimeCommand = serializeAws_json1_0RestoreTableToPointInTimeCommand;
    var serializeAws_json1_0ScanCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.Scan',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ScanInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0ScanCommand = serializeAws_json1_0ScanCommand;
    var serializeAws_json1_0TagResourceCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.TagResource',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0TagResourceInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0TagResourceCommand = serializeAws_json1_0TagResourceCommand;
    var serializeAws_json1_0TransactGetItemsCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.TransactGetItems',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0TransactGetItemsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0TransactGetItemsCommand = serializeAws_json1_0TransactGetItemsCommand;
    var serializeAws_json1_0TransactWriteItemsCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.TransactWriteItems',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0TransactWriteItemsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0TransactWriteItemsCommand = serializeAws_json1_0TransactWriteItemsCommand;
    var serializeAws_json1_0UntagResourceCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.UntagResource',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UntagResourceInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0UntagResourceCommand = serializeAws_json1_0UntagResourceCommand;
    var serializeAws_json1_0UpdateContinuousBackupsCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.UpdateContinuousBackups',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateContinuousBackupsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0UpdateContinuousBackupsCommand = serializeAws_json1_0UpdateContinuousBackupsCommand;
    var serializeAws_json1_0UpdateContributorInsightsCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.UpdateContributorInsights',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateContributorInsightsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0UpdateContributorInsightsCommand = serializeAws_json1_0UpdateContributorInsightsCommand;
    var serializeAws_json1_0UpdateGlobalTableCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.UpdateGlobalTable',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateGlobalTableInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0UpdateGlobalTableCommand = serializeAws_json1_0UpdateGlobalTableCommand;
    var serializeAws_json1_0UpdateGlobalTableSettingsCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.UpdateGlobalTableSettings',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateGlobalTableSettingsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0UpdateGlobalTableSettingsCommand = serializeAws_json1_0UpdateGlobalTableSettingsCommand;
    var serializeAws_json1_0UpdateItemCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.UpdateItem',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateItemInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0UpdateItemCommand = serializeAws_json1_0UpdateItemCommand;
    var serializeAws_json1_0UpdateTableCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.UpdateTable',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateTableInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0UpdateTableCommand = serializeAws_json1_0UpdateTableCommand;
    var serializeAws_json1_0UpdateTableReplicaAutoScalingCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.UpdateTableReplicaAutoScaling',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateTableReplicaAutoScalingInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0UpdateTableReplicaAutoScalingCommand =
      serializeAws_json1_0UpdateTableReplicaAutoScalingCommand;
    var serializeAws_json1_0UpdateTimeToLiveCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': 'DynamoDB_20120810.UpdateTimeToLive',
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateTimeToLiveInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_json1_0UpdateTimeToLiveCommand = serializeAws_json1_0UpdateTimeToLiveCommand;
    var deserializeAws_json1_0BatchExecuteStatementCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0BatchExecuteStatementCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0BatchExecuteStatementOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0BatchExecuteStatementCommand = deserializeAws_json1_0BatchExecuteStatementCommand;
    var deserializeAws_json1_0BatchExecuteStatementCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0BatchGetItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0BatchGetItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0BatchGetItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0BatchGetItemCommand = deserializeAws_json1_0BatchGetItemCommand;
    var deserializeAws_json1_0BatchGetItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0BatchWriteItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0BatchWriteItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0BatchWriteItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0BatchWriteItemCommand = deserializeAws_json1_0BatchWriteItemCommand;
    var deserializeAws_json1_0BatchWriteItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'ItemCollectionSizeLimitExceededException':
        case 'com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException':
          throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0CreateBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0CreateBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0CreateBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0CreateBackupCommand = deserializeAws_json1_0CreateBackupCommand;
    var deserializeAws_json1_0CreateBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'BackupInUseException':
        case 'com.amazonaws.dynamodb#BackupInUseException':
          throw await deserializeAws_json1_0BackupInUseExceptionResponse(parsedOutput, context);
        case 'ContinuousBackupsUnavailableException':
        case 'com.amazonaws.dynamodb#ContinuousBackupsUnavailableException':
          throw await deserializeAws_json1_0ContinuousBackupsUnavailableExceptionResponse(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case 'TableInUseException':
        case 'com.amazonaws.dynamodb#TableInUseException':
          throw await deserializeAws_json1_0TableInUseExceptionResponse(parsedOutput, context);
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0CreateGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0CreateGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0CreateGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0CreateGlobalTableCommand = deserializeAws_json1_0CreateGlobalTableCommand;
    var deserializeAws_json1_0CreateGlobalTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'GlobalTableAlreadyExistsException':
        case 'com.amazonaws.dynamodb#GlobalTableAlreadyExistsException':
          throw await deserializeAws_json1_0GlobalTableAlreadyExistsExceptionResponse(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0CreateTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0CreateTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0CreateTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0CreateTableCommand = deserializeAws_json1_0CreateTableCommand;
    var deserializeAws_json1_0CreateTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DeleteBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DeleteBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DeleteBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DeleteBackupCommand = deserializeAws_json1_0DeleteBackupCommand;
    var deserializeAws_json1_0DeleteBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'BackupInUseException':
        case 'com.amazonaws.dynamodb#BackupInUseException':
          throw await deserializeAws_json1_0BackupInUseExceptionResponse(parsedOutput, context);
        case 'BackupNotFoundException':
        case 'com.amazonaws.dynamodb#BackupNotFoundException':
          throw await deserializeAws_json1_0BackupNotFoundExceptionResponse(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DeleteItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DeleteItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DeleteItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DeleteItemCommand = deserializeAws_json1_0DeleteItemCommand;
    var deserializeAws_json1_0DeleteItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ConditionalCheckFailedException':
        case 'com.amazonaws.dynamodb#ConditionalCheckFailedException':
          throw await deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'ItemCollectionSizeLimitExceededException':
        case 'com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException':
          throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case 'TransactionConflictException':
        case 'com.amazonaws.dynamodb#TransactionConflictException':
          throw await deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DeleteTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DeleteTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DeleteTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DeleteTableCommand = deserializeAws_json1_0DeleteTableCommand;
    var deserializeAws_json1_0DeleteTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeBackupCommand = deserializeAws_json1_0DescribeBackupCommand;
    var deserializeAws_json1_0DescribeBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'BackupNotFoundException':
        case 'com.amazonaws.dynamodb#BackupNotFoundException':
          throw await deserializeAws_json1_0BackupNotFoundExceptionResponse(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeContinuousBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeContinuousBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeContinuousBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeContinuousBackupsCommand =
      deserializeAws_json1_0DescribeContinuousBackupsCommand;
    var deserializeAws_json1_0DescribeContinuousBackupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeContributorInsightsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeContributorInsightsCommand =
      deserializeAws_json1_0DescribeContributorInsightsCommand;
    var deserializeAws_json1_0DescribeContributorInsightsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeEndpointsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeEndpointsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeEndpointsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeEndpointsCommand = deserializeAws_json1_0DescribeEndpointsCommand;
    var deserializeAws_json1_0DescribeEndpointsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeExportCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeExportCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeExportOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeExportCommand = deserializeAws_json1_0DescribeExportCommand;
    var deserializeAws_json1_0DescribeExportCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ExportNotFoundException':
        case 'com.amazonaws.dynamodb#ExportNotFoundException':
          throw await deserializeAws_json1_0ExportNotFoundExceptionResponse(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeGlobalTableCommand = deserializeAws_json1_0DescribeGlobalTableCommand;
    var deserializeAws_json1_0DescribeGlobalTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'GlobalTableNotFoundException':
        case 'com.amazonaws.dynamodb#GlobalTableNotFoundException':
          throw await deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeGlobalTableSettingsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeGlobalTableSettingsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeGlobalTableSettingsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeGlobalTableSettingsCommand =
      deserializeAws_json1_0DescribeGlobalTableSettingsCommand;
    var deserializeAws_json1_0DescribeGlobalTableSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'GlobalTableNotFoundException':
        case 'com.amazonaws.dynamodb#GlobalTableNotFoundException':
          throw await deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeKinesisStreamingDestinationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeKinesisStreamingDestinationOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand =
      deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand;
    var deserializeAws_json1_0DescribeKinesisStreamingDestinationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeLimitsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeLimitsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeLimitsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeLimitsCommand = deserializeAws_json1_0DescribeLimitsCommand;
    var deserializeAws_json1_0DescribeLimitsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeTableCommand = deserializeAws_json1_0DescribeTableCommand;
    var deserializeAws_json1_0DescribeTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeTableReplicaAutoScalingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeTableReplicaAutoScalingOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand =
      deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand;
    var deserializeAws_json1_0DescribeTableReplicaAutoScalingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeTimeToLiveCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeTimeToLiveCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeTimeToLiveOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeTimeToLiveCommand = deserializeAws_json1_0DescribeTimeToLiveCommand;
    var deserializeAws_json1_0DescribeTimeToLiveCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DisableKinesisStreamingDestinationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DisableKinesisStreamingDestinationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0KinesisStreamingDestinationOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DisableKinesisStreamingDestinationCommand =
      deserializeAws_json1_0DisableKinesisStreamingDestinationCommand;
    var deserializeAws_json1_0DisableKinesisStreamingDestinationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0EnableKinesisStreamingDestinationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0EnableKinesisStreamingDestinationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0KinesisStreamingDestinationOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0EnableKinesisStreamingDestinationCommand =
      deserializeAws_json1_0EnableKinesisStreamingDestinationCommand;
    var deserializeAws_json1_0EnableKinesisStreamingDestinationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ExecuteStatementCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ExecuteStatementCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ExecuteStatementOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ExecuteStatementCommand = deserializeAws_json1_0ExecuteStatementCommand;
    var deserializeAws_json1_0ExecuteStatementCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ConditionalCheckFailedException':
        case 'com.amazonaws.dynamodb#ConditionalCheckFailedException':
          throw await deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context);
        case 'DuplicateItemException':
        case 'com.amazonaws.dynamodb#DuplicateItemException':
          throw await deserializeAws_json1_0DuplicateItemExceptionResponse(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'ItemCollectionSizeLimitExceededException':
        case 'com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException':
          throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case 'TransactionConflictException':
        case 'com.amazonaws.dynamodb#TransactionConflictException':
          throw await deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ExecuteTransactionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ExecuteTransactionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ExecuteTransactionOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ExecuteTransactionCommand = deserializeAws_json1_0ExecuteTransactionCommand;
    var deserializeAws_json1_0ExecuteTransactionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'IdempotentParameterMismatchException':
        case 'com.amazonaws.dynamodb#IdempotentParameterMismatchException':
          throw await deserializeAws_json1_0IdempotentParameterMismatchExceptionResponse(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case 'TransactionCanceledException':
        case 'com.amazonaws.dynamodb#TransactionCanceledException':
          throw await deserializeAws_json1_0TransactionCanceledExceptionResponse(parsedOutput, context);
        case 'TransactionInProgressException':
        case 'com.amazonaws.dynamodb#TransactionInProgressException':
          throw await deserializeAws_json1_0TransactionInProgressExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ExportTableToPointInTimeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ExportTableToPointInTimeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ExportTableToPointInTimeOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ExportTableToPointInTimeCommand =
      deserializeAws_json1_0ExportTableToPointInTimeCommand;
    var deserializeAws_json1_0ExportTableToPointInTimeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ExportConflictException':
        case 'com.amazonaws.dynamodb#ExportConflictException':
          throw await deserializeAws_json1_0ExportConflictExceptionResponse(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidExportTimeException':
        case 'com.amazonaws.dynamodb#InvalidExportTimeException':
          throw await deserializeAws_json1_0InvalidExportTimeExceptionResponse(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case 'PointInTimeRecoveryUnavailableException':
        case 'com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException':
          throw await deserializeAws_json1_0PointInTimeRecoveryUnavailableExceptionResponse(parsedOutput, context);
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0GetItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0GetItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0GetItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0GetItemCommand = deserializeAws_json1_0GetItemCommand;
    var deserializeAws_json1_0GetItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ListBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ListBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ListBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ListBackupsCommand = deserializeAws_json1_0ListBackupsCommand;
    var deserializeAws_json1_0ListBackupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ListContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ListContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ListContributorInsightsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ListContributorInsightsCommand = deserializeAws_json1_0ListContributorInsightsCommand;
    var deserializeAws_json1_0ListContributorInsightsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ListExportsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ListExportsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ListExportsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ListExportsCommand = deserializeAws_json1_0ListExportsCommand;
    var deserializeAws_json1_0ListExportsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ListGlobalTablesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ListGlobalTablesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ListGlobalTablesOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ListGlobalTablesCommand = deserializeAws_json1_0ListGlobalTablesCommand;
    var deserializeAws_json1_0ListGlobalTablesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ListTablesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ListTablesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ListTablesOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ListTablesCommand = deserializeAws_json1_0ListTablesCommand;
    var deserializeAws_json1_0ListTablesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ListTagsOfResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ListTagsOfResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ListTagsOfResourceOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ListTagsOfResourceCommand = deserializeAws_json1_0ListTagsOfResourceCommand;
    var deserializeAws_json1_0ListTagsOfResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0PutItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0PutItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0PutItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0PutItemCommand = deserializeAws_json1_0PutItemCommand;
    var deserializeAws_json1_0PutItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ConditionalCheckFailedException':
        case 'com.amazonaws.dynamodb#ConditionalCheckFailedException':
          throw await deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'ItemCollectionSizeLimitExceededException':
        case 'com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException':
          throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case 'TransactionConflictException':
        case 'com.amazonaws.dynamodb#TransactionConflictException':
          throw await deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0QueryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0QueryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0QueryOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0QueryCommand = deserializeAws_json1_0QueryCommand;
    var deserializeAws_json1_0QueryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0RestoreTableFromBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0RestoreTableFromBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0RestoreTableFromBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0RestoreTableFromBackupCommand = deserializeAws_json1_0RestoreTableFromBackupCommand;
    var deserializeAws_json1_0RestoreTableFromBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'BackupInUseException':
        case 'com.amazonaws.dynamodb#BackupInUseException':
          throw await deserializeAws_json1_0BackupInUseExceptionResponse(parsedOutput, context);
        case 'BackupNotFoundException':
        case 'com.amazonaws.dynamodb#BackupNotFoundException':
          throw await deserializeAws_json1_0BackupNotFoundExceptionResponse(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case 'TableAlreadyExistsException':
        case 'com.amazonaws.dynamodb#TableAlreadyExistsException':
          throw await deserializeAws_json1_0TableAlreadyExistsExceptionResponse(parsedOutput, context);
        case 'TableInUseException':
        case 'com.amazonaws.dynamodb#TableInUseException':
          throw await deserializeAws_json1_0TableInUseExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0RestoreTableToPointInTimeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0RestoreTableToPointInTimeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0RestoreTableToPointInTimeOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0RestoreTableToPointInTimeCommand =
      deserializeAws_json1_0RestoreTableToPointInTimeCommand;
    var deserializeAws_json1_0RestoreTableToPointInTimeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'InvalidRestoreTimeException':
        case 'com.amazonaws.dynamodb#InvalidRestoreTimeException':
          throw await deserializeAws_json1_0InvalidRestoreTimeExceptionResponse(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case 'PointInTimeRecoveryUnavailableException':
        case 'com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException':
          throw await deserializeAws_json1_0PointInTimeRecoveryUnavailableExceptionResponse(parsedOutput, context);
        case 'TableAlreadyExistsException':
        case 'com.amazonaws.dynamodb#TableAlreadyExistsException':
          throw await deserializeAws_json1_0TableAlreadyExistsExceptionResponse(parsedOutput, context);
        case 'TableInUseException':
        case 'com.amazonaws.dynamodb#TableInUseException':
          throw await deserializeAws_json1_0TableInUseExceptionResponse(parsedOutput, context);
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ScanCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ScanCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ScanOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ScanCommand = deserializeAws_json1_0ScanCommand;
    var deserializeAws_json1_0ScanCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0TagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0TagResourceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output),
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0TagResourceCommand = deserializeAws_json1_0TagResourceCommand;
    var deserializeAws_json1_0TagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0TransactGetItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0TransactGetItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0TransactGetItemsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0TransactGetItemsCommand = deserializeAws_json1_0TransactGetItemsCommand;
    var deserializeAws_json1_0TransactGetItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case 'TransactionCanceledException':
        case 'com.amazonaws.dynamodb#TransactionCanceledException':
          throw await deserializeAws_json1_0TransactionCanceledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0TransactWriteItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0TransactWriteItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0TransactWriteItemsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0TransactWriteItemsCommand = deserializeAws_json1_0TransactWriteItemsCommand;
    var deserializeAws_json1_0TransactWriteItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'IdempotentParameterMismatchException':
        case 'com.amazonaws.dynamodb#IdempotentParameterMismatchException':
          throw await deserializeAws_json1_0IdempotentParameterMismatchExceptionResponse(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case 'TransactionCanceledException':
        case 'com.amazonaws.dynamodb#TransactionCanceledException':
          throw await deserializeAws_json1_0TransactionCanceledExceptionResponse(parsedOutput, context);
        case 'TransactionInProgressException':
        case 'com.amazonaws.dynamodb#TransactionInProgressException':
          throw await deserializeAws_json1_0TransactionInProgressExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0UntagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UntagResourceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output),
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0UntagResourceCommand = deserializeAws_json1_0UntagResourceCommand;
    var deserializeAws_json1_0UntagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0UpdateContinuousBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateContinuousBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateContinuousBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0UpdateContinuousBackupsCommand = deserializeAws_json1_0UpdateContinuousBackupsCommand;
    var deserializeAws_json1_0UpdateContinuousBackupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ContinuousBackupsUnavailableException':
        case 'com.amazonaws.dynamodb#ContinuousBackupsUnavailableException':
          throw await deserializeAws_json1_0ContinuousBackupsUnavailableExceptionResponse(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0UpdateContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateContributorInsightsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0UpdateContributorInsightsCommand =
      deserializeAws_json1_0UpdateContributorInsightsCommand;
    var deserializeAws_json1_0UpdateContributorInsightsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0UpdateGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0UpdateGlobalTableCommand = deserializeAws_json1_0UpdateGlobalTableCommand;
    var deserializeAws_json1_0UpdateGlobalTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'GlobalTableNotFoundException':
        case 'com.amazonaws.dynamodb#GlobalTableNotFoundException':
          throw await deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'ReplicaAlreadyExistsException':
        case 'com.amazonaws.dynamodb#ReplicaAlreadyExistsException':
          throw await deserializeAws_json1_0ReplicaAlreadyExistsExceptionResponse(parsedOutput, context);
        case 'ReplicaNotFoundException':
        case 'com.amazonaws.dynamodb#ReplicaNotFoundException':
          throw await deserializeAws_json1_0ReplicaNotFoundExceptionResponse(parsedOutput, context);
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0UpdateGlobalTableSettingsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateGlobalTableSettingsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateGlobalTableSettingsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0UpdateGlobalTableSettingsCommand =
      deserializeAws_json1_0UpdateGlobalTableSettingsCommand;
    var deserializeAws_json1_0UpdateGlobalTableSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'GlobalTableNotFoundException':
        case 'com.amazonaws.dynamodb#GlobalTableNotFoundException':
          throw await deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context);
        case 'IndexNotFoundException':
        case 'com.amazonaws.dynamodb#IndexNotFoundException':
          throw await deserializeAws_json1_0IndexNotFoundExceptionResponse(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case 'ReplicaNotFoundException':
        case 'com.amazonaws.dynamodb#ReplicaNotFoundException':
          throw await deserializeAws_json1_0ReplicaNotFoundExceptionResponse(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0UpdateItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0UpdateItemCommand = deserializeAws_json1_0UpdateItemCommand;
    var deserializeAws_json1_0UpdateItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ConditionalCheckFailedException':
        case 'com.amazonaws.dynamodb#ConditionalCheckFailedException':
          throw await deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'ItemCollectionSizeLimitExceededException':
        case 'com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException':
          throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case 'TransactionConflictException':
        case 'com.amazonaws.dynamodb#TransactionConflictException':
          throw await deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0UpdateTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0UpdateTableCommand = deserializeAws_json1_0UpdateTableCommand;
    var deserializeAws_json1_0UpdateTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateTableReplicaAutoScalingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateTableReplicaAutoScalingOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand =
      deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand;
    var deserializeAws_json1_0UpdateTableReplicaAutoScalingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0UpdateTimeToLiveCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateTimeToLiveCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateTimeToLiveOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0UpdateTimeToLiveCommand = deserializeAws_json1_0UpdateTimeToLiveCommand;
    var deserializeAws_json1_0UpdateTimeToLiveCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0BackupInUseExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0BackupInUseException(body, context);
      const exception = new models_0_1.BackupInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0BackupNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0BackupNotFoundException(body, context);
      const exception = new models_0_1.BackupNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ConditionalCheckFailedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ConditionalCheckFailedException(body, context);
      const exception = new models_0_1.ConditionalCheckFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ContinuousBackupsUnavailableExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ContinuousBackupsUnavailableException(body, context);
      const exception = new models_0_1.ContinuousBackupsUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0DuplicateItemExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0DuplicateItemException(body, context);
      const exception = new models_0_1.DuplicateItemException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ExportConflictExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ExportConflictException(body, context);
      const exception = new models_0_1.ExportConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ExportNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ExportNotFoundException(body, context);
      const exception = new models_0_1.ExportNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0GlobalTableAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0GlobalTableAlreadyExistsException(body, context);
      const exception = new models_0_1.GlobalTableAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0GlobalTableNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0GlobalTableNotFoundException(body, context);
      const exception = new models_0_1.GlobalTableNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0IdempotentParameterMismatchExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0IdempotentParameterMismatchException(body, context);
      const exception = new models_0_1.IdempotentParameterMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0IndexNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0IndexNotFoundException(body, context);
      const exception = new models_0_1.IndexNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0InternalServerErrorResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0InternalServerError(body, context);
      const exception = new models_0_1.InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0InvalidEndpointExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0InvalidEndpointException(body, context);
      const exception = new models_0_1.InvalidEndpointException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0InvalidExportTimeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0InvalidExportTimeException(body, context);
      const exception = new models_0_1.InvalidExportTimeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0InvalidRestoreTimeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0InvalidRestoreTimeException(body, context);
      const exception = new models_0_1.InvalidRestoreTimeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ItemCollectionSizeLimitExceededException(body, context);
      const exception = new models_0_1.ItemCollectionSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0LimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0LimitExceededException(body, context);
      const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0PointInTimeRecoveryUnavailableExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0PointInTimeRecoveryUnavailableException(body, context);
      const exception = new models_0_1.PointInTimeRecoveryUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ProvisionedThroughputExceededException(body, context);
      const exception = new models_0_1.ProvisionedThroughputExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ReplicaAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ReplicaAlreadyExistsException(body, context);
      const exception = new models_0_1.ReplicaAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ReplicaNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ReplicaNotFoundException(body, context);
      const exception = new models_0_1.ReplicaNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0RequestLimitExceededResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0RequestLimitExceeded(body, context);
      const exception = new models_0_1.RequestLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ResourceInUseExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ResourceInUseException(body, context);
      const exception = new models_0_1.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ResourceNotFoundException(body, context);
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0TableAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0TableAlreadyExistsException(body, context);
      const exception = new models_0_1.TableAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0TableInUseExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0TableInUseException(body, context);
      const exception = new models_0_1.TableInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0TableNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0TableNotFoundException(body, context);
      const exception = new models_0_1.TableNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0TransactionCanceledExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0TransactionCanceledException(body, context);
      const exception = new models_0_1.TransactionCanceledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0TransactionConflictExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0TransactionConflictException(body, context);
      const exception = new models_0_1.TransactionConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0TransactionInProgressExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0TransactionInProgressException(body, context);
      const exception = new models_0_1.TransactionInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_json1_0AttributeDefinition = (input, context) => {
      return {
        ...(input.AttributeName != null && { AttributeName: input.AttributeName }),
        ...(input.AttributeType != null && { AttributeType: input.AttributeType }),
      };
    };
    var serializeAws_json1_0AttributeDefinitions = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0AttributeDefinition(entry, context);
        });
    };
    var serializeAws_json1_0AttributeNameList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return entry;
        });
    };
    var serializeAws_json1_0AttributeUpdates = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0AttributeValueUpdate(value, context),
        };
      }, {});
    };
    var serializeAws_json1_0AttributeValue = (input, context) => {
      return models_0_1.AttributeValue.visit(input, {
        B: (value) => ({ B: context.base64Encoder(value) }),
        BOOL: (value) => ({ BOOL: value }),
        BS: (value) => ({ BS: serializeAws_json1_0BinarySetAttributeValue(value, context) }),
        L: (value) => ({ L: serializeAws_json1_0ListAttributeValue(value, context) }),
        M: (value) => ({ M: serializeAws_json1_0MapAttributeValue(value, context) }),
        N: (value) => ({ N: value }),
        NS: (value) => ({ NS: serializeAws_json1_0NumberSetAttributeValue(value, context) }),
        NULL: (value) => ({ NULL: value }),
        S: (value) => ({ S: value }),
        SS: (value) => ({ SS: serializeAws_json1_0StringSetAttributeValue(value, context) }),
        _: (name, value) => ({ name: value }),
      });
    };
    var serializeAws_json1_0AttributeValueList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0AttributeValue(entry, context);
        });
    };
    var serializeAws_json1_0AttributeValueUpdate = (input, context) => {
      return {
        ...(input.Action != null && { Action: input.Action }),
        ...(input.Value != null && { Value: serializeAws_json1_0AttributeValue(input.Value, context) }),
      };
    };
    var serializeAws_json1_0AutoScalingPolicyUpdate = (input, context) => {
      return {
        ...(input.PolicyName != null && { PolicyName: input.PolicyName }),
        ...(input.TargetTrackingScalingPolicyConfiguration != null && {
          TargetTrackingScalingPolicyConfiguration:
            serializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationUpdate(
              input.TargetTrackingScalingPolicyConfiguration,
              context
            ),
        }),
      };
    };
    var serializeAws_json1_0AutoScalingSettingsUpdate = (input, context) => {
      return {
        ...(input.AutoScalingDisabled != null && { AutoScalingDisabled: input.AutoScalingDisabled }),
        ...(input.AutoScalingRoleArn != null && { AutoScalingRoleArn: input.AutoScalingRoleArn }),
        ...(input.MaximumUnits != null && { MaximumUnits: input.MaximumUnits }),
        ...(input.MinimumUnits != null && { MinimumUnits: input.MinimumUnits }),
        ...(input.ScalingPolicyUpdate != null && {
          ScalingPolicyUpdate: serializeAws_json1_0AutoScalingPolicyUpdate(input.ScalingPolicyUpdate, context),
        }),
      };
    };
    var serializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationUpdate = (input, context) => {
      return {
        ...(input.DisableScaleIn != null && { DisableScaleIn: input.DisableScaleIn }),
        ...(input.ScaleInCooldown != null && { ScaleInCooldown: input.ScaleInCooldown }),
        ...(input.ScaleOutCooldown != null && { ScaleOutCooldown: input.ScaleOutCooldown }),
        ...(input.TargetValue != null && { TargetValue: (0, smithy_client_1.serializeFloat)(input.TargetValue) }),
      };
    };
    var serializeAws_json1_0BatchExecuteStatementInput = (input, context) => {
      return {
        ...(input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }),
        ...(input.Statements != null && {
          Statements: serializeAws_json1_0PartiQLBatchRequest(input.Statements, context),
        }),
      };
    };
    var serializeAws_json1_0BatchGetItemInput = (input, context) => {
      return {
        ...(input.RequestItems != null && {
          RequestItems: serializeAws_json1_0BatchGetRequestMap(input.RequestItems, context),
        }),
        ...(input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }),
      };
    };
    var serializeAws_json1_0BatchGetRequestMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0KeysAndAttributes(value, context),
        };
      }, {});
    };
    var serializeAws_json1_0BatchStatementRequest = (input, context) => {
      return {
        ...(input.ConsistentRead != null && { ConsistentRead: input.ConsistentRead }),
        ...(input.Parameters != null && {
          Parameters: serializeAws_json1_0PreparedStatementParameters(input.Parameters, context),
        }),
        ...(input.Statement != null && { Statement: input.Statement }),
      };
    };
    var serializeAws_json1_0BatchWriteItemInput = (input, context) => {
      return {
        ...(input.RequestItems != null && {
          RequestItems: serializeAws_json1_0BatchWriteItemRequestMap(input.RequestItems, context),
        }),
        ...(input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }),
        ...(input.ReturnItemCollectionMetrics != null && {
          ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics,
        }),
      };
    };
    var serializeAws_json1_0BatchWriteItemRequestMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0WriteRequests(value, context),
        };
      }, {});
    };
    var serializeAws_json1_0BinarySetAttributeValue = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return context.base64Encoder(entry);
        });
    };
    var serializeAws_json1_0Condition = (input, context) => {
      return {
        ...(input.AttributeValueList != null && {
          AttributeValueList: serializeAws_json1_0AttributeValueList(input.AttributeValueList, context),
        }),
        ...(input.ComparisonOperator != null && { ComparisonOperator: input.ComparisonOperator }),
      };
    };
    var serializeAws_json1_0ConditionCheck = (input, context) => {
      return {
        ...(input.ConditionExpression != null && { ConditionExpression: input.ConditionExpression }),
        ...(input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(
            input.ExpressionAttributeNames,
            context
          ),
        }),
        ...(input.ExpressionAttributeValues != null && {
          ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(
            input.ExpressionAttributeValues,
            context
          ),
        }),
        ...(input.Key != null && { Key: serializeAws_json1_0Key(input.Key, context) }),
        ...(input.ReturnValuesOnConditionCheckFailure != null && {
          ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure,
        }),
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0CreateBackupInput = (input, context) => {
      return {
        ...(input.BackupName != null && { BackupName: input.BackupName }),
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0CreateGlobalSecondaryIndexAction = (input, context) => {
      return {
        ...(input.IndexName != null && { IndexName: input.IndexName }),
        ...(input.KeySchema != null && { KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context) }),
        ...(input.Projection != null && { Projection: serializeAws_json1_0Projection(input.Projection, context) }),
        ...(input.ProvisionedThroughput != null && {
          ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context),
        }),
      };
    };
    var serializeAws_json1_0CreateGlobalTableInput = (input, context) => {
      return {
        ...(input.GlobalTableName != null && { GlobalTableName: input.GlobalTableName }),
        ...(input.ReplicationGroup != null && {
          ReplicationGroup: serializeAws_json1_0ReplicaList(input.ReplicationGroup, context),
        }),
      };
    };
    var serializeAws_json1_0CreateReplicaAction = (input, context) => {
      return {
        ...(input.RegionName != null && { RegionName: input.RegionName }),
      };
    };
    var serializeAws_json1_0CreateReplicationGroupMemberAction = (input, context) => {
      return {
        ...(input.GlobalSecondaryIndexes != null && {
          GlobalSecondaryIndexes: serializeAws_json1_0ReplicaGlobalSecondaryIndexList(
            input.GlobalSecondaryIndexes,
            context
          ),
        }),
        ...(input.KMSMasterKeyId != null && { KMSMasterKeyId: input.KMSMasterKeyId }),
        ...(input.ProvisionedThroughputOverride != null && {
          ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughputOverride(
            input.ProvisionedThroughputOverride,
            context
          ),
        }),
        ...(input.RegionName != null && { RegionName: input.RegionName }),
        ...(input.TableClassOverride != null && { TableClassOverride: input.TableClassOverride }),
      };
    };
    var serializeAws_json1_0CreateTableInput = (input, context) => {
      return {
        ...(input.AttributeDefinitions != null && {
          AttributeDefinitions: serializeAws_json1_0AttributeDefinitions(input.AttributeDefinitions, context),
        }),
        ...(input.BillingMode != null && { BillingMode: input.BillingMode }),
        ...(input.GlobalSecondaryIndexes != null && {
          GlobalSecondaryIndexes: serializeAws_json1_0GlobalSecondaryIndexList(input.GlobalSecondaryIndexes, context),
        }),
        ...(input.KeySchema != null && { KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context) }),
        ...(input.LocalSecondaryIndexes != null && {
          LocalSecondaryIndexes: serializeAws_json1_0LocalSecondaryIndexList(input.LocalSecondaryIndexes, context),
        }),
        ...(input.ProvisionedThroughput != null && {
          ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context),
        }),
        ...(input.SSESpecification != null && {
          SSESpecification: serializeAws_json1_0SSESpecification(input.SSESpecification, context),
        }),
        ...(input.StreamSpecification != null && {
          StreamSpecification: serializeAws_json1_0StreamSpecification(input.StreamSpecification, context),
        }),
        ...(input.TableClass != null && { TableClass: input.TableClass }),
        ...(input.TableName != null && { TableName: input.TableName }),
        ...(input.Tags != null && { Tags: serializeAws_json1_0TagList(input.Tags, context) }),
      };
    };
    var serializeAws_json1_0Delete = (input, context) => {
      return {
        ...(input.ConditionExpression != null && { ConditionExpression: input.ConditionExpression }),
        ...(input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(
            input.ExpressionAttributeNames,
            context
          ),
        }),
        ...(input.ExpressionAttributeValues != null && {
          ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(
            input.ExpressionAttributeValues,
            context
          ),
        }),
        ...(input.Key != null && { Key: serializeAws_json1_0Key(input.Key, context) }),
        ...(input.ReturnValuesOnConditionCheckFailure != null && {
          ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure,
        }),
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0DeleteBackupInput = (input, context) => {
      return {
        ...(input.BackupArn != null && { BackupArn: input.BackupArn }),
      };
    };
    var serializeAws_json1_0DeleteGlobalSecondaryIndexAction = (input, context) => {
      return {
        ...(input.IndexName != null && { IndexName: input.IndexName }),
      };
    };
    var serializeAws_json1_0DeleteItemInput = (input, context) => {
      return {
        ...(input.ConditionExpression != null && { ConditionExpression: input.ConditionExpression }),
        ...(input.ConditionalOperator != null && { ConditionalOperator: input.ConditionalOperator }),
        ...(input.Expected != null && { Expected: serializeAws_json1_0ExpectedAttributeMap(input.Expected, context) }),
        ...(input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(
            input.ExpressionAttributeNames,
            context
          ),
        }),
        ...(input.ExpressionAttributeValues != null && {
          ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(
            input.ExpressionAttributeValues,
            context
          ),
        }),
        ...(input.Key != null && { Key: serializeAws_json1_0Key(input.Key, context) }),
        ...(input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }),
        ...(input.ReturnItemCollectionMetrics != null && {
          ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics,
        }),
        ...(input.ReturnValues != null && { ReturnValues: input.ReturnValues }),
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0DeleteReplicaAction = (input, context) => {
      return {
        ...(input.RegionName != null && { RegionName: input.RegionName }),
      };
    };
    var serializeAws_json1_0DeleteReplicationGroupMemberAction = (input, context) => {
      return {
        ...(input.RegionName != null && { RegionName: input.RegionName }),
      };
    };
    var serializeAws_json1_0DeleteRequest = (input, context) => {
      return {
        ...(input.Key != null && { Key: serializeAws_json1_0Key(input.Key, context) }),
      };
    };
    var serializeAws_json1_0DeleteTableInput = (input, context) => {
      return {
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0DescribeBackupInput = (input, context) => {
      return {
        ...(input.BackupArn != null && { BackupArn: input.BackupArn }),
      };
    };
    var serializeAws_json1_0DescribeContinuousBackupsInput = (input, context) => {
      return {
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0DescribeContributorInsightsInput = (input, context) => {
      return {
        ...(input.IndexName != null && { IndexName: input.IndexName }),
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0DescribeEndpointsRequest = (input, context) => {
      return {};
    };
    var serializeAws_json1_0DescribeExportInput = (input, context) => {
      return {
        ...(input.ExportArn != null && { ExportArn: input.ExportArn }),
      };
    };
    var serializeAws_json1_0DescribeGlobalTableInput = (input, context) => {
      return {
        ...(input.GlobalTableName != null && { GlobalTableName: input.GlobalTableName }),
      };
    };
    var serializeAws_json1_0DescribeGlobalTableSettingsInput = (input, context) => {
      return {
        ...(input.GlobalTableName != null && { GlobalTableName: input.GlobalTableName }),
      };
    };
    var serializeAws_json1_0DescribeKinesisStreamingDestinationInput = (input, context) => {
      return {
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0DescribeLimitsInput = (input, context) => {
      return {};
    };
    var serializeAws_json1_0DescribeTableInput = (input, context) => {
      return {
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0DescribeTableReplicaAutoScalingInput = (input, context) => {
      return {
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0DescribeTimeToLiveInput = (input, context) => {
      return {
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0ExecuteStatementInput = (input, context) => {
      return {
        ...(input.ConsistentRead != null && { ConsistentRead: input.ConsistentRead }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.Parameters != null && {
          Parameters: serializeAws_json1_0PreparedStatementParameters(input.Parameters, context),
        }),
        ...(input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }),
        ...(input.Statement != null && { Statement: input.Statement }),
      };
    };
    var serializeAws_json1_0ExecuteTransactionInput = (input, context) => {
      var _a;
      return {
        ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
        ...(input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }),
        ...(input.TransactStatements != null && {
          TransactStatements: serializeAws_json1_0ParameterizedStatements(input.TransactStatements, context),
        }),
      };
    };
    var serializeAws_json1_0ExpectedAttributeMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0ExpectedAttributeValue(value, context),
        };
      }, {});
    };
    var serializeAws_json1_0ExpectedAttributeValue = (input, context) => {
      return {
        ...(input.AttributeValueList != null && {
          AttributeValueList: serializeAws_json1_0AttributeValueList(input.AttributeValueList, context),
        }),
        ...(input.ComparisonOperator != null && { ComparisonOperator: input.ComparisonOperator }),
        ...(input.Exists != null && { Exists: input.Exists }),
        ...(input.Value != null && { Value: serializeAws_json1_0AttributeValue(input.Value, context) }),
      };
    };
    var serializeAws_json1_0ExportTableToPointInTimeInput = (input, context) => {
      var _a;
      return {
        ClientToken: (_a = input.ClientToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
        ...(input.ExportFormat != null && { ExportFormat: input.ExportFormat }),
        ...(input.ExportTime != null && { ExportTime: Math.round(input.ExportTime.getTime() / 1e3) }),
        ...(input.S3Bucket != null && { S3Bucket: input.S3Bucket }),
        ...(input.S3BucketOwner != null && { S3BucketOwner: input.S3BucketOwner }),
        ...(input.S3Prefix != null && { S3Prefix: input.S3Prefix }),
        ...(input.S3SseAlgorithm != null && { S3SseAlgorithm: input.S3SseAlgorithm }),
        ...(input.S3SseKmsKeyId != null && { S3SseKmsKeyId: input.S3SseKmsKeyId }),
        ...(input.TableArn != null && { TableArn: input.TableArn }),
      };
    };
    var serializeAws_json1_0ExpressionAttributeNameMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: value,
        };
      }, {});
    };
    var serializeAws_json1_0ExpressionAttributeValueMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0AttributeValue(value, context),
        };
      }, {});
    };
    var serializeAws_json1_0FilterConditionMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0Condition(value, context),
        };
      }, {});
    };
    var serializeAws_json1_0Get = (input, context) => {
      return {
        ...(input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(
            input.ExpressionAttributeNames,
            context
          ),
        }),
        ...(input.Key != null && { Key: serializeAws_json1_0Key(input.Key, context) }),
        ...(input.ProjectionExpression != null && { ProjectionExpression: input.ProjectionExpression }),
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0GetItemInput = (input, context) => {
      return {
        ...(input.AttributesToGet != null && {
          AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context),
        }),
        ...(input.ConsistentRead != null && { ConsistentRead: input.ConsistentRead }),
        ...(input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(
            input.ExpressionAttributeNames,
            context
          ),
        }),
        ...(input.Key != null && { Key: serializeAws_json1_0Key(input.Key, context) }),
        ...(input.ProjectionExpression != null && { ProjectionExpression: input.ProjectionExpression }),
        ...(input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }),
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0GlobalSecondaryIndex = (input, context) => {
      return {
        ...(input.IndexName != null && { IndexName: input.IndexName }),
        ...(input.KeySchema != null && { KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context) }),
        ...(input.Projection != null && { Projection: serializeAws_json1_0Projection(input.Projection, context) }),
        ...(input.ProvisionedThroughput != null && {
          ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context),
        }),
      };
    };
    var serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdate = (input, context) => {
      return {
        ...(input.IndexName != null && { IndexName: input.IndexName }),
        ...(input.ProvisionedWriteCapacityAutoScalingUpdate != null && {
          ProvisionedWriteCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(
            input.ProvisionedWriteCapacityAutoScalingUpdate,
            context
          ),
        }),
      };
    };
    var serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdateList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdate(entry, context);
        });
    };
    var serializeAws_json1_0GlobalSecondaryIndexList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0GlobalSecondaryIndex(entry, context);
        });
    };
    var serializeAws_json1_0GlobalSecondaryIndexUpdate = (input, context) => {
      return {
        ...(input.Create != null && {
          Create: serializeAws_json1_0CreateGlobalSecondaryIndexAction(input.Create, context),
        }),
        ...(input.Delete != null && {
          Delete: serializeAws_json1_0DeleteGlobalSecondaryIndexAction(input.Delete, context),
        }),
        ...(input.Update != null && {
          Update: serializeAws_json1_0UpdateGlobalSecondaryIndexAction(input.Update, context),
        }),
      };
    };
    var serializeAws_json1_0GlobalSecondaryIndexUpdateList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0GlobalSecondaryIndexUpdate(entry, context);
        });
    };
    var serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdate = (input, context) => {
      return {
        ...(input.IndexName != null && { IndexName: input.IndexName }),
        ...(input.ProvisionedWriteCapacityAutoScalingSettingsUpdate != null && {
          ProvisionedWriteCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(
            input.ProvisionedWriteCapacityAutoScalingSettingsUpdate,
            context
          ),
        }),
        ...(input.ProvisionedWriteCapacityUnits != null && {
          ProvisionedWriteCapacityUnits: input.ProvisionedWriteCapacityUnits,
        }),
      };
    };
    var serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdateList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdate(entry, context);
        });
    };
    var serializeAws_json1_0Key = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0AttributeValue(value, context),
        };
      }, {});
    };
    var serializeAws_json1_0KeyConditions = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0Condition(value, context),
        };
      }, {});
    };
    var serializeAws_json1_0KeyList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0Key(entry, context);
        });
    };
    var serializeAws_json1_0KeysAndAttributes = (input, context) => {
      return {
        ...(input.AttributesToGet != null && {
          AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context),
        }),
        ...(input.ConsistentRead != null && { ConsistentRead: input.ConsistentRead }),
        ...(input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(
            input.ExpressionAttributeNames,
            context
          ),
        }),
        ...(input.Keys != null && { Keys: serializeAws_json1_0KeyList(input.Keys, context) }),
        ...(input.ProjectionExpression != null && { ProjectionExpression: input.ProjectionExpression }),
      };
    };
    var serializeAws_json1_0KeySchema = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0KeySchemaElement(entry, context);
        });
    };
    var serializeAws_json1_0KeySchemaElement = (input, context) => {
      return {
        ...(input.AttributeName != null && { AttributeName: input.AttributeName }),
        ...(input.KeyType != null && { KeyType: input.KeyType }),
      };
    };
    var serializeAws_json1_0KinesisStreamingDestinationInput = (input, context) => {
      return {
        ...(input.StreamArn != null && { StreamArn: input.StreamArn }),
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0ListAttributeValue = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0AttributeValue(entry, context);
        });
    };
    var serializeAws_json1_0ListBackupsInput = (input, context) => {
      return {
        ...(input.BackupType != null && { BackupType: input.BackupType }),
        ...(input.ExclusiveStartBackupArn != null && { ExclusiveStartBackupArn: input.ExclusiveStartBackupArn }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.TableName != null && { TableName: input.TableName }),
        ...(input.TimeRangeLowerBound != null && {
          TimeRangeLowerBound: Math.round(input.TimeRangeLowerBound.getTime() / 1e3),
        }),
        ...(input.TimeRangeUpperBound != null && {
          TimeRangeUpperBound: Math.round(input.TimeRangeUpperBound.getTime() / 1e3),
        }),
      };
    };
    var serializeAws_json1_0ListContributorInsightsInput = (input, context) => {
      return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0ListExportsInput = (input, context) => {
      return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.TableArn != null && { TableArn: input.TableArn }),
      };
    };
    var serializeAws_json1_0ListGlobalTablesInput = (input, context) => {
      return {
        ...(input.ExclusiveStartGlobalTableName != null && {
          ExclusiveStartGlobalTableName: input.ExclusiveStartGlobalTableName,
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.RegionName != null && { RegionName: input.RegionName }),
      };
    };
    var serializeAws_json1_0ListTablesInput = (input, context) => {
      return {
        ...(input.ExclusiveStartTableName != null && { ExclusiveStartTableName: input.ExclusiveStartTableName }),
        ...(input.Limit != null && { Limit: input.Limit }),
      };
    };
    var serializeAws_json1_0ListTagsOfResourceInput = (input, context) => {
      return {
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.ResourceArn != null && { ResourceArn: input.ResourceArn }),
      };
    };
    var serializeAws_json1_0LocalSecondaryIndex = (input, context) => {
      return {
        ...(input.IndexName != null && { IndexName: input.IndexName }),
        ...(input.KeySchema != null && { KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context) }),
        ...(input.Projection != null && { Projection: serializeAws_json1_0Projection(input.Projection, context) }),
      };
    };
    var serializeAws_json1_0LocalSecondaryIndexList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0LocalSecondaryIndex(entry, context);
        });
    };
    var serializeAws_json1_0MapAttributeValue = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0AttributeValue(value, context),
        };
      }, {});
    };
    var serializeAws_json1_0NonKeyAttributeNameList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return entry;
        });
    };
    var serializeAws_json1_0NumberSetAttributeValue = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return entry;
        });
    };
    var serializeAws_json1_0ParameterizedStatement = (input, context) => {
      return {
        ...(input.Parameters != null && {
          Parameters: serializeAws_json1_0PreparedStatementParameters(input.Parameters, context),
        }),
        ...(input.Statement != null && { Statement: input.Statement }),
      };
    };
    var serializeAws_json1_0ParameterizedStatements = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0ParameterizedStatement(entry, context);
        });
    };
    var serializeAws_json1_0PartiQLBatchRequest = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0BatchStatementRequest(entry, context);
        });
    };
    var serializeAws_json1_0PointInTimeRecoverySpecification = (input, context) => {
      return {
        ...(input.PointInTimeRecoveryEnabled != null && {
          PointInTimeRecoveryEnabled: input.PointInTimeRecoveryEnabled,
        }),
      };
    };
    var serializeAws_json1_0PreparedStatementParameters = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0AttributeValue(entry, context);
        });
    };
    var serializeAws_json1_0Projection = (input, context) => {
      return {
        ...(input.NonKeyAttributes != null && {
          NonKeyAttributes: serializeAws_json1_0NonKeyAttributeNameList(input.NonKeyAttributes, context),
        }),
        ...(input.ProjectionType != null && { ProjectionType: input.ProjectionType }),
      };
    };
    var serializeAws_json1_0ProvisionedThroughput = (input, context) => {
      return {
        ...(input.ReadCapacityUnits != null && { ReadCapacityUnits: input.ReadCapacityUnits }),
        ...(input.WriteCapacityUnits != null && { WriteCapacityUnits: input.WriteCapacityUnits }),
      };
    };
    var serializeAws_json1_0ProvisionedThroughputOverride = (input, context) => {
      return {
        ...(input.ReadCapacityUnits != null && { ReadCapacityUnits: input.ReadCapacityUnits }),
      };
    };
    var serializeAws_json1_0Put = (input, context) => {
      return {
        ...(input.ConditionExpression != null && { ConditionExpression: input.ConditionExpression }),
        ...(input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(
            input.ExpressionAttributeNames,
            context
          ),
        }),
        ...(input.ExpressionAttributeValues != null && {
          ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(
            input.ExpressionAttributeValues,
            context
          ),
        }),
        ...(input.Item != null && { Item: serializeAws_json1_0PutItemInputAttributeMap(input.Item, context) }),
        ...(input.ReturnValuesOnConditionCheckFailure != null && {
          ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure,
        }),
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0PutItemInput = (input, context) => {
      return {
        ...(input.ConditionExpression != null && { ConditionExpression: input.ConditionExpression }),
        ...(input.ConditionalOperator != null && { ConditionalOperator: input.ConditionalOperator }),
        ...(input.Expected != null && { Expected: serializeAws_json1_0ExpectedAttributeMap(input.Expected, context) }),
        ...(input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(
            input.ExpressionAttributeNames,
            context
          ),
        }),
        ...(input.ExpressionAttributeValues != null && {
          ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(
            input.ExpressionAttributeValues,
            context
          ),
        }),
        ...(input.Item != null && { Item: serializeAws_json1_0PutItemInputAttributeMap(input.Item, context) }),
        ...(input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }),
        ...(input.ReturnItemCollectionMetrics != null && {
          ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics,
        }),
        ...(input.ReturnValues != null && { ReturnValues: input.ReturnValues }),
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0PutItemInputAttributeMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0AttributeValue(value, context),
        };
      }, {});
    };
    var serializeAws_json1_0PutRequest = (input, context) => {
      return {
        ...(input.Item != null && { Item: serializeAws_json1_0PutItemInputAttributeMap(input.Item, context) }),
      };
    };
    var serializeAws_json1_0QueryInput = (input, context) => {
      return {
        ...(input.AttributesToGet != null && {
          AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context),
        }),
        ...(input.ConditionalOperator != null && { ConditionalOperator: input.ConditionalOperator }),
        ...(input.ConsistentRead != null && { ConsistentRead: input.ConsistentRead }),
        ...(input.ExclusiveStartKey != null && {
          ExclusiveStartKey: serializeAws_json1_0Key(input.ExclusiveStartKey, context),
        }),
        ...(input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(
            input.ExpressionAttributeNames,
            context
          ),
        }),
        ...(input.ExpressionAttributeValues != null && {
          ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(
            input.ExpressionAttributeValues,
            context
          ),
        }),
        ...(input.FilterExpression != null && { FilterExpression: input.FilterExpression }),
        ...(input.IndexName != null && { IndexName: input.IndexName }),
        ...(input.KeyConditionExpression != null && { KeyConditionExpression: input.KeyConditionExpression }),
        ...(input.KeyConditions != null && {
          KeyConditions: serializeAws_json1_0KeyConditions(input.KeyConditions, context),
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.ProjectionExpression != null && { ProjectionExpression: input.ProjectionExpression }),
        ...(input.QueryFilter != null && {
          QueryFilter: serializeAws_json1_0FilterConditionMap(input.QueryFilter, context),
        }),
        ...(input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }),
        ...(input.ScanIndexForward != null && { ScanIndexForward: input.ScanIndexForward }),
        ...(input.Select != null && { Select: input.Select }),
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0Replica = (input, context) => {
      return {
        ...(input.RegionName != null && { RegionName: input.RegionName }),
      };
    };
    var serializeAws_json1_0ReplicaAutoScalingUpdate = (input, context) => {
      return {
        ...(input.RegionName != null && { RegionName: input.RegionName }),
        ...(input.ReplicaGlobalSecondaryIndexUpdates != null && {
          ReplicaGlobalSecondaryIndexUpdates: serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdateList(
            input.ReplicaGlobalSecondaryIndexUpdates,
            context
          ),
        }),
        ...(input.ReplicaProvisionedReadCapacityAutoScalingUpdate != null && {
          ReplicaProvisionedReadCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(
            input.ReplicaProvisionedReadCapacityAutoScalingUpdate,
            context
          ),
        }),
      };
    };
    var serializeAws_json1_0ReplicaAutoScalingUpdateList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0ReplicaAutoScalingUpdate(entry, context);
        });
    };
    var serializeAws_json1_0ReplicaGlobalSecondaryIndex = (input, context) => {
      return {
        ...(input.IndexName != null && { IndexName: input.IndexName }),
        ...(input.ProvisionedThroughputOverride != null && {
          ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughputOverride(
            input.ProvisionedThroughputOverride,
            context
          ),
        }),
      };
    };
    var serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdate = (input, context) => {
      return {
        ...(input.IndexName != null && { IndexName: input.IndexName }),
        ...(input.ProvisionedReadCapacityAutoScalingUpdate != null && {
          ProvisionedReadCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(
            input.ProvisionedReadCapacityAutoScalingUpdate,
            context
          ),
        }),
      };
    };
    var serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdateList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdate(entry, context);
        });
    };
    var serializeAws_json1_0ReplicaGlobalSecondaryIndexList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0ReplicaGlobalSecondaryIndex(entry, context);
        });
    };
    var serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdate = (input, context) => {
      return {
        ...(input.IndexName != null && { IndexName: input.IndexName }),
        ...(input.ProvisionedReadCapacityAutoScalingSettingsUpdate != null && {
          ProvisionedReadCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(
            input.ProvisionedReadCapacityAutoScalingSettingsUpdate,
            context
          ),
        }),
        ...(input.ProvisionedReadCapacityUnits != null && {
          ProvisionedReadCapacityUnits: input.ProvisionedReadCapacityUnits,
        }),
      };
    };
    var serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdateList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdate(entry, context);
        });
    };
    var serializeAws_json1_0ReplicaList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0Replica(entry, context);
        });
    };
    var serializeAws_json1_0ReplicaSettingsUpdate = (input, context) => {
      return {
        ...(input.RegionName != null && { RegionName: input.RegionName }),
        ...(input.ReplicaGlobalSecondaryIndexSettingsUpdate != null && {
          ReplicaGlobalSecondaryIndexSettingsUpdate: serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdateList(
            input.ReplicaGlobalSecondaryIndexSettingsUpdate,
            context
          ),
        }),
        ...(input.ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate != null && {
          ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(
            input.ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate,
            context
          ),
        }),
        ...(input.ReplicaProvisionedReadCapacityUnits != null && {
          ReplicaProvisionedReadCapacityUnits: input.ReplicaProvisionedReadCapacityUnits,
        }),
        ...(input.ReplicaTableClass != null && { ReplicaTableClass: input.ReplicaTableClass }),
      };
    };
    var serializeAws_json1_0ReplicaSettingsUpdateList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0ReplicaSettingsUpdate(entry, context);
        });
    };
    var serializeAws_json1_0ReplicationGroupUpdate = (input, context) => {
      return {
        ...(input.Create != null && {
          Create: serializeAws_json1_0CreateReplicationGroupMemberAction(input.Create, context),
        }),
        ...(input.Delete != null && {
          Delete: serializeAws_json1_0DeleteReplicationGroupMemberAction(input.Delete, context),
        }),
        ...(input.Update != null && {
          Update: serializeAws_json1_0UpdateReplicationGroupMemberAction(input.Update, context),
        }),
      };
    };
    var serializeAws_json1_0ReplicationGroupUpdateList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0ReplicationGroupUpdate(entry, context);
        });
    };
    var serializeAws_json1_0ReplicaUpdate = (input, context) => {
      return {
        ...(input.Create != null && { Create: serializeAws_json1_0CreateReplicaAction(input.Create, context) }),
        ...(input.Delete != null && { Delete: serializeAws_json1_0DeleteReplicaAction(input.Delete, context) }),
      };
    };
    var serializeAws_json1_0ReplicaUpdateList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0ReplicaUpdate(entry, context);
        });
    };
    var serializeAws_json1_0RestoreTableFromBackupInput = (input, context) => {
      return {
        ...(input.BackupArn != null && { BackupArn: input.BackupArn }),
        ...(input.BillingModeOverride != null && { BillingModeOverride: input.BillingModeOverride }),
        ...(input.GlobalSecondaryIndexOverride != null && {
          GlobalSecondaryIndexOverride: serializeAws_json1_0GlobalSecondaryIndexList(
            input.GlobalSecondaryIndexOverride,
            context
          ),
        }),
        ...(input.LocalSecondaryIndexOverride != null && {
          LocalSecondaryIndexOverride: serializeAws_json1_0LocalSecondaryIndexList(
            input.LocalSecondaryIndexOverride,
            context
          ),
        }),
        ...(input.ProvisionedThroughputOverride != null && {
          ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughput(
            input.ProvisionedThroughputOverride,
            context
          ),
        }),
        ...(input.SSESpecificationOverride != null && {
          SSESpecificationOverride: serializeAws_json1_0SSESpecification(input.SSESpecificationOverride, context),
        }),
        ...(input.TargetTableName != null && { TargetTableName: input.TargetTableName }),
      };
    };
    var serializeAws_json1_0RestoreTableToPointInTimeInput = (input, context) => {
      return {
        ...(input.BillingModeOverride != null && { BillingModeOverride: input.BillingModeOverride }),
        ...(input.GlobalSecondaryIndexOverride != null && {
          GlobalSecondaryIndexOverride: serializeAws_json1_0GlobalSecondaryIndexList(
            input.GlobalSecondaryIndexOverride,
            context
          ),
        }),
        ...(input.LocalSecondaryIndexOverride != null && {
          LocalSecondaryIndexOverride: serializeAws_json1_0LocalSecondaryIndexList(
            input.LocalSecondaryIndexOverride,
            context
          ),
        }),
        ...(input.ProvisionedThroughputOverride != null && {
          ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughput(
            input.ProvisionedThroughputOverride,
            context
          ),
        }),
        ...(input.RestoreDateTime != null && { RestoreDateTime: Math.round(input.RestoreDateTime.getTime() / 1e3) }),
        ...(input.SSESpecificationOverride != null && {
          SSESpecificationOverride: serializeAws_json1_0SSESpecification(input.SSESpecificationOverride, context),
        }),
        ...(input.SourceTableArn != null && { SourceTableArn: input.SourceTableArn }),
        ...(input.SourceTableName != null && { SourceTableName: input.SourceTableName }),
        ...(input.TargetTableName != null && { TargetTableName: input.TargetTableName }),
        ...(input.UseLatestRestorableTime != null && { UseLatestRestorableTime: input.UseLatestRestorableTime }),
      };
    };
    var serializeAws_json1_0ScanInput = (input, context) => {
      return {
        ...(input.AttributesToGet != null && {
          AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context),
        }),
        ...(input.ConditionalOperator != null && { ConditionalOperator: input.ConditionalOperator }),
        ...(input.ConsistentRead != null && { ConsistentRead: input.ConsistentRead }),
        ...(input.ExclusiveStartKey != null && {
          ExclusiveStartKey: serializeAws_json1_0Key(input.ExclusiveStartKey, context),
        }),
        ...(input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(
            input.ExpressionAttributeNames,
            context
          ),
        }),
        ...(input.ExpressionAttributeValues != null && {
          ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(
            input.ExpressionAttributeValues,
            context
          ),
        }),
        ...(input.FilterExpression != null && { FilterExpression: input.FilterExpression }),
        ...(input.IndexName != null && { IndexName: input.IndexName }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.ProjectionExpression != null && { ProjectionExpression: input.ProjectionExpression }),
        ...(input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }),
        ...(input.ScanFilter != null && {
          ScanFilter: serializeAws_json1_0FilterConditionMap(input.ScanFilter, context),
        }),
        ...(input.Segment != null && { Segment: input.Segment }),
        ...(input.Select != null && { Select: input.Select }),
        ...(input.TableName != null && { TableName: input.TableName }),
        ...(input.TotalSegments != null && { TotalSegments: input.TotalSegments }),
      };
    };
    var serializeAws_json1_0SSESpecification = (input, context) => {
      return {
        ...(input.Enabled != null && { Enabled: input.Enabled }),
        ...(input.KMSMasterKeyId != null && { KMSMasterKeyId: input.KMSMasterKeyId }),
        ...(input.SSEType != null && { SSEType: input.SSEType }),
      };
    };
    var serializeAws_json1_0StreamSpecification = (input, context) => {
      return {
        ...(input.StreamEnabled != null && { StreamEnabled: input.StreamEnabled }),
        ...(input.StreamViewType != null && { StreamViewType: input.StreamViewType }),
      };
    };
    var serializeAws_json1_0StringSetAttributeValue = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return entry;
        });
    };
    var serializeAws_json1_0Tag = (input, context) => {
      return {
        ...(input.Key != null && { Key: input.Key }),
        ...(input.Value != null && { Value: input.Value }),
      };
    };
    var serializeAws_json1_0TagKeyList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return entry;
        });
    };
    var serializeAws_json1_0TagList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0Tag(entry, context);
        });
    };
    var serializeAws_json1_0TagResourceInput = (input, context) => {
      return {
        ...(input.ResourceArn != null && { ResourceArn: input.ResourceArn }),
        ...(input.Tags != null && { Tags: serializeAws_json1_0TagList(input.Tags, context) }),
      };
    };
    var serializeAws_json1_0TimeToLiveSpecification = (input, context) => {
      return {
        ...(input.AttributeName != null && { AttributeName: input.AttributeName }),
        ...(input.Enabled != null && { Enabled: input.Enabled }),
      };
    };
    var serializeAws_json1_0TransactGetItem = (input, context) => {
      return {
        ...(input.Get != null && { Get: serializeAws_json1_0Get(input.Get, context) }),
      };
    };
    var serializeAws_json1_0TransactGetItemList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0TransactGetItem(entry, context);
        });
    };
    var serializeAws_json1_0TransactGetItemsInput = (input, context) => {
      return {
        ...(input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }),
        ...(input.TransactItems != null && {
          TransactItems: serializeAws_json1_0TransactGetItemList(input.TransactItems, context),
        }),
      };
    };
    var serializeAws_json1_0TransactWriteItem = (input, context) => {
      return {
        ...(input.ConditionCheck != null && {
          ConditionCheck: serializeAws_json1_0ConditionCheck(input.ConditionCheck, context),
        }),
        ...(input.Delete != null && { Delete: serializeAws_json1_0Delete(input.Delete, context) }),
        ...(input.Put != null && { Put: serializeAws_json1_0Put(input.Put, context) }),
        ...(input.Update != null && { Update: serializeAws_json1_0Update(input.Update, context) }),
      };
    };
    var serializeAws_json1_0TransactWriteItemList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0TransactWriteItem(entry, context);
        });
    };
    var serializeAws_json1_0TransactWriteItemsInput = (input, context) => {
      var _a;
      return {
        ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
        ...(input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }),
        ...(input.ReturnItemCollectionMetrics != null && {
          ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics,
        }),
        ...(input.TransactItems != null && {
          TransactItems: serializeAws_json1_0TransactWriteItemList(input.TransactItems, context),
        }),
      };
    };
    var serializeAws_json1_0UntagResourceInput = (input, context) => {
      return {
        ...(input.ResourceArn != null && { ResourceArn: input.ResourceArn }),
        ...(input.TagKeys != null && { TagKeys: serializeAws_json1_0TagKeyList(input.TagKeys, context) }),
      };
    };
    var serializeAws_json1_0Update = (input, context) => {
      return {
        ...(input.ConditionExpression != null && { ConditionExpression: input.ConditionExpression }),
        ...(input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(
            input.ExpressionAttributeNames,
            context
          ),
        }),
        ...(input.ExpressionAttributeValues != null && {
          ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(
            input.ExpressionAttributeValues,
            context
          ),
        }),
        ...(input.Key != null && { Key: serializeAws_json1_0Key(input.Key, context) }),
        ...(input.ReturnValuesOnConditionCheckFailure != null && {
          ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure,
        }),
        ...(input.TableName != null && { TableName: input.TableName }),
        ...(input.UpdateExpression != null && { UpdateExpression: input.UpdateExpression }),
      };
    };
    var serializeAws_json1_0UpdateContinuousBackupsInput = (input, context) => {
      return {
        ...(input.PointInTimeRecoverySpecification != null && {
          PointInTimeRecoverySpecification: serializeAws_json1_0PointInTimeRecoverySpecification(
            input.PointInTimeRecoverySpecification,
            context
          ),
        }),
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0UpdateContributorInsightsInput = (input, context) => {
      return {
        ...(input.ContributorInsightsAction != null && { ContributorInsightsAction: input.ContributorInsightsAction }),
        ...(input.IndexName != null && { IndexName: input.IndexName }),
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0UpdateGlobalSecondaryIndexAction = (input, context) => {
      return {
        ...(input.IndexName != null && { IndexName: input.IndexName }),
        ...(input.ProvisionedThroughput != null && {
          ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context),
        }),
      };
    };
    var serializeAws_json1_0UpdateGlobalTableInput = (input, context) => {
      return {
        ...(input.GlobalTableName != null && { GlobalTableName: input.GlobalTableName }),
        ...(input.ReplicaUpdates != null && {
          ReplicaUpdates: serializeAws_json1_0ReplicaUpdateList(input.ReplicaUpdates, context),
        }),
      };
    };
    var serializeAws_json1_0UpdateGlobalTableSettingsInput = (input, context) => {
      return {
        ...(input.GlobalTableBillingMode != null && { GlobalTableBillingMode: input.GlobalTableBillingMode }),
        ...(input.GlobalTableGlobalSecondaryIndexSettingsUpdate != null && {
          GlobalTableGlobalSecondaryIndexSettingsUpdate:
            serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdateList(
              input.GlobalTableGlobalSecondaryIndexSettingsUpdate,
              context
            ),
        }),
        ...(input.GlobalTableName != null && { GlobalTableName: input.GlobalTableName }),
        ...(input.GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate != null && {
          GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(
            input.GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate,
            context
          ),
        }),
        ...(input.GlobalTableProvisionedWriteCapacityUnits != null && {
          GlobalTableProvisionedWriteCapacityUnits: input.GlobalTableProvisionedWriteCapacityUnits,
        }),
        ...(input.ReplicaSettingsUpdate != null && {
          ReplicaSettingsUpdate: serializeAws_json1_0ReplicaSettingsUpdateList(input.ReplicaSettingsUpdate, context),
        }),
      };
    };
    var serializeAws_json1_0UpdateItemInput = (input, context) => {
      return {
        ...(input.AttributeUpdates != null && {
          AttributeUpdates: serializeAws_json1_0AttributeUpdates(input.AttributeUpdates, context),
        }),
        ...(input.ConditionExpression != null && { ConditionExpression: input.ConditionExpression }),
        ...(input.ConditionalOperator != null && { ConditionalOperator: input.ConditionalOperator }),
        ...(input.Expected != null && { Expected: serializeAws_json1_0ExpectedAttributeMap(input.Expected, context) }),
        ...(input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(
            input.ExpressionAttributeNames,
            context
          ),
        }),
        ...(input.ExpressionAttributeValues != null && {
          ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(
            input.ExpressionAttributeValues,
            context
          ),
        }),
        ...(input.Key != null && { Key: serializeAws_json1_0Key(input.Key, context) }),
        ...(input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }),
        ...(input.ReturnItemCollectionMetrics != null && {
          ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics,
        }),
        ...(input.ReturnValues != null && { ReturnValues: input.ReturnValues }),
        ...(input.TableName != null && { TableName: input.TableName }),
        ...(input.UpdateExpression != null && { UpdateExpression: input.UpdateExpression }),
      };
    };
    var serializeAws_json1_0UpdateReplicationGroupMemberAction = (input, context) => {
      return {
        ...(input.GlobalSecondaryIndexes != null && {
          GlobalSecondaryIndexes: serializeAws_json1_0ReplicaGlobalSecondaryIndexList(
            input.GlobalSecondaryIndexes,
            context
          ),
        }),
        ...(input.KMSMasterKeyId != null && { KMSMasterKeyId: input.KMSMasterKeyId }),
        ...(input.ProvisionedThroughputOverride != null && {
          ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughputOverride(
            input.ProvisionedThroughputOverride,
            context
          ),
        }),
        ...(input.RegionName != null && { RegionName: input.RegionName }),
        ...(input.TableClassOverride != null && { TableClassOverride: input.TableClassOverride }),
      };
    };
    var serializeAws_json1_0UpdateTableInput = (input, context) => {
      return {
        ...(input.AttributeDefinitions != null && {
          AttributeDefinitions: serializeAws_json1_0AttributeDefinitions(input.AttributeDefinitions, context),
        }),
        ...(input.BillingMode != null && { BillingMode: input.BillingMode }),
        ...(input.GlobalSecondaryIndexUpdates != null && {
          GlobalSecondaryIndexUpdates: serializeAws_json1_0GlobalSecondaryIndexUpdateList(
            input.GlobalSecondaryIndexUpdates,
            context
          ),
        }),
        ...(input.ProvisionedThroughput != null && {
          ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context),
        }),
        ...(input.ReplicaUpdates != null && {
          ReplicaUpdates: serializeAws_json1_0ReplicationGroupUpdateList(input.ReplicaUpdates, context),
        }),
        ...(input.SSESpecification != null && {
          SSESpecification: serializeAws_json1_0SSESpecification(input.SSESpecification, context),
        }),
        ...(input.StreamSpecification != null && {
          StreamSpecification: serializeAws_json1_0StreamSpecification(input.StreamSpecification, context),
        }),
        ...(input.TableClass != null && { TableClass: input.TableClass }),
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0UpdateTableReplicaAutoScalingInput = (input, context) => {
      return {
        ...(input.GlobalSecondaryIndexUpdates != null && {
          GlobalSecondaryIndexUpdates: serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdateList(
            input.GlobalSecondaryIndexUpdates,
            context
          ),
        }),
        ...(input.ProvisionedWriteCapacityAutoScalingUpdate != null && {
          ProvisionedWriteCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(
            input.ProvisionedWriteCapacityAutoScalingUpdate,
            context
          ),
        }),
        ...(input.ReplicaUpdates != null && {
          ReplicaUpdates: serializeAws_json1_0ReplicaAutoScalingUpdateList(input.ReplicaUpdates, context),
        }),
        ...(input.TableName != null && { TableName: input.TableName }),
      };
    };
    var serializeAws_json1_0UpdateTimeToLiveInput = (input, context) => {
      return {
        ...(input.TableName != null && { TableName: input.TableName }),
        ...(input.TimeToLiveSpecification != null && {
          TimeToLiveSpecification: serializeAws_json1_0TimeToLiveSpecification(input.TimeToLiveSpecification, context),
        }),
      };
    };
    var serializeAws_json1_0WriteRequest = (input, context) => {
      return {
        ...(input.DeleteRequest != null && {
          DeleteRequest: serializeAws_json1_0DeleteRequest(input.DeleteRequest, context),
        }),
        ...(input.PutRequest != null && { PutRequest: serializeAws_json1_0PutRequest(input.PutRequest, context) }),
      };
    };
    var serializeAws_json1_0WriteRequests = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return serializeAws_json1_0WriteRequest(entry, context);
        });
    };
    var deserializeAws_json1_0ArchivalSummary = (output, context) => {
      return {
        ArchivalBackupArn: (0, smithy_client_1.expectString)(output.ArchivalBackupArn),
        ArchivalDateTime:
          output.ArchivalDateTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ArchivalDateTime))
              )
            : void 0,
        ArchivalReason: (0, smithy_client_1.expectString)(output.ArchivalReason),
      };
    };
    var deserializeAws_json1_0AttributeDefinition = (output, context) => {
      return {
        AttributeName: (0, smithy_client_1.expectString)(output.AttributeName),
        AttributeType: (0, smithy_client_1.expectString)(output.AttributeType),
      };
    };
    var deserializeAws_json1_0AttributeDefinitions = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0AttributeDefinition(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0AttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0AttributeValue((0, smithy_client_1.expectUnion)(value), context),
        };
      }, {});
    };
    var deserializeAws_json1_0AttributeNameList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return (0, smithy_client_1.expectString)(entry);
        });
      return retVal;
    };
    var deserializeAws_json1_0AttributeValue = (output, context) => {
      if (output.B !== void 0 && output.B !== null) {
        return {
          B: context.base64Decoder(output.B),
        };
      }
      if ((0, smithy_client_1.expectBoolean)(output.BOOL) !== void 0) {
        return { BOOL: (0, smithy_client_1.expectBoolean)(output.BOOL) };
      }
      if (output.BS !== void 0 && output.BS !== null) {
        return {
          BS: deserializeAws_json1_0BinarySetAttributeValue(output.BS, context),
        };
      }
      if (output.L !== void 0 && output.L !== null) {
        return {
          L: deserializeAws_json1_0ListAttributeValue(output.L, context),
        };
      }
      if (output.M !== void 0 && output.M !== null) {
        return {
          M: deserializeAws_json1_0MapAttributeValue(output.M, context),
        };
      }
      if ((0, smithy_client_1.expectString)(output.N) !== void 0) {
        return { N: (0, smithy_client_1.expectString)(output.N) };
      }
      if (output.NS !== void 0 && output.NS !== null) {
        return {
          NS: deserializeAws_json1_0NumberSetAttributeValue(output.NS, context),
        };
      }
      if ((0, smithy_client_1.expectBoolean)(output.NULL) !== void 0) {
        return { NULL: (0, smithy_client_1.expectBoolean)(output.NULL) };
      }
      if ((0, smithy_client_1.expectString)(output.S) !== void 0) {
        return { S: (0, smithy_client_1.expectString)(output.S) };
      }
      if (output.SS !== void 0 && output.SS !== null) {
        return {
          SS: deserializeAws_json1_0StringSetAttributeValue(output.SS, context),
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    var deserializeAws_json1_0AutoScalingPolicyDescription = (output, context) => {
      return {
        PolicyName: (0, smithy_client_1.expectString)(output.PolicyName),
        TargetTrackingScalingPolicyConfiguration:
          output.TargetTrackingScalingPolicyConfiguration != null
            ? deserializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationDescription(
                output.TargetTrackingScalingPolicyConfiguration,
                context
              )
            : void 0,
      };
    };
    var deserializeAws_json1_0AutoScalingPolicyDescriptionList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0AutoScalingPolicyDescription(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0AutoScalingSettingsDescription = (output, context) => {
      return {
        AutoScalingDisabled: (0, smithy_client_1.expectBoolean)(output.AutoScalingDisabled),
        AutoScalingRoleArn: (0, smithy_client_1.expectString)(output.AutoScalingRoleArn),
        MaximumUnits: (0, smithy_client_1.expectLong)(output.MaximumUnits),
        MinimumUnits: (0, smithy_client_1.expectLong)(output.MinimumUnits),
        ScalingPolicies:
          output.ScalingPolicies != null
            ? deserializeAws_json1_0AutoScalingPolicyDescriptionList(output.ScalingPolicies, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationDescription = (output, context) => {
      return {
        DisableScaleIn: (0, smithy_client_1.expectBoolean)(output.DisableScaleIn),
        ScaleInCooldown: (0, smithy_client_1.expectInt32)(output.ScaleInCooldown),
        ScaleOutCooldown: (0, smithy_client_1.expectInt32)(output.ScaleOutCooldown),
        TargetValue: (0, smithy_client_1.limitedParseDouble)(output.TargetValue),
      };
    };
    var deserializeAws_json1_0BackupDescription = (output, context) => {
      return {
        BackupDetails:
          output.BackupDetails != null ? deserializeAws_json1_0BackupDetails(output.BackupDetails, context) : void 0,
        SourceTableDetails:
          output.SourceTableDetails != null
            ? deserializeAws_json1_0SourceTableDetails(output.SourceTableDetails, context)
            : void 0,
        SourceTableFeatureDetails:
          output.SourceTableFeatureDetails != null
            ? deserializeAws_json1_0SourceTableFeatureDetails(output.SourceTableFeatureDetails, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0BackupDetails = (output, context) => {
      return {
        BackupArn: (0, smithy_client_1.expectString)(output.BackupArn),
        BackupCreationDateTime:
          output.BackupCreationDateTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)(
                  (0, smithy_client_1.expectNumber)(output.BackupCreationDateTime)
                )
              )
            : void 0,
        BackupExpiryDateTime:
          output.BackupExpiryDateTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.BackupExpiryDateTime))
              )
            : void 0,
        BackupName: (0, smithy_client_1.expectString)(output.BackupName),
        BackupSizeBytes: (0, smithy_client_1.expectLong)(output.BackupSizeBytes),
        BackupStatus: (0, smithy_client_1.expectString)(output.BackupStatus),
        BackupType: (0, smithy_client_1.expectString)(output.BackupType),
      };
    };
    var deserializeAws_json1_0BackupInUseException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0BackupNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0BackupSummaries = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0BackupSummary(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0BackupSummary = (output, context) => {
      return {
        BackupArn: (0, smithy_client_1.expectString)(output.BackupArn),
        BackupCreationDateTime:
          output.BackupCreationDateTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)(
                  (0, smithy_client_1.expectNumber)(output.BackupCreationDateTime)
                )
              )
            : void 0,
        BackupExpiryDateTime:
          output.BackupExpiryDateTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.BackupExpiryDateTime))
              )
            : void 0,
        BackupName: (0, smithy_client_1.expectString)(output.BackupName),
        BackupSizeBytes: (0, smithy_client_1.expectLong)(output.BackupSizeBytes),
        BackupStatus: (0, smithy_client_1.expectString)(output.BackupStatus),
        BackupType: (0, smithy_client_1.expectString)(output.BackupType),
        TableArn: (0, smithy_client_1.expectString)(output.TableArn),
        TableId: (0, smithy_client_1.expectString)(output.TableId),
        TableName: (0, smithy_client_1.expectString)(output.TableName),
      };
    };
    var deserializeAws_json1_0BatchExecuteStatementOutput = (output, context) => {
      return {
        ConsumedCapacity:
          output.ConsumedCapacity != null
            ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context)
            : void 0,
        Responses:
          output.Responses != null ? deserializeAws_json1_0PartiQLBatchResponse(output.Responses, context) : void 0,
      };
    };
    var deserializeAws_json1_0BatchGetItemOutput = (output, context) => {
      return {
        ConsumedCapacity:
          output.ConsumedCapacity != null
            ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context)
            : void 0,
        Responses:
          output.Responses != null ? deserializeAws_json1_0BatchGetResponseMap(output.Responses, context) : void 0,
        UnprocessedKeys:
          output.UnprocessedKeys != null
            ? deserializeAws_json1_0BatchGetRequestMap(output.UnprocessedKeys, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0BatchGetRequestMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0KeysAndAttributes(value, context),
        };
      }, {});
    };
    var deserializeAws_json1_0BatchGetResponseMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0ItemList(value, context),
        };
      }, {});
    };
    var deserializeAws_json1_0BatchStatementError = (output, context) => {
      return {
        Code: (0, smithy_client_1.expectString)(output.Code),
        Message: (0, smithy_client_1.expectString)(output.Message),
      };
    };
    var deserializeAws_json1_0BatchStatementResponse = (output, context) => {
      return {
        Error: output.Error != null ? deserializeAws_json1_0BatchStatementError(output.Error, context) : void 0,
        Item: output.Item != null ? deserializeAws_json1_0AttributeMap(output.Item, context) : void 0,
        TableName: (0, smithy_client_1.expectString)(output.TableName),
      };
    };
    var deserializeAws_json1_0BatchWriteItemOutput = (output, context) => {
      return {
        ConsumedCapacity:
          output.ConsumedCapacity != null
            ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context)
            : void 0,
        ItemCollectionMetrics:
          output.ItemCollectionMetrics != null
            ? deserializeAws_json1_0ItemCollectionMetricsPerTable(output.ItemCollectionMetrics, context)
            : void 0,
        UnprocessedItems:
          output.UnprocessedItems != null
            ? deserializeAws_json1_0BatchWriteItemRequestMap(output.UnprocessedItems, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0BatchWriteItemRequestMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0WriteRequests(value, context),
        };
      }, {});
    };
    var deserializeAws_json1_0BillingModeSummary = (output, context) => {
      return {
        BillingMode: (0, smithy_client_1.expectString)(output.BillingMode),
        LastUpdateToPayPerRequestDateTime:
          output.LastUpdateToPayPerRequestDateTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)(
                  (0, smithy_client_1.expectNumber)(output.LastUpdateToPayPerRequestDateTime)
                )
              )
            : void 0,
      };
    };
    var deserializeAws_json1_0BinarySetAttributeValue = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return context.base64Decoder(entry);
        });
      return retVal;
    };
    var deserializeAws_json1_0CancellationReason = (output, context) => {
      return {
        Code: (0, smithy_client_1.expectString)(output.Code),
        Item: output.Item != null ? deserializeAws_json1_0AttributeMap(output.Item, context) : void 0,
        Message: (0, smithy_client_1.expectString)(output.Message),
      };
    };
    var deserializeAws_json1_0CancellationReasonList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0CancellationReason(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0Capacity = (output, context) => {
      return {
        CapacityUnits: (0, smithy_client_1.limitedParseDouble)(output.CapacityUnits),
        ReadCapacityUnits: (0, smithy_client_1.limitedParseDouble)(output.ReadCapacityUnits),
        WriteCapacityUnits: (0, smithy_client_1.limitedParseDouble)(output.WriteCapacityUnits),
      };
    };
    var deserializeAws_json1_0ConditionalCheckFailedException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0ConsumedCapacity = (output, context) => {
      return {
        CapacityUnits: (0, smithy_client_1.limitedParseDouble)(output.CapacityUnits),
        GlobalSecondaryIndexes:
          output.GlobalSecondaryIndexes != null
            ? deserializeAws_json1_0SecondaryIndexesCapacityMap(output.GlobalSecondaryIndexes, context)
            : void 0,
        LocalSecondaryIndexes:
          output.LocalSecondaryIndexes != null
            ? deserializeAws_json1_0SecondaryIndexesCapacityMap(output.LocalSecondaryIndexes, context)
            : void 0,
        ReadCapacityUnits: (0, smithy_client_1.limitedParseDouble)(output.ReadCapacityUnits),
        Table: output.Table != null ? deserializeAws_json1_0Capacity(output.Table, context) : void 0,
        TableName: (0, smithy_client_1.expectString)(output.TableName),
        WriteCapacityUnits: (0, smithy_client_1.limitedParseDouble)(output.WriteCapacityUnits),
      };
    };
    var deserializeAws_json1_0ConsumedCapacityMultiple = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0ConsumedCapacity(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0ContinuousBackupsDescription = (output, context) => {
      return {
        ContinuousBackupsStatus: (0, smithy_client_1.expectString)(output.ContinuousBackupsStatus),
        PointInTimeRecoveryDescription:
          output.PointInTimeRecoveryDescription != null
            ? deserializeAws_json1_0PointInTimeRecoveryDescription(output.PointInTimeRecoveryDescription, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0ContinuousBackupsUnavailableException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0ContributorInsightsRuleList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return (0, smithy_client_1.expectString)(entry);
        });
      return retVal;
    };
    var deserializeAws_json1_0ContributorInsightsSummaries = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0ContributorInsightsSummary(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0ContributorInsightsSummary = (output, context) => {
      return {
        ContributorInsightsStatus: (0, smithy_client_1.expectString)(output.ContributorInsightsStatus),
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        TableName: (0, smithy_client_1.expectString)(output.TableName),
      };
    };
    var deserializeAws_json1_0CreateBackupOutput = (output, context) => {
      return {
        BackupDetails:
          output.BackupDetails != null ? deserializeAws_json1_0BackupDetails(output.BackupDetails, context) : void 0,
      };
    };
    var deserializeAws_json1_0CreateGlobalTableOutput = (output, context) => {
      return {
        GlobalTableDescription:
          output.GlobalTableDescription != null
            ? deserializeAws_json1_0GlobalTableDescription(output.GlobalTableDescription, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0CreateTableOutput = (output, context) => {
      return {
        TableDescription:
          output.TableDescription != null
            ? deserializeAws_json1_0TableDescription(output.TableDescription, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0DeleteBackupOutput = (output, context) => {
      return {
        BackupDescription:
          output.BackupDescription != null
            ? deserializeAws_json1_0BackupDescription(output.BackupDescription, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0DeleteItemOutput = (output, context) => {
      return {
        Attributes: output.Attributes != null ? deserializeAws_json1_0AttributeMap(output.Attributes, context) : void 0,
        ConsumedCapacity:
          output.ConsumedCapacity != null
            ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context)
            : void 0,
        ItemCollectionMetrics:
          output.ItemCollectionMetrics != null
            ? deserializeAws_json1_0ItemCollectionMetrics(output.ItemCollectionMetrics, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0DeleteRequest = (output, context) => {
      return {
        Key: output.Key != null ? deserializeAws_json1_0Key(output.Key, context) : void 0,
      };
    };
    var deserializeAws_json1_0DeleteTableOutput = (output, context) => {
      return {
        TableDescription:
          output.TableDescription != null
            ? deserializeAws_json1_0TableDescription(output.TableDescription, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0DescribeBackupOutput = (output, context) => {
      return {
        BackupDescription:
          output.BackupDescription != null
            ? deserializeAws_json1_0BackupDescription(output.BackupDescription, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0DescribeContinuousBackupsOutput = (output, context) => {
      return {
        ContinuousBackupsDescription:
          output.ContinuousBackupsDescription != null
            ? deserializeAws_json1_0ContinuousBackupsDescription(output.ContinuousBackupsDescription, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0DescribeContributorInsightsOutput = (output, context) => {
      return {
        ContributorInsightsRuleList:
          output.ContributorInsightsRuleList != null
            ? deserializeAws_json1_0ContributorInsightsRuleList(output.ContributorInsightsRuleList, context)
            : void 0,
        ContributorInsightsStatus: (0, smithy_client_1.expectString)(output.ContributorInsightsStatus),
        FailureException:
          output.FailureException != null
            ? deserializeAws_json1_0FailureException(output.FailureException, context)
            : void 0,
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        LastUpdateDateTime:
          output.LastUpdateDateTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateDateTime))
              )
            : void 0,
        TableName: (0, smithy_client_1.expectString)(output.TableName),
      };
    };
    var deserializeAws_json1_0DescribeEndpointsResponse = (output, context) => {
      return {
        Endpoints: output.Endpoints != null ? deserializeAws_json1_0Endpoints(output.Endpoints, context) : void 0,
      };
    };
    var deserializeAws_json1_0DescribeExportOutput = (output, context) => {
      return {
        ExportDescription:
          output.ExportDescription != null
            ? deserializeAws_json1_0ExportDescription(output.ExportDescription, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0DescribeGlobalTableOutput = (output, context) => {
      return {
        GlobalTableDescription:
          output.GlobalTableDescription != null
            ? deserializeAws_json1_0GlobalTableDescription(output.GlobalTableDescription, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0DescribeGlobalTableSettingsOutput = (output, context) => {
      return {
        GlobalTableName: (0, smithy_client_1.expectString)(output.GlobalTableName),
        ReplicaSettings:
          output.ReplicaSettings != null
            ? deserializeAws_json1_0ReplicaSettingsDescriptionList(output.ReplicaSettings, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0DescribeKinesisStreamingDestinationOutput = (output, context) => {
      return {
        KinesisDataStreamDestinations:
          output.KinesisDataStreamDestinations != null
            ? deserializeAws_json1_0KinesisDataStreamDestinations(output.KinesisDataStreamDestinations, context)
            : void 0,
        TableName: (0, smithy_client_1.expectString)(output.TableName),
      };
    };
    var deserializeAws_json1_0DescribeLimitsOutput = (output, context) => {
      return {
        AccountMaxReadCapacityUnits: (0, smithy_client_1.expectLong)(output.AccountMaxReadCapacityUnits),
        AccountMaxWriteCapacityUnits: (0, smithy_client_1.expectLong)(output.AccountMaxWriteCapacityUnits),
        TableMaxReadCapacityUnits: (0, smithy_client_1.expectLong)(output.TableMaxReadCapacityUnits),
        TableMaxWriteCapacityUnits: (0, smithy_client_1.expectLong)(output.TableMaxWriteCapacityUnits),
      };
    };
    var deserializeAws_json1_0DescribeTableOutput = (output, context) => {
      return {
        Table: output.Table != null ? deserializeAws_json1_0TableDescription(output.Table, context) : void 0,
      };
    };
    var deserializeAws_json1_0DescribeTableReplicaAutoScalingOutput = (output, context) => {
      return {
        TableAutoScalingDescription:
          output.TableAutoScalingDescription != null
            ? deserializeAws_json1_0TableAutoScalingDescription(output.TableAutoScalingDescription, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0DescribeTimeToLiveOutput = (output, context) => {
      return {
        TimeToLiveDescription:
          output.TimeToLiveDescription != null
            ? deserializeAws_json1_0TimeToLiveDescription(output.TimeToLiveDescription, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0DuplicateItemException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0Endpoint = (output, context) => {
      return {
        Address: (0, smithy_client_1.expectString)(output.Address),
        CachePeriodInMinutes: (0, smithy_client_1.expectLong)(output.CachePeriodInMinutes),
      };
    };
    var deserializeAws_json1_0Endpoints = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0Endpoint(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0ExecuteStatementOutput = (output, context) => {
      return {
        ConsumedCapacity:
          output.ConsumedCapacity != null
            ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context)
            : void 0,
        Items: output.Items != null ? deserializeAws_json1_0ItemList(output.Items, context) : void 0,
        LastEvaluatedKey:
          output.LastEvaluatedKey != null ? deserializeAws_json1_0Key(output.LastEvaluatedKey, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
      };
    };
    var deserializeAws_json1_0ExecuteTransactionOutput = (output, context) => {
      return {
        ConsumedCapacity:
          output.ConsumedCapacity != null
            ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context)
            : void 0,
        Responses:
          output.Responses != null ? deserializeAws_json1_0ItemResponseList(output.Responses, context) : void 0,
      };
    };
    var deserializeAws_json1_0ExportConflictException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0ExportDescription = (output, context) => {
      return {
        BilledSizeBytes: (0, smithy_client_1.expectLong)(output.BilledSizeBytes),
        ClientToken: (0, smithy_client_1.expectString)(output.ClientToken),
        EndTime:
          output.EndTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))
              )
            : void 0,
        ExportArn: (0, smithy_client_1.expectString)(output.ExportArn),
        ExportFormat: (0, smithy_client_1.expectString)(output.ExportFormat),
        ExportManifest: (0, smithy_client_1.expectString)(output.ExportManifest),
        ExportStatus: (0, smithy_client_1.expectString)(output.ExportStatus),
        ExportTime:
          output.ExportTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExportTime))
              )
            : void 0,
        FailureCode: (0, smithy_client_1.expectString)(output.FailureCode),
        FailureMessage: (0, smithy_client_1.expectString)(output.FailureMessage),
        ItemCount: (0, smithy_client_1.expectLong)(output.ItemCount),
        S3Bucket: (0, smithy_client_1.expectString)(output.S3Bucket),
        S3BucketOwner: (0, smithy_client_1.expectString)(output.S3BucketOwner),
        S3Prefix: (0, smithy_client_1.expectString)(output.S3Prefix),
        S3SseAlgorithm: (0, smithy_client_1.expectString)(output.S3SseAlgorithm),
        S3SseKmsKeyId: (0, smithy_client_1.expectString)(output.S3SseKmsKeyId),
        StartTime:
          output.StartTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))
              )
            : void 0,
        TableArn: (0, smithy_client_1.expectString)(output.TableArn),
        TableId: (0, smithy_client_1.expectString)(output.TableId),
      };
    };
    var deserializeAws_json1_0ExportNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0ExportSummaries = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0ExportSummary(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0ExportSummary = (output, context) => {
      return {
        ExportArn: (0, smithy_client_1.expectString)(output.ExportArn),
        ExportStatus: (0, smithy_client_1.expectString)(output.ExportStatus),
      };
    };
    var deserializeAws_json1_0ExportTableToPointInTimeOutput = (output, context) => {
      return {
        ExportDescription:
          output.ExportDescription != null
            ? deserializeAws_json1_0ExportDescription(output.ExportDescription, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0ExpressionAttributeNameMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: (0, smithy_client_1.expectString)(value),
        };
      }, {});
    };
    var deserializeAws_json1_0FailureException = (output, context) => {
      return {
        ExceptionDescription: (0, smithy_client_1.expectString)(output.ExceptionDescription),
        ExceptionName: (0, smithy_client_1.expectString)(output.ExceptionName),
      };
    };
    var deserializeAws_json1_0GetItemOutput = (output, context) => {
      return {
        ConsumedCapacity:
          output.ConsumedCapacity != null
            ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context)
            : void 0,
        Item: output.Item != null ? deserializeAws_json1_0AttributeMap(output.Item, context) : void 0,
      };
    };
    var deserializeAws_json1_0GlobalSecondaryIndexDescription = (output, context) => {
      return {
        Backfilling: (0, smithy_client_1.expectBoolean)(output.Backfilling),
        IndexArn: (0, smithy_client_1.expectString)(output.IndexArn),
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        IndexSizeBytes: (0, smithy_client_1.expectLong)(output.IndexSizeBytes),
        IndexStatus: (0, smithy_client_1.expectString)(output.IndexStatus),
        ItemCount: (0, smithy_client_1.expectLong)(output.ItemCount),
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
        Projection: output.Projection != null ? deserializeAws_json1_0Projection(output.Projection, context) : void 0,
        ProvisionedThroughput:
          output.ProvisionedThroughput != null
            ? deserializeAws_json1_0ProvisionedThroughputDescription(output.ProvisionedThroughput, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0GlobalSecondaryIndexDescriptionList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0GlobalSecondaryIndexDescription(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0GlobalSecondaryIndexes = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0GlobalSecondaryIndexInfo(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0GlobalSecondaryIndexInfo = (output, context) => {
      return {
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
        Projection: output.Projection != null ? deserializeAws_json1_0Projection(output.Projection, context) : void 0,
        ProvisionedThroughput:
          output.ProvisionedThroughput != null
            ? deserializeAws_json1_0ProvisionedThroughput(output.ProvisionedThroughput, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0GlobalTable = (output, context) => {
      return {
        GlobalTableName: (0, smithy_client_1.expectString)(output.GlobalTableName),
        ReplicationGroup:
          output.ReplicationGroup != null
            ? deserializeAws_json1_0ReplicaList(output.ReplicationGroup, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0GlobalTableAlreadyExistsException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0GlobalTableDescription = (output, context) => {
      return {
        CreationDateTime:
          output.CreationDateTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreationDateTime))
              )
            : void 0,
        GlobalTableArn: (0, smithy_client_1.expectString)(output.GlobalTableArn),
        GlobalTableName: (0, smithy_client_1.expectString)(output.GlobalTableName),
        GlobalTableStatus: (0, smithy_client_1.expectString)(output.GlobalTableStatus),
        ReplicationGroup:
          output.ReplicationGroup != null
            ? deserializeAws_json1_0ReplicaDescriptionList(output.ReplicationGroup, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0GlobalTableList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0GlobalTable(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0GlobalTableNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0IdempotentParameterMismatchException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
      };
    };
    var deserializeAws_json1_0IndexNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0InternalServerError = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0InvalidEndpointException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
      };
    };
    var deserializeAws_json1_0InvalidExportTimeException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0InvalidRestoreTimeException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0ItemCollectionKeyAttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0AttributeValue((0, smithy_client_1.expectUnion)(value), context),
        };
      }, {});
    };
    var deserializeAws_json1_0ItemCollectionMetrics = (output, context) => {
      return {
        ItemCollectionKey:
          output.ItemCollectionKey != null
            ? deserializeAws_json1_0ItemCollectionKeyAttributeMap(output.ItemCollectionKey, context)
            : void 0,
        SizeEstimateRangeGB:
          output.SizeEstimateRangeGB != null
            ? deserializeAws_json1_0ItemCollectionSizeEstimateRange(output.SizeEstimateRangeGB, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0ItemCollectionMetricsMultiple = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0ItemCollectionMetrics(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0ItemCollectionMetricsPerTable = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0ItemCollectionMetricsMultiple(value, context),
        };
      }, {});
    };
    var deserializeAws_json1_0ItemCollectionSizeEstimateRange = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return (0, smithy_client_1.limitedParseDouble)(entry);
        });
      return retVal;
    };
    var deserializeAws_json1_0ItemCollectionSizeLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0ItemList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0AttributeMap(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0ItemResponse = (output, context) => {
      return {
        Item: output.Item != null ? deserializeAws_json1_0AttributeMap(output.Item, context) : void 0,
      };
    };
    var deserializeAws_json1_0ItemResponseList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0ItemResponse(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0Key = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0AttributeValue((0, smithy_client_1.expectUnion)(value), context),
        };
      }, {});
    };
    var deserializeAws_json1_0KeyList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0Key(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0KeysAndAttributes = (output, context) => {
      return {
        AttributesToGet:
          output.AttributesToGet != null
            ? deserializeAws_json1_0AttributeNameList(output.AttributesToGet, context)
            : void 0,
        ConsistentRead: (0, smithy_client_1.expectBoolean)(output.ConsistentRead),
        ExpressionAttributeNames:
          output.ExpressionAttributeNames != null
            ? deserializeAws_json1_0ExpressionAttributeNameMap(output.ExpressionAttributeNames, context)
            : void 0,
        Keys: output.Keys != null ? deserializeAws_json1_0KeyList(output.Keys, context) : void 0,
        ProjectionExpression: (0, smithy_client_1.expectString)(output.ProjectionExpression),
      };
    };
    var deserializeAws_json1_0KeySchema = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0KeySchemaElement(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0KeySchemaElement = (output, context) => {
      return {
        AttributeName: (0, smithy_client_1.expectString)(output.AttributeName),
        KeyType: (0, smithy_client_1.expectString)(output.KeyType),
      };
    };
    var deserializeAws_json1_0KinesisDataStreamDestination = (output, context) => {
      return {
        DestinationStatus: (0, smithy_client_1.expectString)(output.DestinationStatus),
        DestinationStatusDescription: (0, smithy_client_1.expectString)(output.DestinationStatusDescription),
        StreamArn: (0, smithy_client_1.expectString)(output.StreamArn),
      };
    };
    var deserializeAws_json1_0KinesisDataStreamDestinations = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0KinesisDataStreamDestination(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0KinesisStreamingDestinationOutput = (output, context) => {
      return {
        DestinationStatus: (0, smithy_client_1.expectString)(output.DestinationStatus),
        StreamArn: (0, smithy_client_1.expectString)(output.StreamArn),
        TableName: (0, smithy_client_1.expectString)(output.TableName),
      };
    };
    var deserializeAws_json1_0LimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0ListAttributeValue = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0AttributeValue((0, smithy_client_1.expectUnion)(entry), context);
        });
      return retVal;
    };
    var deserializeAws_json1_0ListBackupsOutput = (output, context) => {
      return {
        BackupSummaries:
          output.BackupSummaries != null
            ? deserializeAws_json1_0BackupSummaries(output.BackupSummaries, context)
            : void 0,
        LastEvaluatedBackupArn: (0, smithy_client_1.expectString)(output.LastEvaluatedBackupArn),
      };
    };
    var deserializeAws_json1_0ListContributorInsightsOutput = (output, context) => {
      return {
        ContributorInsightsSummaries:
          output.ContributorInsightsSummaries != null
            ? deserializeAws_json1_0ContributorInsightsSummaries(output.ContributorInsightsSummaries, context)
            : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
      };
    };
    var deserializeAws_json1_0ListExportsOutput = (output, context) => {
      return {
        ExportSummaries:
          output.ExportSummaries != null
            ? deserializeAws_json1_0ExportSummaries(output.ExportSummaries, context)
            : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
      };
    };
    var deserializeAws_json1_0ListGlobalTablesOutput = (output, context) => {
      return {
        GlobalTables:
          output.GlobalTables != null ? deserializeAws_json1_0GlobalTableList(output.GlobalTables, context) : void 0,
        LastEvaluatedGlobalTableName: (0, smithy_client_1.expectString)(output.LastEvaluatedGlobalTableName),
      };
    };
    var deserializeAws_json1_0ListTablesOutput = (output, context) => {
      return {
        LastEvaluatedTableName: (0, smithy_client_1.expectString)(output.LastEvaluatedTableName),
        TableNames:
          output.TableNames != null ? deserializeAws_json1_0TableNameList(output.TableNames, context) : void 0,
      };
    };
    var deserializeAws_json1_0ListTagsOfResourceOutput = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Tags: output.Tags != null ? deserializeAws_json1_0TagList(output.Tags, context) : void 0,
      };
    };
    var deserializeAws_json1_0LocalSecondaryIndexDescription = (output, context) => {
      return {
        IndexArn: (0, smithy_client_1.expectString)(output.IndexArn),
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        IndexSizeBytes: (0, smithy_client_1.expectLong)(output.IndexSizeBytes),
        ItemCount: (0, smithy_client_1.expectLong)(output.ItemCount),
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
        Projection: output.Projection != null ? deserializeAws_json1_0Projection(output.Projection, context) : void 0,
      };
    };
    var deserializeAws_json1_0LocalSecondaryIndexDescriptionList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0LocalSecondaryIndexDescription(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0LocalSecondaryIndexes = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0LocalSecondaryIndexInfo(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0LocalSecondaryIndexInfo = (output, context) => {
      return {
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
        Projection: output.Projection != null ? deserializeAws_json1_0Projection(output.Projection, context) : void 0,
      };
    };
    var deserializeAws_json1_0MapAttributeValue = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0AttributeValue((0, smithy_client_1.expectUnion)(value), context),
        };
      }, {});
    };
    var deserializeAws_json1_0NonKeyAttributeNameList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return (0, smithy_client_1.expectString)(entry);
        });
      return retVal;
    };
    var deserializeAws_json1_0NumberSetAttributeValue = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return (0, smithy_client_1.expectString)(entry);
        });
      return retVal;
    };
    var deserializeAws_json1_0PartiQLBatchResponse = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0BatchStatementResponse(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0PointInTimeRecoveryDescription = (output, context) => {
      return {
        EarliestRestorableDateTime:
          output.EarliestRestorableDateTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)(
                  (0, smithy_client_1.expectNumber)(output.EarliestRestorableDateTime)
                )
              )
            : void 0,
        LatestRestorableDateTime:
          output.LatestRestorableDateTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)(
                  (0, smithy_client_1.expectNumber)(output.LatestRestorableDateTime)
                )
              )
            : void 0,
        PointInTimeRecoveryStatus: (0, smithy_client_1.expectString)(output.PointInTimeRecoveryStatus),
      };
    };
    var deserializeAws_json1_0PointInTimeRecoveryUnavailableException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0Projection = (output, context) => {
      return {
        NonKeyAttributes:
          output.NonKeyAttributes != null
            ? deserializeAws_json1_0NonKeyAttributeNameList(output.NonKeyAttributes, context)
            : void 0,
        ProjectionType: (0, smithy_client_1.expectString)(output.ProjectionType),
      };
    };
    var deserializeAws_json1_0ProvisionedThroughput = (output, context) => {
      return {
        ReadCapacityUnits: (0, smithy_client_1.expectLong)(output.ReadCapacityUnits),
        WriteCapacityUnits: (0, smithy_client_1.expectLong)(output.WriteCapacityUnits),
      };
    };
    var deserializeAws_json1_0ProvisionedThroughputDescription = (output, context) => {
      return {
        LastDecreaseDateTime:
          output.LastDecreaseDateTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastDecreaseDateTime))
              )
            : void 0,
        LastIncreaseDateTime:
          output.LastIncreaseDateTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastIncreaseDateTime))
              )
            : void 0,
        NumberOfDecreasesToday: (0, smithy_client_1.expectLong)(output.NumberOfDecreasesToday),
        ReadCapacityUnits: (0, smithy_client_1.expectLong)(output.ReadCapacityUnits),
        WriteCapacityUnits: (0, smithy_client_1.expectLong)(output.WriteCapacityUnits),
      };
    };
    var deserializeAws_json1_0ProvisionedThroughputExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0ProvisionedThroughputOverride = (output, context) => {
      return {
        ReadCapacityUnits: (0, smithy_client_1.expectLong)(output.ReadCapacityUnits),
      };
    };
    var deserializeAws_json1_0PutItemInputAttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0AttributeValue((0, smithy_client_1.expectUnion)(value), context),
        };
      }, {});
    };
    var deserializeAws_json1_0PutItemOutput = (output, context) => {
      return {
        Attributes: output.Attributes != null ? deserializeAws_json1_0AttributeMap(output.Attributes, context) : void 0,
        ConsumedCapacity:
          output.ConsumedCapacity != null
            ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context)
            : void 0,
        ItemCollectionMetrics:
          output.ItemCollectionMetrics != null
            ? deserializeAws_json1_0ItemCollectionMetrics(output.ItemCollectionMetrics, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0PutRequest = (output, context) => {
      return {
        Item: output.Item != null ? deserializeAws_json1_0PutItemInputAttributeMap(output.Item, context) : void 0,
      };
    };
    var deserializeAws_json1_0QueryOutput = (output, context) => {
      return {
        ConsumedCapacity:
          output.ConsumedCapacity != null
            ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context)
            : void 0,
        Count: (0, smithy_client_1.expectInt32)(output.Count),
        Items: output.Items != null ? deserializeAws_json1_0ItemList(output.Items, context) : void 0,
        LastEvaluatedKey:
          output.LastEvaluatedKey != null ? deserializeAws_json1_0Key(output.LastEvaluatedKey, context) : void 0,
        ScannedCount: (0, smithy_client_1.expectInt32)(output.ScannedCount),
      };
    };
    var deserializeAws_json1_0Replica = (output, context) => {
      return {
        RegionName: (0, smithy_client_1.expectString)(output.RegionName),
      };
    };
    var deserializeAws_json1_0ReplicaAlreadyExistsException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0ReplicaAutoScalingDescription = (output, context) => {
      return {
        GlobalSecondaryIndexes:
          output.GlobalSecondaryIndexes != null
            ? deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescriptionList(
                output.GlobalSecondaryIndexes,
                context
              )
            : void 0,
        RegionName: (0, smithy_client_1.expectString)(output.RegionName),
        ReplicaProvisionedReadCapacityAutoScalingSettings:
          output.ReplicaProvisionedReadCapacityAutoScalingSettings != null
            ? deserializeAws_json1_0AutoScalingSettingsDescription(
                output.ReplicaProvisionedReadCapacityAutoScalingSettings,
                context
              )
            : void 0,
        ReplicaProvisionedWriteCapacityAutoScalingSettings:
          output.ReplicaProvisionedWriteCapacityAutoScalingSettings != null
            ? deserializeAws_json1_0AutoScalingSettingsDescription(
                output.ReplicaProvisionedWriteCapacityAutoScalingSettings,
                context
              )
            : void 0,
        ReplicaStatus: (0, smithy_client_1.expectString)(output.ReplicaStatus),
      };
    };
    var deserializeAws_json1_0ReplicaAutoScalingDescriptionList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0ReplicaAutoScalingDescription(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0ReplicaDescription = (output, context) => {
      return {
        GlobalSecondaryIndexes:
          output.GlobalSecondaryIndexes != null
            ? deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescriptionList(output.GlobalSecondaryIndexes, context)
            : void 0,
        KMSMasterKeyId: (0, smithy_client_1.expectString)(output.KMSMasterKeyId),
        ProvisionedThroughputOverride:
          output.ProvisionedThroughputOverride != null
            ? deserializeAws_json1_0ProvisionedThroughputOverride(output.ProvisionedThroughputOverride, context)
            : void 0,
        RegionName: (0, smithy_client_1.expectString)(output.RegionName),
        ReplicaInaccessibleDateTime:
          output.ReplicaInaccessibleDateTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)(
                  (0, smithy_client_1.expectNumber)(output.ReplicaInaccessibleDateTime)
                )
              )
            : void 0,
        ReplicaStatus: (0, smithy_client_1.expectString)(output.ReplicaStatus),
        ReplicaStatusDescription: (0, smithy_client_1.expectString)(output.ReplicaStatusDescription),
        ReplicaStatusPercentProgress: (0, smithy_client_1.expectString)(output.ReplicaStatusPercentProgress),
        ReplicaTableClassSummary:
          output.ReplicaTableClassSummary != null
            ? deserializeAws_json1_0TableClassSummary(output.ReplicaTableClassSummary, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0ReplicaDescriptionList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0ReplicaDescription(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescription = (output, context) => {
      return {
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        IndexStatus: (0, smithy_client_1.expectString)(output.IndexStatus),
        ProvisionedReadCapacityAutoScalingSettings:
          output.ProvisionedReadCapacityAutoScalingSettings != null
            ? deserializeAws_json1_0AutoScalingSettingsDescription(
                output.ProvisionedReadCapacityAutoScalingSettings,
                context
              )
            : void 0,
        ProvisionedWriteCapacityAutoScalingSettings:
          output.ProvisionedWriteCapacityAutoScalingSettings != null
            ? deserializeAws_json1_0AutoScalingSettingsDescription(
                output.ProvisionedWriteCapacityAutoScalingSettings,
                context
              )
            : void 0,
      };
    };
    var deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescriptionList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescription(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescription = (output, context) => {
      return {
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        ProvisionedThroughputOverride:
          output.ProvisionedThroughputOverride != null
            ? deserializeAws_json1_0ProvisionedThroughputOverride(output.ProvisionedThroughputOverride, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescriptionList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescription(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescription = (output, context) => {
      return {
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        IndexStatus: (0, smithy_client_1.expectString)(output.IndexStatus),
        ProvisionedReadCapacityAutoScalingSettings:
          output.ProvisionedReadCapacityAutoScalingSettings != null
            ? deserializeAws_json1_0AutoScalingSettingsDescription(
                output.ProvisionedReadCapacityAutoScalingSettings,
                context
              )
            : void 0,
        ProvisionedReadCapacityUnits: (0, smithy_client_1.expectLong)(output.ProvisionedReadCapacityUnits),
        ProvisionedWriteCapacityAutoScalingSettings:
          output.ProvisionedWriteCapacityAutoScalingSettings != null
            ? deserializeAws_json1_0AutoScalingSettingsDescription(
                output.ProvisionedWriteCapacityAutoScalingSettings,
                context
              )
            : void 0,
        ProvisionedWriteCapacityUnits: (0, smithy_client_1.expectLong)(output.ProvisionedWriteCapacityUnits),
      };
    };
    var deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescriptionList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescription(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0ReplicaList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0Replica(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0ReplicaNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0ReplicaSettingsDescription = (output, context) => {
      return {
        RegionName: (0, smithy_client_1.expectString)(output.RegionName),
        ReplicaBillingModeSummary:
          output.ReplicaBillingModeSummary != null
            ? deserializeAws_json1_0BillingModeSummary(output.ReplicaBillingModeSummary, context)
            : void 0,
        ReplicaGlobalSecondaryIndexSettings:
          output.ReplicaGlobalSecondaryIndexSettings != null
            ? deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescriptionList(
                output.ReplicaGlobalSecondaryIndexSettings,
                context
              )
            : void 0,
        ReplicaProvisionedReadCapacityAutoScalingSettings:
          output.ReplicaProvisionedReadCapacityAutoScalingSettings != null
            ? deserializeAws_json1_0AutoScalingSettingsDescription(
                output.ReplicaProvisionedReadCapacityAutoScalingSettings,
                context
              )
            : void 0,
        ReplicaProvisionedReadCapacityUnits: (0, smithy_client_1.expectLong)(
          output.ReplicaProvisionedReadCapacityUnits
        ),
        ReplicaProvisionedWriteCapacityAutoScalingSettings:
          output.ReplicaProvisionedWriteCapacityAutoScalingSettings != null
            ? deserializeAws_json1_0AutoScalingSettingsDescription(
                output.ReplicaProvisionedWriteCapacityAutoScalingSettings,
                context
              )
            : void 0,
        ReplicaProvisionedWriteCapacityUnits: (0, smithy_client_1.expectLong)(
          output.ReplicaProvisionedWriteCapacityUnits
        ),
        ReplicaStatus: (0, smithy_client_1.expectString)(output.ReplicaStatus),
        ReplicaTableClassSummary:
          output.ReplicaTableClassSummary != null
            ? deserializeAws_json1_0TableClassSummary(output.ReplicaTableClassSummary, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0ReplicaSettingsDescriptionList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0ReplicaSettingsDescription(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0RequestLimitExceeded = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0ResourceInUseException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0ResourceNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0RestoreSummary = (output, context) => {
      return {
        RestoreDateTime:
          output.RestoreDateTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.RestoreDateTime))
              )
            : void 0,
        RestoreInProgress: (0, smithy_client_1.expectBoolean)(output.RestoreInProgress),
        SourceBackupArn: (0, smithy_client_1.expectString)(output.SourceBackupArn),
        SourceTableArn: (0, smithy_client_1.expectString)(output.SourceTableArn),
      };
    };
    var deserializeAws_json1_0RestoreTableFromBackupOutput = (output, context) => {
      return {
        TableDescription:
          output.TableDescription != null
            ? deserializeAws_json1_0TableDescription(output.TableDescription, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0RestoreTableToPointInTimeOutput = (output, context) => {
      return {
        TableDescription:
          output.TableDescription != null
            ? deserializeAws_json1_0TableDescription(output.TableDescription, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0ScanOutput = (output, context) => {
      return {
        ConsumedCapacity:
          output.ConsumedCapacity != null
            ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context)
            : void 0,
        Count: (0, smithy_client_1.expectInt32)(output.Count),
        Items: output.Items != null ? deserializeAws_json1_0ItemList(output.Items, context) : void 0,
        LastEvaluatedKey:
          output.LastEvaluatedKey != null ? deserializeAws_json1_0Key(output.LastEvaluatedKey, context) : void 0,
        ScannedCount: (0, smithy_client_1.expectInt32)(output.ScannedCount),
      };
    };
    var deserializeAws_json1_0SecondaryIndexesCapacityMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0Capacity(value, context),
        };
      }, {});
    };
    var deserializeAws_json1_0SourceTableDetails = (output, context) => {
      return {
        BillingMode: (0, smithy_client_1.expectString)(output.BillingMode),
        ItemCount: (0, smithy_client_1.expectLong)(output.ItemCount),
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
        ProvisionedThroughput:
          output.ProvisionedThroughput != null
            ? deserializeAws_json1_0ProvisionedThroughput(output.ProvisionedThroughput, context)
            : void 0,
        TableArn: (0, smithy_client_1.expectString)(output.TableArn),
        TableCreationDateTime:
          output.TableCreationDateTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)(
                  (0, smithy_client_1.expectNumber)(output.TableCreationDateTime)
                )
              )
            : void 0,
        TableId: (0, smithy_client_1.expectString)(output.TableId),
        TableName: (0, smithy_client_1.expectString)(output.TableName),
        TableSizeBytes: (0, smithy_client_1.expectLong)(output.TableSizeBytes),
      };
    };
    var deserializeAws_json1_0SourceTableFeatureDetails = (output, context) => {
      return {
        GlobalSecondaryIndexes:
          output.GlobalSecondaryIndexes != null
            ? deserializeAws_json1_0GlobalSecondaryIndexes(output.GlobalSecondaryIndexes, context)
            : void 0,
        LocalSecondaryIndexes:
          output.LocalSecondaryIndexes != null
            ? deserializeAws_json1_0LocalSecondaryIndexes(output.LocalSecondaryIndexes, context)
            : void 0,
        SSEDescription:
          output.SSEDescription != null ? deserializeAws_json1_0SSEDescription(output.SSEDescription, context) : void 0,
        StreamDescription:
          output.StreamDescription != null
            ? deserializeAws_json1_0StreamSpecification(output.StreamDescription, context)
            : void 0,
        TimeToLiveDescription:
          output.TimeToLiveDescription != null
            ? deserializeAws_json1_0TimeToLiveDescription(output.TimeToLiveDescription, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0SSEDescription = (output, context) => {
      return {
        InaccessibleEncryptionDateTime:
          output.InaccessibleEncryptionDateTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)(
                  (0, smithy_client_1.expectNumber)(output.InaccessibleEncryptionDateTime)
                )
              )
            : void 0,
        KMSMasterKeyArn: (0, smithy_client_1.expectString)(output.KMSMasterKeyArn),
        SSEType: (0, smithy_client_1.expectString)(output.SSEType),
        Status: (0, smithy_client_1.expectString)(output.Status),
      };
    };
    var deserializeAws_json1_0StreamSpecification = (output, context) => {
      return {
        StreamEnabled: (0, smithy_client_1.expectBoolean)(output.StreamEnabled),
        StreamViewType: (0, smithy_client_1.expectString)(output.StreamViewType),
      };
    };
    var deserializeAws_json1_0StringSetAttributeValue = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return (0, smithy_client_1.expectString)(entry);
        });
      return retVal;
    };
    var deserializeAws_json1_0TableAlreadyExistsException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0TableAutoScalingDescription = (output, context) => {
      return {
        Replicas:
          output.Replicas != null
            ? deserializeAws_json1_0ReplicaAutoScalingDescriptionList(output.Replicas, context)
            : void 0,
        TableName: (0, smithy_client_1.expectString)(output.TableName),
        TableStatus: (0, smithy_client_1.expectString)(output.TableStatus),
      };
    };
    var deserializeAws_json1_0TableClassSummary = (output, context) => {
      return {
        LastUpdateDateTime:
          output.LastUpdateDateTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateDateTime))
              )
            : void 0,
        TableClass: (0, smithy_client_1.expectString)(output.TableClass),
      };
    };
    var deserializeAws_json1_0TableDescription = (output, context) => {
      return {
        ArchivalSummary:
          output.ArchivalSummary != null
            ? deserializeAws_json1_0ArchivalSummary(output.ArchivalSummary, context)
            : void 0,
        AttributeDefinitions:
          output.AttributeDefinitions != null
            ? deserializeAws_json1_0AttributeDefinitions(output.AttributeDefinitions, context)
            : void 0,
        BillingModeSummary:
          output.BillingModeSummary != null
            ? deserializeAws_json1_0BillingModeSummary(output.BillingModeSummary, context)
            : void 0,
        CreationDateTime:
          output.CreationDateTime != null
            ? (0, smithy_client_1.expectNonNull)(
                (0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreationDateTime))
              )
            : void 0,
        GlobalSecondaryIndexes:
          output.GlobalSecondaryIndexes != null
            ? deserializeAws_json1_0GlobalSecondaryIndexDescriptionList(output.GlobalSecondaryIndexes, context)
            : void 0,
        GlobalTableVersion: (0, smithy_client_1.expectString)(output.GlobalTableVersion),
        ItemCount: (0, smithy_client_1.expectLong)(output.ItemCount),
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
        LatestStreamArn: (0, smithy_client_1.expectString)(output.LatestStreamArn),
        LatestStreamLabel: (0, smithy_client_1.expectString)(output.LatestStreamLabel),
        LocalSecondaryIndexes:
          output.LocalSecondaryIndexes != null
            ? deserializeAws_json1_0LocalSecondaryIndexDescriptionList(output.LocalSecondaryIndexes, context)
            : void 0,
        ProvisionedThroughput:
          output.ProvisionedThroughput != null
            ? deserializeAws_json1_0ProvisionedThroughputDescription(output.ProvisionedThroughput, context)
            : void 0,
        Replicas:
          output.Replicas != null ? deserializeAws_json1_0ReplicaDescriptionList(output.Replicas, context) : void 0,
        RestoreSummary:
          output.RestoreSummary != null ? deserializeAws_json1_0RestoreSummary(output.RestoreSummary, context) : void 0,
        SSEDescription:
          output.SSEDescription != null ? deserializeAws_json1_0SSEDescription(output.SSEDescription, context) : void 0,
        StreamSpecification:
          output.StreamSpecification != null
            ? deserializeAws_json1_0StreamSpecification(output.StreamSpecification, context)
            : void 0,
        TableArn: (0, smithy_client_1.expectString)(output.TableArn),
        TableClassSummary:
          output.TableClassSummary != null
            ? deserializeAws_json1_0TableClassSummary(output.TableClassSummary, context)
            : void 0,
        TableId: (0, smithy_client_1.expectString)(output.TableId),
        TableName: (0, smithy_client_1.expectString)(output.TableName),
        TableSizeBytes: (0, smithy_client_1.expectLong)(output.TableSizeBytes),
        TableStatus: (0, smithy_client_1.expectString)(output.TableStatus),
      };
    };
    var deserializeAws_json1_0TableInUseException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0TableNameList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return (0, smithy_client_1.expectString)(entry);
        });
      return retVal;
    };
    var deserializeAws_json1_0TableNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0Tag = (output, context) => {
      return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Value: (0, smithy_client_1.expectString)(output.Value),
      };
    };
    var deserializeAws_json1_0TagList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0Tag(entry, context);
        });
      return retVal;
    };
    var deserializeAws_json1_0TimeToLiveDescription = (output, context) => {
      return {
        AttributeName: (0, smithy_client_1.expectString)(output.AttributeName),
        TimeToLiveStatus: (0, smithy_client_1.expectString)(output.TimeToLiveStatus),
      };
    };
    var deserializeAws_json1_0TimeToLiveSpecification = (output, context) => {
      return {
        AttributeName: (0, smithy_client_1.expectString)(output.AttributeName),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
      };
    };
    var deserializeAws_json1_0TransactGetItemsOutput = (output, context) => {
      return {
        ConsumedCapacity:
          output.ConsumedCapacity != null
            ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context)
            : void 0,
        Responses:
          output.Responses != null ? deserializeAws_json1_0ItemResponseList(output.Responses, context) : void 0,
      };
    };
    var deserializeAws_json1_0TransactionCanceledException = (output, context) => {
      return {
        CancellationReasons:
          output.CancellationReasons != null
            ? deserializeAws_json1_0CancellationReasonList(output.CancellationReasons, context)
            : void 0,
        Message: (0, smithy_client_1.expectString)(output.Message),
      };
    };
    var deserializeAws_json1_0TransactionConflictException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message),
      };
    };
    var deserializeAws_json1_0TransactionInProgressException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
      };
    };
    var deserializeAws_json1_0TransactWriteItemsOutput = (output, context) => {
      return {
        ConsumedCapacity:
          output.ConsumedCapacity != null
            ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context)
            : void 0,
        ItemCollectionMetrics:
          output.ItemCollectionMetrics != null
            ? deserializeAws_json1_0ItemCollectionMetricsPerTable(output.ItemCollectionMetrics, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0UpdateContinuousBackupsOutput = (output, context) => {
      return {
        ContinuousBackupsDescription:
          output.ContinuousBackupsDescription != null
            ? deserializeAws_json1_0ContinuousBackupsDescription(output.ContinuousBackupsDescription, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0UpdateContributorInsightsOutput = (output, context) => {
      return {
        ContributorInsightsStatus: (0, smithy_client_1.expectString)(output.ContributorInsightsStatus),
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        TableName: (0, smithy_client_1.expectString)(output.TableName),
      };
    };
    var deserializeAws_json1_0UpdateGlobalTableOutput = (output, context) => {
      return {
        GlobalTableDescription:
          output.GlobalTableDescription != null
            ? deserializeAws_json1_0GlobalTableDescription(output.GlobalTableDescription, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0UpdateGlobalTableSettingsOutput = (output, context) => {
      return {
        GlobalTableName: (0, smithy_client_1.expectString)(output.GlobalTableName),
        ReplicaSettings:
          output.ReplicaSettings != null
            ? deserializeAws_json1_0ReplicaSettingsDescriptionList(output.ReplicaSettings, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0UpdateItemOutput = (output, context) => {
      return {
        Attributes: output.Attributes != null ? deserializeAws_json1_0AttributeMap(output.Attributes, context) : void 0,
        ConsumedCapacity:
          output.ConsumedCapacity != null
            ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context)
            : void 0,
        ItemCollectionMetrics:
          output.ItemCollectionMetrics != null
            ? deserializeAws_json1_0ItemCollectionMetrics(output.ItemCollectionMetrics, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0UpdateTableOutput = (output, context) => {
      return {
        TableDescription:
          output.TableDescription != null
            ? deserializeAws_json1_0TableDescription(output.TableDescription, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0UpdateTableReplicaAutoScalingOutput = (output, context) => {
      return {
        TableAutoScalingDescription:
          output.TableAutoScalingDescription != null
            ? deserializeAws_json1_0TableAutoScalingDescription(output.TableAutoScalingDescription, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0UpdateTimeToLiveOutput = (output, context) => {
      return {
        TimeToLiveSpecification:
          output.TimeToLiveSpecification != null
            ? deserializeAws_json1_0TimeToLiveSpecification(output.TimeToLiveSpecification, context)
            : void 0,
      };
    };
    var deserializeAws_json1_0WriteRequest = (output, context) => {
      return {
        DeleteRequest:
          output.DeleteRequest != null ? deserializeAws_json1_0DeleteRequest(output.DeleteRequest, context) : void 0,
        PutRequest: output.PutRequest != null ? deserializeAws_json1_0PutRequest(output.PutRequest, context) : void 0,
      };
    };
    var deserializeAws_json1_0WriteRequests = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_json1_0WriteRequest(entry, context);
        });
      return retVal;
    };
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId:
          (_a = output.headers['x-amzn-requestid']) !== null && _a !== void 0
            ? _a
            : output.headers['x-amzn-request-id'],
        extendedRequestId: output.headers['x-amz-id-2'],
        cfId: output.headers['x-amz-cf-id'],
      };
    };
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) =>
      collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = 'https', port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: 'POST',
        path: basePath.endsWith('/') ? basePath.slice(0, -1) + path : basePath + path,
        headers,
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) =>
      collectBodyString(streamBody, context).then((encoded) => {
        if (encoded.length) {
          return JSON.parse(encoded);
        }
        return {};
      });
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === 'number') {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(':') >= 0) {
          cleanValue = cleanValue.split(':')[0];
        }
        if (cleanValue.indexOf('#') >= 0) {
          cleanValue = cleanValue.split('#')[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, 'x-amzn-errortype');
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data['__type'] !== void 0) {
        return sanitizeErrorCode(data['__type']);
      }
    };
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js
var require_BatchExecuteStatementCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.BatchExecuteStatementCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchExecuteStatementCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'BatchExecuteStatementCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchExecuteStatementInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.BatchExecuteStatementOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0BatchExecuteStatementCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0BatchExecuteStatementCommand)(output, context);
      }
    };
    exports.BatchExecuteStatementCommand = BatchExecuteStatementCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchGetItemCommand.js
var require_BatchGetItemCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchGetItemCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.BatchGetItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchGetItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'BatchGetItemCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchGetItemInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.BatchGetItemOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0BatchGetItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0BatchGetItemCommand)(output, context);
      }
    };
    exports.BatchGetItemCommand = BatchGetItemCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchWriteItemCommand.js
var require_BatchWriteItemCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchWriteItemCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.BatchWriteItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchWriteItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'BatchWriteItemCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchWriteItemInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.BatchWriteItemOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0BatchWriteItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0BatchWriteItemCommand)(output, context);
      }
    };
    exports.BatchWriteItemCommand = BatchWriteItemCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateBackupCommand.js
var require_CreateBackupCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateBackupCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CreateBackupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateBackupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'CreateBackupCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateBackupInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateBackupOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0CreateBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0CreateBackupCommand)(output, context);
      }
    };
    exports.CreateBackupCommand = CreateBackupCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateGlobalTableCommand.js
var require_CreateGlobalTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateGlobalTableCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CreateGlobalTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateGlobalTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'CreateGlobalTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateGlobalTableInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateGlobalTableOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0CreateGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0CreateGlobalTableCommand)(output, context);
      }
    };
    exports.CreateGlobalTableCommand = CreateGlobalTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateTableCommand.js
var require_CreateTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateTableCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CreateTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'CreateTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateTableInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateTableOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0CreateTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0CreateTableCommand)(output, context);
      }
    };
    exports.CreateTableCommand = CreateTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteBackupCommand.js
var require_DeleteBackupCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteBackupCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DeleteBackupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteBackupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DeleteBackupCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteBackupInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteBackupOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DeleteBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DeleteBackupCommand)(output, context);
      }
    };
    exports.DeleteBackupCommand = DeleteBackupCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteItemCommand.js
var require_DeleteItemCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteItemCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DeleteItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DeleteItemCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteItemInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteItemOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DeleteItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DeleteItemCommand)(output, context);
      }
    };
    exports.DeleteItemCommand = DeleteItemCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteTableCommand.js
var require_DeleteTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteTableCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DeleteTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DeleteTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteTableInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteTableOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DeleteTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DeleteTableCommand)(output, context);
      }
    };
    exports.DeleteTableCommand = DeleteTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeBackupCommand.js
var require_DescribeBackupCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeBackupCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeBackupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeBackupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeBackupCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeBackupInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeBackupOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeBackupCommand)(output, context);
      }
    };
    exports.DescribeBackupCommand = DescribeBackupCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContinuousBackupsCommand.js
var require_DescribeContinuousBackupsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContinuousBackupsCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeContinuousBackupsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeContinuousBackupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeContinuousBackupsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeContinuousBackupsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeContinuousBackupsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeContinuousBackupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeContinuousBackupsCommand)(output, context);
      }
    };
    exports.DescribeContinuousBackupsCommand = DescribeContinuousBackupsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContributorInsightsCommand.js
var require_DescribeContributorInsightsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContributorInsightsCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeContributorInsightsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeContributorInsightsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeContributorInsightsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeContributorInsightsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeContributorInsightsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeContributorInsightsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeContributorInsightsCommand)(output, context);
      }
    };
    exports.DescribeContributorInsightsCommand = DescribeContributorInsightsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeEndpointsCommand.js
var require_DescribeEndpointsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeEndpointsCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeEndpointsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeEndpointsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeEndpointsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeEndpointsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeEndpointsResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeEndpointsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeEndpointsCommand)(output, context);
      }
    };
    exports.DescribeEndpointsCommand = DescribeEndpointsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeExportCommand.js
var require_DescribeExportCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeExportCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeExportCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeExportCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeExportCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeExportInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeExportOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeExportCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeExportCommand)(output, context);
      }
    };
    exports.DescribeExportCommand = DescribeExportCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableCommand.js
var require_DescribeGlobalTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeGlobalTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeGlobalTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeGlobalTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeGlobalTableInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeGlobalTableOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeGlobalTableCommand)(output, context);
      }
    };
    exports.DescribeGlobalTableCommand = DescribeGlobalTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableSettingsCommand.js
var require_DescribeGlobalTableSettingsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableSettingsCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeGlobalTableSettingsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeGlobalTableSettingsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeGlobalTableSettingsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeGlobalTableSettingsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeGlobalTableSettingsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeGlobalTableSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeGlobalTableSettingsCommand)(output, context);
      }
    };
    exports.DescribeGlobalTableSettingsCommand = DescribeGlobalTableSettingsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeKinesisStreamingDestinationCommand.js
var require_DescribeKinesisStreamingDestinationCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeKinesisStreamingDestinationCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeKinesisStreamingDestinationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeKinesisStreamingDestinationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeKinesisStreamingDestinationCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeKinesisStreamingDestinationInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeKinesisStreamingDestinationOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeKinesisStreamingDestinationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand)(output, context);
      }
    };
    exports.DescribeKinesisStreamingDestinationCommand = DescribeKinesisStreamingDestinationCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeLimitsCommand.js
var require_DescribeLimitsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeLimitsCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeLimitsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeLimitsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeLimitsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeLimitsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeLimitsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeLimitsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeLimitsCommand)(output, context);
      }
    };
    exports.DescribeLimitsCommand = DescribeLimitsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableCommand.js
var require_DescribeTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeTableInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeTableOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeTableCommand)(output, context);
      }
    };
    exports.DescribeTableCommand = DescribeTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableReplicaAutoScalingCommand.js
var require_DescribeTableReplicaAutoScalingCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableReplicaAutoScalingCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeTableReplicaAutoScalingCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTableReplicaAutoScalingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeTableReplicaAutoScalingCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeTableReplicaAutoScalingInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeTableReplicaAutoScalingOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeTableReplicaAutoScalingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand)(output, context);
      }
    };
    exports.DescribeTableReplicaAutoScalingCommand = DescribeTableReplicaAutoScalingCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTimeToLiveCommand.js
var require_DescribeTimeToLiveCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTimeToLiveCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeTimeToLiveCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTimeToLiveCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeTimeToLiveCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeTimeToLiveInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeTimeToLiveOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeTimeToLiveCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeTimeToLiveCommand)(output, context);
      }
    };
    exports.DescribeTimeToLiveCommand = DescribeTimeToLiveCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DisableKinesisStreamingDestinationCommand.js
var require_DisableKinesisStreamingDestinationCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DisableKinesisStreamingDestinationCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DisableKinesisStreamingDestinationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DisableKinesisStreamingDestinationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DisableKinesisStreamingDestinationCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.KinesisStreamingDestinationInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.KinesisStreamingDestinationOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DisableKinesisStreamingDestinationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DisableKinesisStreamingDestinationCommand)(output, context);
      }
    };
    exports.DisableKinesisStreamingDestinationCommand = DisableKinesisStreamingDestinationCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/EnableKinesisStreamingDestinationCommand.js
var require_EnableKinesisStreamingDestinationCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/EnableKinesisStreamingDestinationCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.EnableKinesisStreamingDestinationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var EnableKinesisStreamingDestinationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'EnableKinesisStreamingDestinationCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.KinesisStreamingDestinationInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.KinesisStreamingDestinationOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0EnableKinesisStreamingDestinationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0EnableKinesisStreamingDestinationCommand)(output, context);
      }
    };
    exports.EnableKinesisStreamingDestinationCommand = EnableKinesisStreamingDestinationCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js
var require_ExecuteStatementCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ExecuteStatementCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExecuteStatementCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ExecuteStatementCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ExecuteStatementInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ExecuteStatementOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ExecuteStatementCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ExecuteStatementCommand)(output, context);
      }
    };
    exports.ExecuteStatementCommand = ExecuteStatementCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js
var require_ExecuteTransactionCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ExecuteTransactionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExecuteTransactionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ExecuteTransactionCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ExecuteTransactionInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ExecuteTransactionOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ExecuteTransactionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ExecuteTransactionCommand)(output, context);
      }
    };
    exports.ExecuteTransactionCommand = ExecuteTransactionCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExportTableToPointInTimeCommand.js
var require_ExportTableToPointInTimeCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExportTableToPointInTimeCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ExportTableToPointInTimeCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExportTableToPointInTimeCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ExportTableToPointInTimeCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ExportTableToPointInTimeInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ExportTableToPointInTimeOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ExportTableToPointInTimeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ExportTableToPointInTimeCommand)(output, context);
      }
    };
    exports.ExportTableToPointInTimeCommand = ExportTableToPointInTimeCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/GetItemCommand.js
var require_GetItemCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/GetItemCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var GetItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'GetItemCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetItemInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetItemOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0GetItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0GetItemCommand)(output, context);
      }
    };
    exports.GetItemCommand = GetItemCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListBackupsCommand.js
var require_ListBackupsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListBackupsCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListBackupsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListBackupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListBackupsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListBackupsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListBackupsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ListBackupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ListBackupsCommand)(output, context);
      }
    };
    exports.ListBackupsCommand = ListBackupsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListContributorInsightsCommand.js
var require_ListContributorInsightsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListContributorInsightsCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListContributorInsightsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListContributorInsightsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListContributorInsightsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListContributorInsightsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListContributorInsightsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ListContributorInsightsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ListContributorInsightsCommand)(output, context);
      }
    };
    exports.ListContributorInsightsCommand = ListContributorInsightsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListExportsCommand.js
var require_ListExportsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListExportsCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListExportsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListExportsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListExportsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListExportsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListExportsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ListExportsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ListExportsCommand)(output, context);
      }
    };
    exports.ListExportsCommand = ListExportsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListGlobalTablesCommand.js
var require_ListGlobalTablesCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListGlobalTablesCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListGlobalTablesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListGlobalTablesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListGlobalTablesCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListGlobalTablesInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListGlobalTablesOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ListGlobalTablesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ListGlobalTablesCommand)(output, context);
      }
    };
    exports.ListGlobalTablesCommand = ListGlobalTablesCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTablesCommand.js
var require_ListTablesCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTablesCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListTablesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListTablesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListTablesCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListTablesInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListTablesOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ListTablesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ListTablesCommand)(output, context);
      }
    };
    exports.ListTablesCommand = ListTablesCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTagsOfResourceCommand.js
var require_ListTagsOfResourceCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTagsOfResourceCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListTagsOfResourceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListTagsOfResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListTagsOfResourceCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListTagsOfResourceInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListTagsOfResourceOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ListTagsOfResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ListTagsOfResourceCommand)(output, context);
      }
    };
    exports.ListTagsOfResourceCommand = ListTagsOfResourceCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/PutItemCommand.js
var require_PutItemCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/PutItemCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.PutItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var PutItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'PutItemCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutItemInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutItemOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0PutItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0PutItemCommand)(output, context);
      }
    };
    exports.PutItemCommand = PutItemCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/QueryCommand.js
var require_QueryCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/QueryCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.QueryCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var QueryCommand2 = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'QueryCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.QueryInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.QueryOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0QueryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0QueryCommand)(output, context);
      }
    };
    exports.QueryCommand = QueryCommand2;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableFromBackupCommand.js
var require_RestoreTableFromBackupCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableFromBackupCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.RestoreTableFromBackupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var RestoreTableFromBackupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'RestoreTableFromBackupCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RestoreTableFromBackupInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.RestoreTableFromBackupOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0RestoreTableFromBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0RestoreTableFromBackupCommand)(output, context);
      }
    };
    exports.RestoreTableFromBackupCommand = RestoreTableFromBackupCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableToPointInTimeCommand.js
var require_RestoreTableToPointInTimeCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableToPointInTimeCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.RestoreTableToPointInTimeCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var RestoreTableToPointInTimeCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'RestoreTableToPointInTimeCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RestoreTableToPointInTimeInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.RestoreTableToPointInTimeOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0RestoreTableToPointInTimeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0RestoreTableToPointInTimeCommand)(output, context);
      }
    };
    exports.RestoreTableToPointInTimeCommand = RestoreTableToPointInTimeCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ScanCommand.js
var require_ScanCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ScanCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ScanCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ScanCommand2 = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ScanCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ScanInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ScanOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ScanCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ScanCommand)(output, context);
      }
    };
    exports.ScanCommand = ScanCommand2;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TagResourceCommand.js
var require_TagResourceCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TagResourceCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TagResourceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TagResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'TagResourceCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TagResourceInputFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0TagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0TagResourceCommand)(output, context);
      }
    };
    exports.TagResourceCommand = TagResourceCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactGetItemsCommand.js
var require_TransactGetItemsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactGetItemsCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TransactGetItemsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TransactGetItemsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'TransactGetItemsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TransactGetItemsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.TransactGetItemsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0TransactGetItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0TransactGetItemsCommand)(output, context);
      }
    };
    exports.TransactGetItemsCommand = TransactGetItemsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactWriteItemsCommand.js
var require_TransactWriteItemsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactWriteItemsCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TransactWriteItemsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TransactWriteItemsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'TransactWriteItemsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TransactWriteItemsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.TransactWriteItemsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0TransactWriteItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0TransactWriteItemsCommand)(output, context);
      }
    };
    exports.TransactWriteItemsCommand = TransactWriteItemsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UntagResourceCommand.js
var require_UntagResourceCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UntagResourceCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UntagResourceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UntagResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UntagResourceCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UntagResourceInputFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UntagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UntagResourceCommand)(output, context);
      }
    };
    exports.UntagResourceCommand = UntagResourceCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContinuousBackupsCommand.js
var require_UpdateContinuousBackupsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContinuousBackupsCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateContinuousBackupsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateContinuousBackupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateContinuousBackupsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateContinuousBackupsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateContinuousBackupsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateContinuousBackupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateContinuousBackupsCommand)(output, context);
      }
    };
    exports.UpdateContinuousBackupsCommand = UpdateContinuousBackupsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContributorInsightsCommand.js
var require_UpdateContributorInsightsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContributorInsightsCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateContributorInsightsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateContributorInsightsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateContributorInsightsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateContributorInsightsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateContributorInsightsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateContributorInsightsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateContributorInsightsCommand)(output, context);
      }
    };
    exports.UpdateContributorInsightsCommand = UpdateContributorInsightsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableCommand.js
var require_UpdateGlobalTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateGlobalTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateGlobalTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateGlobalTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateGlobalTableInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateGlobalTableOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateGlobalTableCommand)(output, context);
      }
    };
    exports.UpdateGlobalTableCommand = UpdateGlobalTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableSettingsCommand.js
var require_UpdateGlobalTableSettingsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableSettingsCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateGlobalTableSettingsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateGlobalTableSettingsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateGlobalTableSettingsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateGlobalTableSettingsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateGlobalTableSettingsOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateGlobalTableSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateGlobalTableSettingsCommand)(output, context);
      }
    };
    exports.UpdateGlobalTableSettingsCommand = UpdateGlobalTableSettingsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateItemCommand.js
var require_UpdateItemCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateItemCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateItemCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateItemInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateItemOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateItemCommand)(output, context);
      }
    };
    exports.UpdateItemCommand = UpdateItemCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableCommand.js
var require_UpdateTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateTableInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateTableOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateTableCommand)(output, context);
      }
    };
    exports.UpdateTableCommand = UpdateTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableReplicaAutoScalingCommand.js
var require_UpdateTableReplicaAutoScalingCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableReplicaAutoScalingCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateTableReplicaAutoScalingCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTableReplicaAutoScalingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateTableReplicaAutoScalingCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateTableReplicaAutoScalingInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateTableReplicaAutoScalingOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateTableReplicaAutoScalingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand)(output, context);
      }
    };
    exports.UpdateTableReplicaAutoScalingCommand = UpdateTableReplicaAutoScalingCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTimeToLiveCommand.js
var require_UpdateTimeToLiveCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTimeToLiveCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateTimeToLiveCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTimeToLiveCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateTimeToLiveCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateTimeToLiveInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateTimeToLiveOutputFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateTimeToLiveCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateTimeToLiveCommand)(output, context);
      }
    };
    exports.UpdateTimeToLiveCommand = UpdateTimeToLiveCommand;
  },
});

// node_modules/@aws-sdk/util-config-provider/node_modules/tslib/tslib.js
var require_tslib4 = __commonJS({
  'node_modules/@aws-sdk/util-config-provider/node_modules/tslib/tslib.js'(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function (factory) {
      var root =
        typeof global === 'object' ? global : typeof self === 'object' ? self : typeof this === 'object' ? this : {};
      if (typeof define === 'function' && define.amd) {
        define('tslib', ['exports'], function (exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === 'object' && typeof module2.exports === 'object') {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === 'function') {
            Object.defineProperty(exports2, '__esModule', { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function (id, v) {
          return (exports2[id] = previous ? previous(id, v) : v);
        };
      }
    })(function (exporter) {
      var extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      __extends = function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
      __assign =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function (decorators, target, key, desc) {
        var c = arguments.length,
          r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
          d;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function (thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g;
        return (
          (g = { next: verb(0), throw: verb(1), return: verb(2) }),
          typeof Symbol === 'function' &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError('Generator is already executing.');
          while (_)
            try {
              if (
                ((f = 1),
                y &&
                  (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function (m, o) {
        for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
      };
      __createBinding = Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          };
      __values = function (o) {
        var s = typeof Symbol === 'function' && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === 'number')
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            },
          };
        throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      };
      __read = function (o, n) {
        var m = typeof Symbol === 'function' && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i['return'])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
        return r;
      };
      __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function (v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      };
      __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = {}),
          verb('next'),
          verb('throw'),
          verb('return'),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        function verb(n) {
          if (g[n])
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume('next', value);
        }
        function reject(value) {
          resume('throw', value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function (o) {
        var i, p;
        return (
          (i = {}),
          verb('next'),
          verb('throw', function (e) {
            throw e;
          }),
          verb('return'),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p) ? { value: __await(o[n](v)), done: n === 'return' } : f ? f(v) : v;
              }
            : f;
        }
      };
      __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, 'raw', { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          };
      __importStar = function (mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      __importDefault = function (mod2) {
        return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
      };
      __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot read private member from an object whose class did not declare it');
        return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot write private member to an object whose class did not declare it');
        return kind === 'a' ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== 'object' && typeof receiver !== 'function'))
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === 'function' ? receiver === state : state.has(receiver);
      };
      exporter('__extends', __extends);
      exporter('__assign', __assign);
      exporter('__rest', __rest);
      exporter('__decorate', __decorate);
      exporter('__param', __param);
      exporter('__metadata', __metadata);
      exporter('__awaiter', __awaiter);
      exporter('__generator', __generator);
      exporter('__exportStar', __exportStar);
      exporter('__createBinding', __createBinding);
      exporter('__values', __values);
      exporter('__read', __read);
      exporter('__spread', __spread);
      exporter('__spreadArrays', __spreadArrays);
      exporter('__spreadArray', __spreadArray);
      exporter('__await', __await);
      exporter('__asyncGenerator', __asyncGenerator);
      exporter('__asyncDelegator', __asyncDelegator);
      exporter('__asyncValues', __asyncValues);
      exporter('__makeTemplateObject', __makeTemplateObject);
      exporter('__importStar', __importStar);
      exporter('__importDefault', __importDefault);
      exporter('__classPrivateFieldGet', __classPrivateFieldGet);
      exporter('__classPrivateFieldSet', __classPrivateFieldSet);
      exporter('__classPrivateFieldIn', __classPrivateFieldIn);
    });
  },
});

// node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js
var require_booleanSelector = __commonJS({
  'node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.booleanSelector = exports.SelectorType = void 0;
    var SelectorType;
    (function (SelectorType2) {
      SelectorType2['ENV'] = 'env';
      SelectorType2['CONFIG'] = 'shared config entry';
    })((SelectorType = exports.SelectorType || (exports.SelectorType = {})));
    var booleanSelector = (obj, key, type) => {
      if (!(key in obj)) return void 0;
      if (obj[key] === 'true') return true;
      if (obj[key] === 'false') return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    };
    exports.booleanSelector = booleanSelector;
  },
});

// node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  'node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib4();
    tslib_1.__exportStar(require_booleanSelector(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var require_NodeUseDualstackEndpointConfigOptions = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS =
      exports.DEFAULT_USE_DUALSTACK_ENDPOINT =
      exports.CONFIG_USE_DUALSTACK_ENDPOINT =
      exports.ENV_USE_DUALSTACK_ENDPOINT =
        void 0;
    var util_config_provider_1 = require_dist_cjs5();
    exports.ENV_USE_DUALSTACK_ENDPOINT = 'AWS_USE_DUALSTACK_ENDPOINT';
    exports.CONFIG_USE_DUALSTACK_ENDPOINT = 'use_dualstack_endpoint';
    exports.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) =>
        (0, util_config_provider_1.booleanSelector)(
          env2,
          exports.ENV_USE_DUALSTACK_ENDPOINT,
          util_config_provider_1.SelectorType.ENV
        ),
      configFileSelector: (profile) =>
        (0, util_config_provider_1.booleanSelector)(
          profile,
          exports.CONFIG_USE_DUALSTACK_ENDPOINT,
          util_config_provider_1.SelectorType.CONFIG
        ),
      default: false,
    };
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var require_NodeUseFipsEndpointConfigOptions = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS =
      exports.DEFAULT_USE_FIPS_ENDPOINT =
      exports.CONFIG_USE_FIPS_ENDPOINT =
      exports.ENV_USE_FIPS_ENDPOINT =
        void 0;
    var util_config_provider_1 = require_dist_cjs5();
    exports.ENV_USE_FIPS_ENDPOINT = 'AWS_USE_FIPS_ENDPOINT';
    exports.CONFIG_USE_FIPS_ENDPOINT = 'use_fips_endpoint';
    exports.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) =>
        (0, util_config_provider_1.booleanSelector)(
          env2,
          exports.ENV_USE_FIPS_ENDPOINT,
          util_config_provider_1.SelectorType.ENV
        ),
      configFileSelector: (profile) =>
        (0, util_config_provider_1.booleanSelector)(
          profile,
          exports.CONFIG_USE_FIPS_ENDPOINT,
          util_config_provider_1.SelectorType.CONFIG
        ),
      default: false,
    };
  },
});

// node_modules/@aws-sdk/util-middleware/node_modules/tslib/tslib.js
var require_tslib5 = __commonJS({
  'node_modules/@aws-sdk/util-middleware/node_modules/tslib/tslib.js'(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function (factory) {
      var root =
        typeof global === 'object' ? global : typeof self === 'object' ? self : typeof this === 'object' ? this : {};
      if (typeof define === 'function' && define.amd) {
        define('tslib', ['exports'], function (exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === 'object' && typeof module2.exports === 'object') {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === 'function') {
            Object.defineProperty(exports2, '__esModule', { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function (id, v) {
          return (exports2[id] = previous ? previous(id, v) : v);
        };
      }
    })(function (exporter) {
      var extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      __extends = function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
      __assign =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function (decorators, target, key, desc) {
        var c = arguments.length,
          r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
          d;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function (thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g;
        return (
          (g = { next: verb(0), throw: verb(1), return: verb(2) }),
          typeof Symbol === 'function' &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError('Generator is already executing.');
          while (_)
            try {
              if (
                ((f = 1),
                y &&
                  (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function (m, o) {
        for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
      };
      __createBinding = Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          };
      __values = function (o) {
        var s = typeof Symbol === 'function' && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === 'number')
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            },
          };
        throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      };
      __read = function (o, n) {
        var m = typeof Symbol === 'function' && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i['return'])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
        return r;
      };
      __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function (v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      };
      __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = {}),
          verb('next'),
          verb('throw'),
          verb('return'),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        function verb(n) {
          if (g[n])
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume('next', value);
        }
        function reject(value) {
          resume('throw', value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function (o) {
        var i, p;
        return (
          (i = {}),
          verb('next'),
          verb('throw', function (e) {
            throw e;
          }),
          verb('return'),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p) ? { value: __await(o[n](v)), done: n === 'return' } : f ? f(v) : v;
              }
            : f;
        }
      };
      __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, 'raw', { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          };
      __importStar = function (mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      __importDefault = function (mod2) {
        return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
      };
      __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot read private member from an object whose class did not declare it');
        return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot write private member to an object whose class did not declare it');
        return kind === 'a' ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== 'object' && typeof receiver !== 'function'))
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === 'function' ? receiver === state : state.has(receiver);
      };
      exporter('__extends', __extends);
      exporter('__assign', __assign);
      exporter('__rest', __rest);
      exporter('__decorate', __decorate);
      exporter('__param', __param);
      exporter('__metadata', __metadata);
      exporter('__awaiter', __awaiter);
      exporter('__generator', __generator);
      exporter('__exportStar', __exportStar);
      exporter('__createBinding', __createBinding);
      exporter('__values', __values);
      exporter('__read', __read);
      exporter('__spread', __spread);
      exporter('__spreadArrays', __spreadArrays);
      exporter('__spreadArray', __spreadArray);
      exporter('__await', __await);
      exporter('__asyncGenerator', __asyncGenerator);
      exporter('__asyncDelegator', __asyncDelegator);
      exporter('__asyncValues', __asyncValues);
      exporter('__makeTemplateObject', __makeTemplateObject);
      exporter('__importStar', __importStar);
      exporter('__importDefault', __importDefault);
      exporter('__classPrivateFieldGet', __classPrivateFieldGet);
      exporter('__classPrivateFieldSet', __classPrivateFieldSet);
      exporter('__classPrivateFieldIn', __classPrivateFieldIn);
    });
  },
});

// node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js
var require_normalizeProvider = __commonJS({
  'node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.normalizeProvider = void 0;
    var normalizeProvider = (input) => {
      if (typeof input === 'function') return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
    exports.normalizeProvider = normalizeProvider;
  },
});

// node_modules/@aws-sdk/util-middleware/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  'node_modules/@aws-sdk/util-middleware/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib5();
    tslib_1.__exportStar(require_normalizeProvider(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js
var require_resolveCustomEndpointsConfig = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveCustomEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var resolveCustomEndpointsConfig = (input) => {
      var _a;
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(
          typeof endpoint === 'string' ? urlParser(endpoint) : endpoint
        ),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)(input.useDualstackEndpoint),
      };
    };
    exports.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js
var require_getEndpointFromRegion = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error('Invalid region in client config');
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } =
        (_a = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) !== null &&
        _a !== void 0
          ? _a
          : {};
      if (!hostname) {
        throw new Error('Cannot resolve hostname from client config');
      }
      return input.urlParser(`${tls ? 'https:' : 'http:'}//${hostname}`);
    };
    exports.getEndpointFromRegion = getEndpointFromRegion;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js
var require_resolveEndpointsConfig = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var getEndpointFromRegion_1 = require_getEndpointFromRegion();
    var resolveEndpointsConfig = (input) => {
      var _a;
      const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)(input.useDualstackEndpoint);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: endpoint
          ? (0, util_middleware_1.normalizeProvider)(typeof endpoint === 'string' ? urlParser(endpoint) : endpoint)
          : () =>
              (0, getEndpointFromRegion_1.getEndpointFromRegion)({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: endpoint ? true : false,
        useDualstackEndpoint,
      };
    };
    exports.resolveEndpointsConfig = resolveEndpointsConfig;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js
var require_endpointsConfig = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_NodeUseDualstackEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig(), exports);
    tslib_1.__exportStar(require_resolveEndpointsConfig(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js
var require_config = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_REGION_CONFIG_FILE_OPTIONS =
      exports.NODE_REGION_CONFIG_OPTIONS =
      exports.REGION_INI_NAME =
      exports.REGION_ENV_NAME =
        void 0;
    exports.REGION_ENV_NAME = 'AWS_REGION';
    exports.REGION_INI_NAME = 'region';
    exports.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[exports.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports.REGION_INI_NAME],
      default: () => {
        throw new Error('Region is missing');
      },
    };
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: 'credentials',
    };
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js
var require_isFipsRegion = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isFipsRegion = void 0;
    var isFipsRegion = (region) =>
      typeof region === 'string' && (region.startsWith('fips-') || region.endsWith('-fips'));
    exports.isFipsRegion = isFipsRegion;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js
var require_getRealRegion = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion();
    var getRealRegion = (region) =>
      (0, isFipsRegion_1.isFipsRegion)(region)
        ? ['fips-aws-global', 'aws-fips'].includes(region)
          ? 'us-east-1'
          : region.replace(/fips-(dkr-|prod-)?|-fips/, '')
        : region;
    exports.getRealRegion = getRealRegion;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js
var require_resolveRegionConfig = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion();
    var isFipsRegion_1 = require_isFipsRegion();
    var resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error('Region is missing');
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === 'string') {
            return (0, getRealRegion_1.getRealRegion)(region);
          }
          const providedRegion = await region();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === 'string' ? region : await region();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint === 'boolean' ? Promise.resolve(useFipsEndpoint) : useFipsEndpoint();
        },
      };
    };
    exports.resolveRegionConfig = resolveRegionConfig;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js
var require_regionConfig = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_config(), exports);
    tslib_1.__exportStar(require_resolveRegionConfig(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js
var require_PartitionHash = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js
var require_RegionHash = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js
var require_getHostnameFromVariants = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(
        ({ tags }) => useFipsEndpoint === tags.includes('fips') && useDualstackEndpoint === tags.includes('dualstack')
      )) === null || _a === void 0
        ? void 0
        : _a.hostname;
    };
    exports.getHostnameFromVariants = getHostnameFromVariants;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js
var require_getResolvedHostname = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getResolvedHostname = void 0;
    var getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) =>
      regionHostname
        ? regionHostname
        : partitionHostname
        ? partitionHostname.replace('{region}', resolvedRegion)
        : void 0;
    exports.getResolvedHostname = getResolvedHostname;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js
var require_getResolvedPartition = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getResolvedPartition = void 0;
    var getResolvedPartition = (region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region))) !==
        null && _a !== void 0
        ? _a
        : 'aws';
    };
    exports.getResolvedPartition = getResolvedPartition;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js
var require_getResolvedSigningRegion = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace('\\\\', '\\').replace(/^\^/g, '\\.').replace(/\$$/g, '\\.');
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    };
    exports.getResolvedSigningRegion = getResolvedSigningRegion;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js
var require_getRegionInfo = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants();
    var getResolvedHostname_1 = require_getResolvedHostname();
    var getResolvedPartition_1 = require_getResolvedPartition();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion();
    var getRegionInfo = (
      region,
      { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash }
    ) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = (0, getResolvedPartition_1.getResolvedPartition)(region, { partitionHash });
      const resolvedRegion =
        region in regionHash
          ? region
          : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null &&
            _b !== void 0
          ? _b
          : region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)(
        (_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants,
        hostnameOptions
      );
      const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)(
        (_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants,
        hostnameOptions
      );
      const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, {
        regionHostname,
        partitionHostname,
      });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint,
      });
      return {
        partition,
        signingService,
        hostname,
        ...(signingRegion && { signingRegion }),
        ...(((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {
          signingService: regionHash[resolvedRegion].signingService,
        }),
      };
    };
    exports.getRegionInfo = getRegionInfo;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js
var require_regionInfo = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_PartitionHash(), exports);
    tslib_1.__exportStar(require_RegionHash(), exports);
    tslib_1.__exportStar(require_getRegionInfo(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/config-resolver/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_endpointsConfig(), exports);
    tslib_1.__exportStar(require_regionConfig(), exports);
    tslib_1.__exportStar(require_regionInfo(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getContentLengthPlugin = exports.contentLengthMiddlewareOptions = exports.contentLengthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var CONTENT_LENGTH_HEADER = 'content-length';
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (
            body &&
            Object.keys(headers)
              .map((str) => str.toLowerCase())
              .indexOf(CONTENT_LENGTH_HEADER) === -1
          ) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length),
              };
            } catch (error) {}
          }
        }
        return next({
          ...args,
          request,
        });
      };
    }
    exports.contentLengthMiddleware = contentLengthMiddleware;
    exports.contentLengthMiddlewareOptions = {
      step: 'build',
      tags: ['SET_CONTENT_LENGTH', 'CONTENT_LENGTH'],
      name: 'contentLengthMiddleware',
      override: true,
    };
    var getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports.contentLengthMiddlewareOptions);
      },
    });
    exports.getContentLengthPlugin = getContentLengthPlugin;
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/node_modules/tslib/tslib.js
var require_tslib6 = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/node_modules/tslib/tslib.js'(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function (factory) {
      var root =
        typeof global === 'object' ? global : typeof self === 'object' ? self : typeof this === 'object' ? this : {};
      if (typeof define === 'function' && define.amd) {
        define('tslib', ['exports'], function (exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === 'object' && typeof module2.exports === 'object') {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === 'function') {
            Object.defineProperty(exports2, '__esModule', { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function (id, v) {
          return (exports2[id] = previous ? previous(id, v) : v);
        };
      }
    })(function (exporter) {
      var extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      __extends = function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
      __assign =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function (decorators, target, key, desc) {
        var c = arguments.length,
          r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
          d;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function (thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g;
        return (
          (g = { next: verb(0), throw: verb(1), return: verb(2) }),
          typeof Symbol === 'function' &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError('Generator is already executing.');
          while (_)
            try {
              if (
                ((f = 1),
                y &&
                  (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function (m, o) {
        for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
      };
      __createBinding = Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          };
      __values = function (o) {
        var s = typeof Symbol === 'function' && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === 'number')
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            },
          };
        throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      };
      __read = function (o, n) {
        var m = typeof Symbol === 'function' && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i['return'])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
        return r;
      };
      __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function (v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      };
      __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = {}),
          verb('next'),
          verb('throw'),
          verb('return'),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        function verb(n) {
          if (g[n])
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume('next', value);
        }
        function reject(value) {
          resume('throw', value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function (o) {
        var i, p;
        return (
          (i = {}),
          verb('next'),
          verb('throw', function (e) {
            throw e;
          }),
          verb('return'),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p) ? { value: __await(o[n](v)), done: n === 'return' } : f ? f(v) : v;
              }
            : f;
        }
      };
      __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, 'raw', { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          };
      __importStar = function (mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      __importDefault = function (mod2) {
        return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
      };
      __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot read private member from an object whose class did not declare it');
        return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot write private member to an object whose class did not declare it');
        return kind === 'a' ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== 'object' && typeof receiver !== 'function'))
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === 'function' ? receiver === state : state.has(receiver);
      };
      exporter('__extends', __extends);
      exporter('__assign', __assign);
      exporter('__rest', __rest);
      exporter('__decorate', __decorate);
      exporter('__param', __param);
      exporter('__metadata', __metadata);
      exporter('__awaiter', __awaiter);
      exporter('__generator', __generator);
      exporter('__exportStar', __exportStar);
      exporter('__createBinding', __createBinding);
      exporter('__values', __values);
      exporter('__read', __read);
      exporter('__spread', __spread);
      exporter('__spreadArrays', __spreadArrays);
      exporter('__spreadArray', __spreadArray);
      exporter('__await', __await);
      exporter('__asyncGenerator', __asyncGenerator);
      exporter('__asyncDelegator', __asyncDelegator);
      exporter('__asyncValues', __asyncValues);
      exporter('__makeTemplateObject', __makeTemplateObject);
      exporter('__importStar', __importStar);
      exporter('__importDefault', __importDefault);
      exporter('__classPrivateFieldGet', __classPrivateFieldGet);
      exporter('__classPrivateFieldSet', __classPrivateFieldSet);
      exporter('__classPrivateFieldIn', __classPrivateFieldIn);
    });
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/configurations.js
var require_configurations = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/configurations.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = void 0;
    var ENV_ENDPOINT_DISCOVERY = ['AWS_ENABLE_ENDPOINT_DISCOVERY', 'AWS_ENDPOINT_DISCOVERY_ENABLED'];
    var CONFIG_ENDPOINT_DISCOVERY = 'endpoint_discovery_enabled';
    var isFalsy = (value) => ['false', '0'].indexOf(value) >= 0;
    exports.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => {
        for (let i = 0; i < ENV_ENDPOINT_DISCOVERY.length; i++) {
          const envKey = ENV_ENDPOINT_DISCOVERY[i];
          if (envKey in env2) {
            const value = env2[envKey];
            if (value === '') {
              throw Error(`Environment variable ${envKey} can't be empty of undefined, got "${value}"`);
            }
            return !isFalsy(value);
          }
        }
      },
      configFileSelector: (profile) => {
        if (CONFIG_ENDPOINT_DISCOVERY in profile) {
          const value = profile[CONFIG_ENDPOINT_DISCOVERY];
          if (value === void 0) {
            throw Error(`Shared config entry ${CONFIG_ENDPOINT_DISCOVERY} can't be undefined, got "${value}"`);
          }
          return !isFalsy(value);
        }
      },
      default: void 0,
    };
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler2 = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest2 = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HttpRequest = void 0;
    var HttpRequest = class {
      constructor(options) {
        this.method = options.method || 'GET';
        this.hostname = options.hostname || 'localhost';
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol
          ? options.protocol.slice(-1) !== ':'
            ? `${options.protocol}:`
            : options.protocol
          : 'https:';
        this.path = options.path ? (options.path.charAt(0) !== '/' ? `/${options.path}` : options.path) : '/';
      }
      static isInstance(request) {
        if (!request) return false;
        const req = request;
        return (
          'method' in req &&
          'protocol' in req &&
          'hostname' in req &&
          'path' in req &&
          typeof req['query'] === 'object' &&
          typeof req['headers'] === 'object'
        );
      }
      clone() {
        const cloned = new HttpRequest({
          ...this,
          headers: { ...this.headers },
        });
        if (cloned.query) cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param,
        };
      }, {});
    }
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse2 = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response) return false;
        const resp = response;
        return typeof resp.statusCode === 'number' && typeof resp.headers === 'object';
      }
    };
    exports.HttpResponse = HttpResponse;
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname2 = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports.isValidHostname = isValidHostname;
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/node_modules/@aws-sdk/protocol-http/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/node_modules/@aws-sdk/protocol-http/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib6();
    tslib_1.__exportStar(require_httpHandler2(), exports);
    tslib_1.__exportStar(require_httpRequest2(), exports);
    tslib_1.__exportStar(require_httpResponse2(), exports);
    tslib_1.__exportStar(require_isValidHostname2(), exports);
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getCacheKey.js
var require_getCacheKey = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getCacheKey.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCacheKey = void 0;
    var getCacheKey = async (commandName, config, options) => {
      const { accessKeyId } = await config.credentials();
      const { identifiers } = options;
      return JSON.stringify({
        ...(accessKeyId && { accessKeyId }),
        ...(identifiers && {
          commandName,
          identifiers: Object.entries(identifiers)
            .sort()
            .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {}),
        }),
      });
    };
    exports.getCacheKey = getCacheKey;
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/updateDiscoveredEndpointInCache.js
var require_updateDiscoveredEndpointInCache = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/updateDiscoveredEndpointInCache.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.updateDiscoveredEndpointInCache = void 0;
    var requestQueue = {};
    var updateDiscoveredEndpointInCache = async (config, options) =>
      new Promise((resolve, reject) => {
        const { endpointCache } = config;
        const { cacheKey, commandName, identifiers } = options;
        const endpoints = endpointCache.get(cacheKey);
        if (endpoints && endpoints.length === 1 && endpoints[0].Address === '') {
          if (options.isDiscoveredEndpointRequired) {
            if (!requestQueue[cacheKey]) requestQueue[cacheKey] = [];
            requestQueue[cacheKey].push({ resolve, reject });
          } else {
            resolve();
          }
        } else if (endpoints && endpoints.length > 0) {
          resolve();
        } else {
          const placeholderEndpoints = [{ Address: '', CachePeriodInMinutes: 1 }];
          endpointCache.set(cacheKey, placeholderEndpoints);
          const command = new options.endpointDiscoveryCommandCtor({
            Operation: commandName.slice(0, -7),
            Identifiers: identifiers,
          });
          const handler2 = command.resolveMiddleware(options.clientStack, config, options.options);
          handler2(command)
            .then((result) => {
              endpointCache.set(cacheKey, result.output.Endpoints);
              if (requestQueue[cacheKey]) {
                requestQueue[cacheKey].forEach(({ resolve: resolve2 }) => {
                  resolve2();
                });
                delete requestQueue[cacheKey];
              }
              resolve();
            })
            .catch((error) => {
              var _a;
              if (
                error.name === 'InvalidEndpointException' ||
                ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 421
              ) {
                endpointCache.delete(cacheKey);
              }
              const errorToThrow = Object.assign(
                new Error(
                  `The operation to discover endpoint failed. Please retry, or provide a custom endpoint and disable endpoint discovery to proceed.`
                ),
                { reason: error }
              );
              if (requestQueue[cacheKey]) {
                requestQueue[cacheKey].forEach(({ reject: reject2 }) => {
                  reject2(errorToThrow);
                });
                delete requestQueue[cacheKey];
              }
              if (options.isDiscoveredEndpointRequired) {
                reject(errorToThrow);
              } else {
                endpointCache.set(cacheKey, placeholderEndpoints);
                resolve();
              }
            });
        }
      });
    exports.updateDiscoveredEndpointInCache = updateDiscoveredEndpointInCache;
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/endpointDiscoveryMiddleware.js
var require_endpointDiscoveryMiddleware = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/endpointDiscoveryMiddleware.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.endpointDiscoveryMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs9();
    var getCacheKey_1 = require_getCacheKey();
    var updateDiscoveredEndpointInCache_1 = require_updateDiscoveredEndpointInCache();
    var endpointDiscoveryMiddleware = (config, middlewareConfig) => (next, context) => async (args) => {
      if (config.isCustomEndpoint) {
        if (config.isClientEndpointDiscoveryEnabled) {
          throw new Error(`Custom endpoint is supplied; endpointDiscoveryEnabled must not be true.`);
        }
        return next(args);
      }
      const { endpointDiscoveryCommandCtor } = config;
      const { isDiscoveredEndpointRequired, identifiers } = middlewareConfig;
      const { clientName, commandName } = context;
      const isEndpointDiscoveryEnabled = await config.endpointDiscoveryEnabled();
      const cacheKey = await (0, getCacheKey_1.getCacheKey)(commandName, config, { identifiers });
      if (isDiscoveredEndpointRequired) {
        if (isEndpointDiscoveryEnabled === false) {
          throw new Error(
            `Endpoint Discovery is disabled but ${commandName} on ${clientName} requires it. Please check your configurations.`
          );
        }
        await (0, updateDiscoveredEndpointInCache_1.updateDiscoveredEndpointInCache)(config, {
          ...middlewareConfig,
          commandName,
          cacheKey,
          endpointDiscoveryCommandCtor,
        });
      } else if (isEndpointDiscoveryEnabled) {
        (0, updateDiscoveredEndpointInCache_1.updateDiscoveredEndpointInCache)(config, {
          ...middlewareConfig,
          commandName,
          cacheKey,
          endpointDiscoveryCommandCtor,
        });
      }
      const { request } = args;
      if (cacheKey && protocol_http_1.HttpRequest.isInstance(request)) {
        const endpoint = config.endpointCache.getEndpoint(cacheKey);
        if (endpoint) {
          request.hostname = endpoint;
        }
      }
      return next(args);
    };
    exports.endpointDiscoveryMiddleware = endpointDiscoveryMiddleware;
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getEndpointDiscoveryPlugin.js
var require_getEndpointDiscoveryPlugin = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getEndpointDiscoveryPlugin.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointDiscoveryOptionalPlugin =
      exports.getEndpointDiscoveryRequiredPlugin =
      exports.getEndpointDiscoveryPlugin =
      exports.endpointDiscoveryMiddlewareOptions =
        void 0;
    var endpointDiscoveryMiddleware_1 = require_endpointDiscoveryMiddleware();
    exports.endpointDiscoveryMiddlewareOptions = {
      name: 'endpointDiscoveryMiddleware',
      step: 'build',
      tags: ['ENDPOINT_DISCOVERY'],
      override: true,
    };
    var getEndpointDiscoveryPlugin = (pluginConfig, middlewareConfig) => ({
      applyToStack: (commandStack) => {
        commandStack.add(
          (0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(pluginConfig, middlewareConfig),
          exports.endpointDiscoveryMiddlewareOptions
        );
      },
    });
    exports.getEndpointDiscoveryPlugin = getEndpointDiscoveryPlugin;
    var getEndpointDiscoveryRequiredPlugin = (pluginConfig, middlewareConfig) => ({
      applyToStack: (commandStack) => {
        commandStack.add(
          (0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(pluginConfig, {
            ...middlewareConfig,
            isDiscoveredEndpointRequired: true,
          }),
          exports.endpointDiscoveryMiddlewareOptions
        );
      },
    });
    exports.getEndpointDiscoveryRequiredPlugin = getEndpointDiscoveryRequiredPlugin;
    var getEndpointDiscoveryOptionalPlugin = (pluginConfig, middlewareConfig) => ({
      applyToStack: (commandStack) => {
        commandStack.add(
          (0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(pluginConfig, {
            ...middlewareConfig,
            isDiscoveredEndpointRequired: false,
          }),
          exports.endpointDiscoveryMiddlewareOptions
        );
      },
    });
    exports.getEndpointDiscoveryOptionalPlugin = getEndpointDiscoveryOptionalPlugin;
  },
});

// node_modules/@aws-sdk/endpoint-cache/node_modules/tslib/tslib.js
var require_tslib7 = __commonJS({
  'node_modules/@aws-sdk/endpoint-cache/node_modules/tslib/tslib.js'(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function (factory) {
      var root =
        typeof global === 'object' ? global : typeof self === 'object' ? self : typeof this === 'object' ? this : {};
      if (typeof define === 'function' && define.amd) {
        define('tslib', ['exports'], function (exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === 'object' && typeof module2.exports === 'object') {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === 'function') {
            Object.defineProperty(exports2, '__esModule', { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function (id, v) {
          return (exports2[id] = previous ? previous(id, v) : v);
        };
      }
    })(function (exporter) {
      var extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      __extends = function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
      __assign =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function (decorators, target, key, desc) {
        var c = arguments.length,
          r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
          d;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function (thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g;
        return (
          (g = { next: verb(0), throw: verb(1), return: verb(2) }),
          typeof Symbol === 'function' &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError('Generator is already executing.');
          while (_)
            try {
              if (
                ((f = 1),
                y &&
                  (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function (m, o) {
        for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
      };
      __createBinding = Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          };
      __values = function (o) {
        var s = typeof Symbol === 'function' && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === 'number')
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            },
          };
        throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      };
      __read = function (o, n) {
        var m = typeof Symbol === 'function' && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i['return'])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
        return r;
      };
      __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function (v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      };
      __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = {}),
          verb('next'),
          verb('throw'),
          verb('return'),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        function verb(n) {
          if (g[n])
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume('next', value);
        }
        function reject(value) {
          resume('throw', value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function (o) {
        var i, p;
        return (
          (i = {}),
          verb('next'),
          verb('throw', function (e) {
            throw e;
          }),
          verb('return'),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p) ? { value: __await(o[n](v)), done: n === 'return' } : f ? f(v) : v;
              }
            : f;
        }
      };
      __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, 'raw', { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          };
      __importStar = function (mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      __importDefault = function (mod2) {
        return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
      };
      __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot read private member from an object whose class did not declare it');
        return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot write private member to an object whose class did not declare it');
        return kind === 'a' ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== 'object' && typeof receiver !== 'function'))
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === 'function' ? receiver === state : state.has(receiver);
      };
      exporter('__extends', __extends);
      exporter('__assign', __assign);
      exporter('__rest', __rest);
      exporter('__decorate', __decorate);
      exporter('__param', __param);
      exporter('__metadata', __metadata);
      exporter('__awaiter', __awaiter);
      exporter('__generator', __generator);
      exporter('__exportStar', __exportStar);
      exporter('__createBinding', __createBinding);
      exporter('__values', __values);
      exporter('__read', __read);
      exporter('__spread', __spread);
      exporter('__spreadArrays', __spreadArrays);
      exporter('__spreadArray', __spreadArray);
      exporter('__await', __await);
      exporter('__asyncGenerator', __asyncGenerator);
      exporter('__asyncDelegator', __asyncDelegator);
      exporter('__asyncValues', __asyncValues);
      exporter('__makeTemplateObject', __makeTemplateObject);
      exporter('__importStar', __importStar);
      exporter('__importDefault', __importDefault);
      exporter('__classPrivateFieldGet', __classPrivateFieldGet);
      exporter('__classPrivateFieldSet', __classPrivateFieldSet);
      exporter('__classPrivateFieldIn', __classPrivateFieldIn);
    });
  },
});

// node_modules/@aws-sdk/endpoint-cache/dist-cjs/Endpoint.js
var require_Endpoint = __commonJS({
  'node_modules/@aws-sdk/endpoint-cache/dist-cjs/Endpoint.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/obliterator/iterator.js
var require_iterator = __commonJS({
  'node_modules/obliterator/iterator.js'(exports, module2) {
    function Iterator(next) {
      Object.defineProperty(this, '_next', {
        writable: false,
        enumerable: false,
        value: next,
      });
      this.done = false;
    }
    Iterator.prototype.next = function () {
      if (this.done) return { done: true };
      var step = this._next();
      if (step.done) this.done = true;
      return step;
    };
    if (typeof Symbol !== 'undefined')
      Iterator.prototype[Symbol.iterator] = function () {
        return this;
      };
    Iterator.of = function () {
      var args = arguments,
        l = args.length,
        i = 0;
      return new Iterator(function () {
        if (i >= l) return { done: true };
        return { done: false, value: args[i++] };
      });
    };
    Iterator.empty = function () {
      var iterator = new Iterator(null);
      iterator.done = true;
      return iterator;
    };
    Iterator.is = function (value) {
      if (value instanceof Iterator) return true;
      return typeof value === 'object' && value !== null && typeof value.next === 'function';
    };
    module2.exports = Iterator;
  },
});

// node_modules/obliterator/foreach.js
var require_foreach = __commonJS({
  'node_modules/obliterator/foreach.js'(exports, module2) {
    var ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== 'undefined';
    var SYMBOL_SUPPORT = typeof Symbol !== 'undefined';
    function forEach(iterable, callback) {
      var iterator, k, i, l, s;
      if (!iterable) throw new Error('obliterator/forEach: invalid iterable.');
      if (typeof callback !== 'function') throw new Error('obliterator/forEach: expecting a callback.');
      if (
        Array.isArray(iterable) ||
        (ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable)) ||
        typeof iterable === 'string' ||
        iterable.toString() === '[object Arguments]'
      ) {
        for (i = 0, l = iterable.length; i < l; i++) callback(iterable[i], i);
        return;
      }
      if (typeof iterable.forEach === 'function') {
        iterable.forEach(callback);
        return;
      }
      if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== 'function') {
        iterable = iterable[Symbol.iterator]();
      }
      if (typeof iterable.next === 'function') {
        iterator = iterable;
        i = 0;
        while (((s = iterator.next()), s.done !== true)) {
          callback(s.value, i);
          i++;
        }
        return;
      }
      for (k in iterable) {
        if (iterable.hasOwnProperty(k)) {
          callback(iterable[k], k);
        }
      }
      return;
    }
    forEach.forEachWithNullKeys = function (iterable, callback) {
      var iterator, k, i, l, s;
      if (!iterable) throw new Error('obliterator/forEachWithNullKeys: invalid iterable.');
      if (typeof callback !== 'function') throw new Error('obliterator/forEachWithNullKeys: expecting a callback.');
      if (
        Array.isArray(iterable) ||
        (ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable)) ||
        typeof iterable === 'string' ||
        iterable.toString() === '[object Arguments]'
      ) {
        for (i = 0, l = iterable.length; i < l; i++) callback(iterable[i], null);
        return;
      }
      if (iterable instanceof Set) {
        iterable.forEach(function (value) {
          callback(value, null);
        });
        return;
      }
      if (typeof iterable.forEach === 'function') {
        iterable.forEach(callback);
        return;
      }
      if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== 'function') {
        iterable = iterable[Symbol.iterator]();
      }
      if (typeof iterable.next === 'function') {
        iterator = iterable;
        i = 0;
        while (((s = iterator.next()), s.done !== true)) {
          callback(s.value, null);
          i++;
        }
        return;
      }
      for (k in iterable) {
        if (iterable.hasOwnProperty(k)) {
          callback(iterable[k], k);
        }
      }
      return;
    };
    module2.exports = forEach;
  },
});

// node_modules/mnemonist/utils/typed-arrays.js
var require_typed_arrays = __commonJS({
  'node_modules/mnemonist/utils/typed-arrays.js'(exports) {
    var MAX_8BIT_INTEGER = Math.pow(2, 8) - 1;
    var MAX_16BIT_INTEGER = Math.pow(2, 16) - 1;
    var MAX_32BIT_INTEGER = Math.pow(2, 32) - 1;
    var MAX_SIGNED_8BIT_INTEGER = Math.pow(2, 7) - 1;
    var MAX_SIGNED_16BIT_INTEGER = Math.pow(2, 15) - 1;
    var MAX_SIGNED_32BIT_INTEGER = Math.pow(2, 31) - 1;
    exports.getPointerArray = function (size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_8BIT_INTEGER) return Uint8Array;
      if (maxIndex <= MAX_16BIT_INTEGER) return Uint16Array;
      if (maxIndex <= MAX_32BIT_INTEGER) return Uint32Array;
      return Float64Array;
    };
    exports.getSignedPointerArray = function (size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_SIGNED_8BIT_INTEGER) return Int8Array;
      if (maxIndex <= MAX_SIGNED_16BIT_INTEGER) return Int16Array;
      if (maxIndex <= MAX_SIGNED_32BIT_INTEGER) return Int32Array;
      return Float64Array;
    };
    exports.getNumberType = function (value) {
      if (value === (value | 0)) {
        if (Math.sign(value) === -1) {
          if (value <= 127 && value >= -128) return Int8Array;
          if (value <= 32767 && value >= -32768) return Int16Array;
          return Int32Array;
        } else {
          if (value <= 255) return Uint8Array;
          if (value <= 65535) return Uint16Array;
          return Uint32Array;
        }
      }
      return Float64Array;
    };
    var TYPE_PRIORITY = {
      Uint8Array: 1,
      Int8Array: 2,
      Uint16Array: 3,
      Int16Array: 4,
      Uint32Array: 5,
      Int32Array: 6,
      Float32Array: 7,
      Float64Array: 8,
    };
    exports.getMinimalRepresentation = function (array, getter) {
      var maxType = null,
        maxPriority = 0,
        p,
        t,
        v,
        i,
        l;
      for (i = 0, l = array.length; i < l; i++) {
        v = getter ? getter(array[i]) : array[i];
        t = exports.getNumberType(v);
        p = TYPE_PRIORITY[t.name];
        if (p > maxPriority) {
          maxPriority = p;
          maxType = t;
        }
      }
      return maxType;
    };
    exports.isTypedArray = function (value) {
      return typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView(value);
    };
    exports.concat = function () {
      var length = 0,
        i,
        o,
        l;
      for (i = 0, l = arguments.length; i < l; i++) length += arguments[i].length;
      var array = new arguments[0].constructor(length);
      for (i = 0, o = 0; i < l; i++) {
        array.set(arguments[i], o);
        o += arguments[i].length;
      }
      return array;
    };
    exports.indices = function (length) {
      var PointerArray = exports.getPointerArray(length);
      var array = new PointerArray(length);
      for (var i = 0; i < length; i++) array[i] = i;
      return array;
    };
  },
});

// node_modules/mnemonist/utils/iterables.js
var require_iterables = __commonJS({
  'node_modules/mnemonist/utils/iterables.js'(exports) {
    var forEach = require_foreach();
    var typed = require_typed_arrays();
    function isArrayLike(target) {
      return Array.isArray(target) || typed.isTypedArray(target);
    }
    function guessLength(target) {
      if (typeof target.length === 'number') return target.length;
      if (typeof target.size === 'number') return target.size;
      return;
    }
    function toArray(target) {
      var l = guessLength(target);
      var array = typeof l === 'number' ? new Array(l) : [];
      var i = 0;
      forEach(target, function (value) {
        array[i++] = value;
      });
      return array;
    }
    function toArrayWithIndices(target) {
      var l = guessLength(target);
      var IndexArray = typeof l === 'number' ? typed.getPointerArray(l) : Array;
      var array = typeof l === 'number' ? new Array(l) : [];
      var indices = typeof l === 'number' ? new IndexArray(l) : [];
      var i = 0;
      forEach(target, function (value) {
        array[i] = value;
        indices[i] = i++;
      });
      return [array, indices];
    }
    exports.isArrayLike = isArrayLike;
    exports.guessLength = guessLength;
    exports.toArray = toArray;
    exports.toArrayWithIndices = toArrayWithIndices;
  },
});

// node_modules/mnemonist/lru-cache.js
var require_lru_cache = __commonJS({
  'node_modules/mnemonist/lru-cache.js'(exports, module2) {
    var Iterator = require_iterator();
    var forEach = require_foreach();
    var typed = require_typed_arrays();
    var iterables = require_iterables();
    function LRUCache(Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      this.capacity = capacity;
      if (typeof this.capacity !== 'number' || this.capacity <= 0)
        throw new Error('mnemonist/lru-cache: capacity should be positive number.');
      var PointerArray = typed.getPointerArray(capacity);
      this.forward = new PointerArray(capacity);
      this.backward = new PointerArray(capacity);
      this.K = typeof Keys === 'function' ? new Keys(capacity) : new Array(capacity);
      this.V = typeof Values === 'function' ? new Values(capacity) : new Array(capacity);
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    }
    LRUCache.prototype.clear = function () {
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    };
    LRUCache.prototype.splayOnTop = function (pointer) {
      var oldHead = this.head;
      if (this.head === pointer) return this;
      var previous = this.backward[pointer],
        next = this.forward[pointer];
      if (this.tail === pointer) {
        this.tail = previous;
      } else {
        this.backward[next] = previous;
      }
      this.forward[previous] = next;
      this.backward[oldHead] = pointer;
      this.head = pointer;
      this.forward[pointer] = oldHead;
      return this;
    };
    LRUCache.prototype.set = function (key, value) {
      var pointer = this.items[key];
      if (typeof pointer !== 'undefined') {
        this.splayOnTop(pointer);
        this.V[pointer] = value;
        return;
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        delete this.items[this.K[pointer]];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
    };
    LRUCache.prototype.setpop = function (key, value) {
      var oldValue = null;
      var oldKey = null;
      var pointer = this.items[key];
      if (typeof pointer !== 'undefined') {
        this.splayOnTop(pointer);
        oldValue = this.V[pointer];
        this.V[pointer] = value;
        return { evicted: false, key, value: oldValue };
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        oldValue = this.V[pointer];
        oldKey = this.K[pointer];
        delete this.items[this.K[pointer]];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
      if (oldKey) {
        return { evicted: true, key: oldKey, value: oldValue };
      } else {
        return null;
      }
    };
    LRUCache.prototype.has = function (key) {
      return key in this.items;
    };
    LRUCache.prototype.get = function (key) {
      var pointer = this.items[key];
      if (typeof pointer === 'undefined') return;
      this.splayOnTop(pointer);
      return this.V[pointer];
    };
    LRUCache.prototype.peek = function (key) {
      var pointer = this.items[key];
      if (typeof pointer === 'undefined') return;
      return this.V[pointer];
    };
    LRUCache.prototype.forEach = function (callback, scope) {
      scope = arguments.length > 1 ? scope : this;
      var i = 0,
        l = this.size;
      var pointer = this.head,
        keys = this.K,
        values = this.V,
        forward = this.forward;
      while (i < l) {
        callback.call(scope, values[pointer], keys[pointer], this);
        pointer = forward[pointer];
        i++;
      }
    };
    LRUCache.prototype.keys = function () {
      var i = 0,
        l = this.size;
      var pointer = this.head,
        keys = this.K,
        forward = this.forward;
      return new Iterator(function () {
        if (i >= l) return { done: true };
        var key = keys[pointer];
        i++;
        if (i < l) pointer = forward[pointer];
        return {
          done: false,
          value: key,
        };
      });
    };
    LRUCache.prototype.values = function () {
      var i = 0,
        l = this.size;
      var pointer = this.head,
        values = this.V,
        forward = this.forward;
      return new Iterator(function () {
        if (i >= l) return { done: true };
        var value = values[pointer];
        i++;
        if (i < l) pointer = forward[pointer];
        return {
          done: false,
          value,
        };
      });
    };
    LRUCache.prototype.entries = function () {
      var i = 0,
        l = this.size;
      var pointer = this.head,
        keys = this.K,
        values = this.V,
        forward = this.forward;
      return new Iterator(function () {
        if (i >= l) return { done: true };
        var key = keys[pointer],
          value = values[pointer];
        i++;
        if (i < l) pointer = forward[pointer];
        return {
          done: false,
          value: [key, value],
        };
      });
    };
    if (typeof Symbol !== 'undefined') LRUCache.prototype[Symbol.iterator] = LRUCache.prototype.entries;
    LRUCache.prototype.inspect = function () {
      var proxy = /* @__PURE__ */ new Map();
      var iterator = this.entries(),
        step;
      while (((step = iterator.next()), !step.done)) proxy.set(step.value[0], step.value[1]);
      Object.defineProperty(proxy, 'constructor', {
        value: LRUCache,
        enumerable: false,
      });
      return proxy;
    };
    if (typeof Symbol !== 'undefined')
      LRUCache.prototype[Symbol.for('nodejs.util.inspect.custom')] = LRUCache.prototype.inspect;
    LRUCache.from = function (iterable, Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = iterables.guessLength(iterable);
        if (typeof capacity !== 'number')
          throw new Error(
            'mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.'
          );
      } else if (arguments.length === 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      var cache = new LRUCache(Keys, Values, capacity);
      forEach(iterable, function (value, key) {
        cache.set(key, value);
      });
      return cache;
    };
    module2.exports = LRUCache;
  },
});

// node_modules/@aws-sdk/endpoint-cache/dist-cjs/EndpointCache.js
var require_EndpointCache = __commonJS({
  'node_modules/@aws-sdk/endpoint-cache/dist-cjs/EndpointCache.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.EndpointCache = void 0;
    var tslib_1 = require_tslib7();
    var lru_cache_1 = tslib_1.__importDefault(require_lru_cache());
    var EndpointCache = class {
      constructor(capacity) {
        this.cache = new lru_cache_1.default(capacity);
      }
      getEndpoint(key) {
        const endpointsWithExpiry = this.get(key);
        if (!endpointsWithExpiry || endpointsWithExpiry.length === 0) {
          return void 0;
        }
        const endpoints = endpointsWithExpiry.map((endpoint) => endpoint.Address);
        return endpoints[Math.floor(Math.random() * endpoints.length)];
      }
      get(key) {
        if (!this.has(key)) {
          return;
        }
        const value = this.cache.get(key);
        if (!value) {
          return;
        }
        const now = Date.now();
        const endpointsWithExpiry = value.filter((endpoint) => now < endpoint.Expires);
        if (endpointsWithExpiry.length === 0) {
          this.delete(key);
          return void 0;
        }
        return endpointsWithExpiry;
      }
      set(key, endpoints) {
        const now = Date.now();
        this.cache.set(
          key,
          endpoints.map(({ Address, CachePeriodInMinutes }) => ({
            Address,
            Expires: now + CachePeriodInMinutes * 60 * 1e3,
          }))
        );
      }
      delete(key) {
        this.cache.set(key, []);
      }
      has(key) {
        if (!this.cache.has(key)) {
          return false;
        }
        const endpoints = this.cache.peek(key);
        if (!endpoints) {
          return false;
        }
        return endpoints.length > 0;
      }
      clear() {
        this.cache.clear();
      }
    };
    exports.EndpointCache = EndpointCache;
  },
});

// node_modules/@aws-sdk/endpoint-cache/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  'node_modules/@aws-sdk/endpoint-cache/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib7();
    tslib_1.__exportStar(require_Endpoint(), exports);
    tslib_1.__exportStar(require_EndpointCache(), exports);
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/resolveEndpointDiscoveryConfig.js
var require_resolveEndpointDiscoveryConfig = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/resolveEndpointDiscoveryConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveEndpointDiscoveryConfig = void 0;
    var endpoint_cache_1 = require_dist_cjs10();
    var resolveEndpointDiscoveryConfig = (input, { endpointDiscoveryCommandCtor }) => {
      var _a;
      return {
        ...input,
        endpointDiscoveryCommandCtor,
        endpointCache: new endpoint_cache_1.EndpointCache(
          (_a = input.endpointCacheSize) !== null && _a !== void 0 ? _a : 1e3
        ),
        endpointDiscoveryEnabled:
          input.endpointDiscoveryEnabled !== void 0
            ? () => Promise.resolve(input.endpointDiscoveryEnabled)
            : input.endpointDiscoveryEnabledProvider,
        isClientEndpointDiscoveryEnabled: input.endpointDiscoveryEnabled !== void 0,
      };
    };
    exports.resolveEndpointDiscoveryConfig = resolveEndpointDiscoveryConfig;
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib6();
    tslib_1.__exportStar(require_configurations(), exports);
    tslib_1.__exportStar(require_getEndpointDiscoveryPlugin(), exports);
    tslib_1.__exportStar(require_resolveEndpointDiscoveryConfig(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getHostHeaderPlugin =
      exports.hostHeaderMiddlewareOptions =
      exports.hostHeaderMiddleware =
      exports.resolveHostHeaderConfig =
        void 0;
    var protocol_http_1 = require_dist_cjs4();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    exports.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request)) return next(args);
      const { request } = args;
      const { handlerProtocol = '' } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf('h2') >= 0 && !request.headers[':authority']) {
        delete request.headers['host'];
        request.headers[':authority'] = '';
      } else if (!request.headers['host']) {
        request.headers['host'] = request.hostname;
      }
      return next(args);
    };
    exports.hostHeaderMiddleware = hostHeaderMiddleware;
    exports.hostHeaderMiddlewareOptions = {
      name: 'hostHeaderMiddleware',
      step: 'build',
      priority: 'low',
      tags: ['HOST'],
      override: true,
    };
    var getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.hostHeaderMiddleware)(options), exports.hostHeaderMiddlewareOptions);
      },
    });
    exports.getHostHeaderPlugin = getHostHeaderPlugin;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js
var require_loggerMiddleware = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getLoggerPlugin = exports.loggerMiddlewareOptions = exports.loggerMiddleware = void 0;
    var loggerMiddleware = () => (next, context) => async (args) => {
      const { clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog } = context;
      const response = await next(args);
      if (!logger) {
        return response;
      }
      if (typeof logger.info === 'function') {
        const { $metadata, ...outputWithoutMetadata } = response.output;
        logger.info({
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata,
        });
      }
      return response;
    };
    exports.loggerMiddleware = loggerMiddleware;
    exports.loggerMiddlewareOptions = {
      name: 'loggerMiddleware',
      tags: ['LOGGER'],
      step: 'initialize',
      override: true,
    };
    var getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.loggerMiddleware)(), exports.loggerMiddlewareOptions);
      },
    });
    exports.getLoggerPlugin = getLoggerPlugin;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_loggerMiddleware(), exports);
  },
});

// node_modules/@aws-sdk/middleware-recursion-detection/node_modules/tslib/tslib.js
var require_tslib8 = __commonJS({
  'node_modules/@aws-sdk/middleware-recursion-detection/node_modules/tslib/tslib.js'(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function (factory) {
      var root =
        typeof global === 'object' ? global : typeof self === 'object' ? self : typeof this === 'object' ? this : {};
      if (typeof define === 'function' && define.amd) {
        define('tslib', ['exports'], function (exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === 'object' && typeof module2.exports === 'object') {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === 'function') {
            Object.defineProperty(exports2, '__esModule', { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function (id, v) {
          return (exports2[id] = previous ? previous(id, v) : v);
        };
      }
    })(function (exporter) {
      var extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      __extends = function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
      __assign =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function (decorators, target, key, desc) {
        var c = arguments.length,
          r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
          d;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function (thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g;
        return (
          (g = { next: verb(0), throw: verb(1), return: verb(2) }),
          typeof Symbol === 'function' &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError('Generator is already executing.');
          while (_)
            try {
              if (
                ((f = 1),
                y &&
                  (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function (m, o) {
        for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
      };
      __createBinding = Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          };
      __values = function (o) {
        var s = typeof Symbol === 'function' && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === 'number')
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            },
          };
        throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      };
      __read = function (o, n) {
        var m = typeof Symbol === 'function' && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i['return'])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
        return r;
      };
      __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function (v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      };
      __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = {}),
          verb('next'),
          verb('throw'),
          verb('return'),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        function verb(n) {
          if (g[n])
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume('next', value);
        }
        function reject(value) {
          resume('throw', value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function (o) {
        var i, p;
        return (
          (i = {}),
          verb('next'),
          verb('throw', function (e) {
            throw e;
          }),
          verb('return'),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p) ? { value: __await(o[n](v)), done: n === 'return' } : f ? f(v) : v;
              }
            : f;
        }
      };
      __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, 'raw', { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          };
      __importStar = function (mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      __importDefault = function (mod2) {
        return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
      };
      __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot read private member from an object whose class did not declare it');
        return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot write private member to an object whose class did not declare it');
        return kind === 'a' ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== 'object' && typeof receiver !== 'function'))
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === 'function' ? receiver === state : state.has(receiver);
      };
      exporter('__extends', __extends);
      exporter('__assign', __assign);
      exporter('__rest', __rest);
      exporter('__decorate', __decorate);
      exporter('__param', __param);
      exporter('__metadata', __metadata);
      exporter('__awaiter', __awaiter);
      exporter('__generator', __generator);
      exporter('__exportStar', __exportStar);
      exporter('__createBinding', __createBinding);
      exporter('__values', __values);
      exporter('__read', __read);
      exporter('__spread', __spread);
      exporter('__spreadArrays', __spreadArrays);
      exporter('__spreadArray', __spreadArray);
      exporter('__await', __await);
      exporter('__asyncGenerator', __asyncGenerator);
      exporter('__asyncDelegator', __asyncDelegator);
      exporter('__asyncValues', __asyncValues);
      exporter('__makeTemplateObject', __makeTemplateObject);
      exporter('__importStar', __importStar);
      exporter('__importDefault', __importDefault);
      exporter('__classPrivateFieldGet', __classPrivateFieldGet);
      exporter('__classPrivateFieldSet', __classPrivateFieldSet);
      exporter('__classPrivateFieldIn', __classPrivateFieldIn);
    });
  },
});

// node_modules/@aws-sdk/middleware-recursion-detection/node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler3 = __commonJS({
  'node_modules/@aws-sdk/middleware-recursion-detection/node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/middleware-recursion-detection/node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest3 = __commonJS({
  'node_modules/@aws-sdk/middleware-recursion-detection/node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HttpRequest = void 0;
    var HttpRequest = class {
      constructor(options) {
        this.method = options.method || 'GET';
        this.hostname = options.hostname || 'localhost';
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol
          ? options.protocol.slice(-1) !== ':'
            ? `${options.protocol}:`
            : options.protocol
          : 'https:';
        this.path = options.path ? (options.path.charAt(0) !== '/' ? `/${options.path}` : options.path) : '/';
      }
      static isInstance(request) {
        if (!request) return false;
        const req = request;
        return (
          'method' in req &&
          'protocol' in req &&
          'hostname' in req &&
          'path' in req &&
          typeof req['query'] === 'object' &&
          typeof req['headers'] === 'object'
        );
      }
      clone() {
        const cloned = new HttpRequest({
          ...this,
          headers: { ...this.headers },
        });
        if (cloned.query) cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param,
        };
      }, {});
    }
  },
});

// node_modules/@aws-sdk/middleware-recursion-detection/node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse3 = __commonJS({
  'node_modules/@aws-sdk/middleware-recursion-detection/node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response) return false;
        const resp = response;
        return typeof resp.statusCode === 'number' && typeof resp.headers === 'object';
      }
    };
    exports.HttpResponse = HttpResponse;
  },
});

// node_modules/@aws-sdk/middleware-recursion-detection/node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname3 = __commonJS({
  'node_modules/@aws-sdk/middleware-recursion-detection/node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports.isValidHostname = isValidHostname;
  },
});

// node_modules/@aws-sdk/middleware-recursion-detection/node_modules/@aws-sdk/protocol-http/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  'node_modules/@aws-sdk/middleware-recursion-detection/node_modules/@aws-sdk/protocol-http/dist-cjs/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib8();
    tslib_1.__exportStar(require_httpHandler3(), exports);
    tslib_1.__exportStar(require_httpRequest3(), exports);
    tslib_1.__exportStar(require_httpResponse3(), exports);
    tslib_1.__exportStar(require_isValidHostname3(), exports);
  },
});

// node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  'node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRecursionDetectionPlugin =
      exports.addRecursionDetectionMiddlewareOptions =
      exports.recursionDetectionMiddleware =
        void 0;
    var protocol_http_1 = require_dist_cjs14();
    var TRACE_ID_HEADER_NAME = 'X-Amzn-Trace-Id';
    var ENV_LAMBDA_FUNCTION_NAME = 'AWS_LAMBDA_FUNCTION_NAME';
    var ENV_TRACE_ID = '_X_AMZN_TRACE_ID';
    var recursionDetectionMiddleware = (options) => (next) => async (args) => {
      const { request } = args;
      if (
        !protocol_http_1.HttpRequest.isInstance(request) ||
        options.runtime !== 'node' ||
        request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)
      ) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = (str) => typeof str === 'string' && str.length > 0;
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request,
      });
    };
    exports.recursionDetectionMiddleware = recursionDetectionMiddleware;
    exports.addRecursionDetectionMiddlewareOptions = {
      step: 'build',
      tags: ['RECURSION_DETECTION'],
      name: 'recursionDetectionMiddleware',
      override: true,
      priority: 'low',
    };
    var getRecursionDetectionPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(
          (0, exports.recursionDetectionMiddleware)(options),
          exports.addRecursionDetectionMiddlewareOptions
        );
      },
    });
    exports.getRecursionDetectionPlugin = getRecursionDetectionPlugin;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/config.js
var require_config2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/config.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DEFAULT_RETRY_MODE = exports.DEFAULT_MAX_ATTEMPTS = exports.RETRY_MODES = void 0;
    var RETRY_MODES;
    (function (RETRY_MODES2) {
      RETRY_MODES2['STANDARD'] = 'standard';
      RETRY_MODES2['ADAPTIVE'] = 'adaptive';
    })((RETRY_MODES = exports.RETRY_MODES || (exports.RETRY_MODES = {})));
    exports.DEFAULT_MAX_ATTEMPTS = 3;
    exports.DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js
var require_constants2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TRANSIENT_ERROR_STATUS_CODES =
      exports.TRANSIENT_ERROR_CODES =
      exports.THROTTLING_ERROR_CODES =
      exports.CLOCK_SKEW_ERROR_CODES =
        void 0;
    exports.CLOCK_SKEW_ERROR_CODES = [
      'AuthFailure',
      'InvalidSignatureException',
      'RequestExpired',
      'RequestInTheFuture',
      'RequestTimeTooSkewed',
      'SignatureDoesNotMatch',
    ];
    exports.THROTTLING_ERROR_CODES = [
      'BandwidthLimitExceeded',
      'EC2ThrottledException',
      'LimitExceededException',
      'PriorRequestNotComplete',
      'ProvisionedThroughputExceededException',
      'RequestLimitExceeded',
      'RequestThrottled',
      'RequestThrottledException',
      'SlowDown',
      'ThrottledException',
      'Throttling',
      'ThrottlingException',
      'TooManyRequestsException',
      'TransactionInProgressException',
    ];
    exports.TRANSIENT_ERROR_CODES = ['AbortError', 'TimeoutError', 'RequestTimeout', 'RequestTimeoutException'];
    exports.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isTransientError =
      exports.isThrottlingError =
      exports.isClockSkewError =
      exports.isRetryableByTrait =
        void 0;
    var constants_1 = require_constants2();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return (
        ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 ||
        constants_1.THROTTLING_ERROR_CODES.includes(error.name) ||
        ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true
      );
    };
    exports.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return (
        constants_1.TRANSIENT_ERROR_CODES.includes(error.name) ||
        constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(
          ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0
        )
      );
    };
    exports.isTransientError = isTransientError;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/DefaultRateLimiter.js
var require_DefaultRateLimiter = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/DefaultRateLimiter.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs16();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta =
          (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
        this.minCapacity =
          (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0
            ? _b
            : 1;
        this.minFillRate =
          (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0
            ? _c
            : 0.5;
        this.scaleConstant =
          (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0
            ? _d
            : 0.4;
        this.smooth =
          (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = ((amount - this.currentCapacity) / this.fillRate) * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow((this.lastMaxRate * (1 - this.beta)) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(
          this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate
        );
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    exports.DefaultRateLimiter = DefaultRateLimiter;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/constants.js
var require_constants3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.REQUEST_HEADER =
      exports.INVOCATION_ID_HEADER =
      exports.NO_RETRY_INCREMENT =
      exports.TIMEOUT_RETRY_COST =
      exports.RETRY_COST =
      exports.INITIAL_RETRY_TOKENS =
      exports.THROTTLING_RETRY_DELAY_BASE =
      exports.MAXIMUM_RETRY_DELAY =
      exports.DEFAULT_RETRY_DELAY_BASE =
        void 0;
    exports.DEFAULT_RETRY_DELAY_BASE = 100;
    exports.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports.THROTTLING_RETRY_DELAY_BASE = 500;
    exports.INITIAL_RETRY_TOKENS = 500;
    exports.RETRY_COST = 5;
    exports.TIMEOUT_RETRY_COST = 10;
    exports.NO_RETRY_INCREMENT = 1;
    exports.INVOCATION_ID_HEADER = 'amz-sdk-invocation-id';
    exports.REQUEST_HEADER = 'amz-sdk-request';
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js
var require_defaultRetryQuota = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getDefaultRetryQuota = void 0;
    var constants_1 = require_constants3();
    var getDefaultRetryQuota = (initialRetryTokens, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement =
        (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0
          ? _a
          : constants_1.NO_RETRY_INCREMENT;
      const retryCost =
        (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0
          ? _b
          : constants_1.RETRY_COST;
      const timeoutRetryCost =
        (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0
          ? _c
          : constants_1.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = (error) => (error.name === 'TimeoutError' ? timeoutRetryCost : retryCost);
      const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
      const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
          throw new Error('No retry token available');
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity +=
          capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens,
      });
    };
    exports.getDefaultRetryQuota = getDefaultRetryQuota;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js
var require_delayDecider = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultDelayDecider = void 0;
    var constants_1 = require_constants3();
    var defaultDelayDecider = (delayBase, attempts) =>
      Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    exports.defaultDelayDecider = defaultDelayDecider;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js
var require_retryDecider = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultRetryDecider = void 0;
    var service_error_classification_1 = require_dist_cjs16();
    var defaultRetryDecider = (error) => {
      if (!error) {
        return false;
      }
      return (
        (0, service_error_classification_1.isRetryableByTrait)(error) ||
        (0, service_error_classification_1.isClockSkewError)(error) ||
        (0, service_error_classification_1.isThrottlingError)(error) ||
        (0, service_error_classification_1.isTransientError)(error)
      );
    };
    exports.defaultRetryDecider = defaultRetryDecider;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.StandardRetryStrategy = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var service_error_classification_1 = require_dist_cjs16();
    var uuid_1 = require_dist();
    var config_1 = require_config2();
    var constants_1 = require_constants3();
    var defaultRetryQuota_1 = require_defaultRetryQuota();
    var delayDecider_1 = require_delayDecider();
    var retryDecider_1 = require_retryDecider();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.retryDecider =
          (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0
            ? _a
            : retryDecider_1.defaultRetryDecider;
        this.delayDecider =
          (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0
            ? _b
            : delayDecider_1.defaultDelayDecider;
        this.retryQuota =
          (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0
            ? _c
            : (0, defaultRetryQuota_1.getDefaultRetryQuota)(constants_1.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = config_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[constants_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[constants_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options === null || options === void 0 ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options === null || options === void 0 ? void 0 : options.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = asSdkError(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delay = this.delayDecider(
                (0, service_error_classification_1.isThrottlingError)(err)
                  ? constants_1.THROTTLING_RETRY_DELAY_BASE
                  : constants_1.DEFAULT_RETRY_DELAY_BASE,
                attempts
              );
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    exports.StandardRetryStrategy = StandardRetryStrategy;
    var asSdkError = (error) => {
      if (error instanceof Error) return error;
      if (error instanceof Object) return Object.assign(new Error(), error);
      if (typeof error === 'string') return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    };
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config2();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options !== null && options !== void 0 ? options : {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter =
          rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          },
        });
      }
    };
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js
var require_configurations2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS =
      exports.CONFIG_RETRY_MODE =
      exports.ENV_RETRY_MODE =
      exports.resolveRetryConfig =
      exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS =
      exports.CONFIG_MAX_ATTEMPTS =
      exports.ENV_MAX_ATTEMPTS =
        void 0;
    var util_middleware_1 = require_dist_cjs6();
    var AdaptiveRetryStrategy_1 = require_AdaptiveRetryStrategy();
    var config_1 = require_config2();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    exports.ENV_MAX_ATTEMPTS = 'AWS_MAX_ATTEMPTS';
    exports.CONFIG_MAX_ATTEMPTS = 'max_attempts';
    exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => {
        const value = env2[exports.ENV_MAX_ATTEMPTS];
        if (!value) return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${exports.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[exports.CONFIG_MAX_ATTEMPTS];
        if (!value) return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${exports.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: config_1.DEFAULT_MAX_ATTEMPTS,
    };
    var resolveRetryConfig = (input) => {
      var _a;
      const maxAttempts = (0, util_middleware_1.normalizeProvider)(
        (_a = input.maxAttempts) !== null && _a !== void 0 ? _a : config_1.DEFAULT_MAX_ATTEMPTS
      );
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (input.retryStrategy) {
            return input.retryStrategy;
          }
          const retryMode = await (0, util_middleware_1.normalizeProvider)(input.retryMode)();
          if (retryMode === config_1.RETRY_MODES.ADAPTIVE) {
            return new AdaptiveRetryStrategy_1.AdaptiveRetryStrategy(maxAttempts);
          }
          return new StandardRetryStrategy_1.StandardRetryStrategy(maxAttempts);
        },
      };
    };
    exports.resolveRetryConfig = resolveRetryConfig;
    exports.ENV_RETRY_MODE = 'AWS_RETRY_MODE';
    exports.CONFIG_RETRY_MODE = 'retry_mode';
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[exports.ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[exports.CONFIG_RETRY_MODE],
      default: config_1.DEFAULT_RETRY_MODE,
    };
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js
var require_omitRetryHeadersMiddleware = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getOmitRetryHeadersPlugin =
      exports.omitRetryHeadersMiddlewareOptions =
      exports.omitRetryHeadersMiddleware =
        void 0;
    var protocol_http_1 = require_dist_cjs4();
    var constants_1 = require_constants3();
    var omitRetryHeadersMiddleware = () => (next) => async (args) => {
      const { request } = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        delete request.headers[constants_1.INVOCATION_ID_HEADER];
        delete request.headers[constants_1.REQUEST_HEADER];
      }
      return next(args);
    };
    exports.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
    exports.omitRetryHeadersMiddlewareOptions = {
      name: 'omitRetryHeadersMiddleware',
      tags: ['RETRY', 'HEADERS', 'OMIT_RETRY_HEADERS'],
      relation: 'before',
      toMiddleware: 'awsAuthMiddleware',
      override: true,
    };
    var getOmitRetryHeadersPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.omitRetryHeadersMiddleware)(), exports.omitRetryHeadersMiddlewareOptions);
      },
    });
    exports.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js
var require_retryMiddleware = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRetryPlugin = exports.retryMiddlewareOptions = exports.retryMiddleware = void 0;
    var retryMiddleware = (options) => (next, context) => async (args) => {
      const retryStrategy = await options.retryStrategy();
      if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)
        context.userAgent = [...(context.userAgent || []), ['cfg/retry-mode', retryStrategy.mode]];
      return retryStrategy.retry(next, args);
    };
    exports.retryMiddleware = retryMiddleware;
    exports.retryMiddlewareOptions = {
      name: 'retryMiddleware',
      tags: ['RETRY'],
      step: 'finalizeRequest',
      priority: 'high',
      override: true,
    };
    var getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.retryMiddleware)(options), exports.retryMiddlewareOptions);
      },
    });
    exports.getRetryPlugin = getRetryPlugin;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/types.js
var require_types = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_AdaptiveRetryStrategy(), exports);
    tslib_1.__exportStar(require_DefaultRateLimiter(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy(), exports);
    tslib_1.__exportStar(require_config2(), exports);
    tslib_1.__exportStar(require_configurations2(), exports);
    tslib_1.__exportStar(require_delayDecider(), exports);
    tslib_1.__exportStar(require_omitRetryHeadersMiddleware(), exports);
    tslib_1.__exportStar(require_retryDecider(), exports);
    tslib_1.__exportStar(require_retryMiddleware(), exports);
    tslib_1.__exportStar(require_types(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js
var require_ProviderError = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ProviderError = void 0;
    var ProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = 'ProviderError';
        Object.setPrototypeOf(this, ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports.ProviderError = ProviderError;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var CredentialsProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = 'CredentialsProviderError';
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
      }
    };
    exports.CredentialsProviderError = CredentialsProviderError;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js
var require_chain = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.chain = void 0;
    var ProviderError_1 = require_ProviderError();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(new ProviderError_1.ProviderError('No providers in chain'));
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports.chain = chain;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js
var require_fromStatic = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports.fromStatic = fromStatic;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js
var require_memoize = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports.memoize = memoize;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/property-provider/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/property-provider/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_CredentialsProviderError(), exports);
    tslib_1.__exportStar(require_ProviderError(), exports);
    tslib_1.__exportStar(require_chain(), exports);
    tslib_1.__exportStar(require_fromStatic(), exports);
    tslib_1.__exportStar(require_memoize(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toHex = exports.fromHex = void 0;
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error('Hex encoded strings must have an even number length');
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    exports.fromHex = fromHex;
    function toHex(bytes) {
      let out = '';
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    exports.toHex = toHex;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js
var require_constants4 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.MAX_PRESIGNED_TTL =
      exports.KEY_TYPE_IDENTIFIER =
      exports.MAX_CACHE_SIZE =
      exports.UNSIGNED_PAYLOAD =
      exports.EVENT_ALGORITHM_IDENTIFIER =
      exports.ALGORITHM_IDENTIFIER_V4A =
      exports.ALGORITHM_IDENTIFIER =
      exports.UNSIGNABLE_PATTERNS =
      exports.SEC_HEADER_PATTERN =
      exports.PROXY_HEADER_PATTERN =
      exports.ALWAYS_UNSIGNABLE_HEADERS =
      exports.HOST_HEADER =
      exports.TOKEN_HEADER =
      exports.SHA256_HEADER =
      exports.SIGNATURE_HEADER =
      exports.GENERATED_HEADERS =
      exports.DATE_HEADER =
      exports.AMZ_DATE_HEADER =
      exports.AUTH_HEADER =
      exports.REGION_SET_PARAM =
      exports.TOKEN_QUERY_PARAM =
      exports.SIGNATURE_QUERY_PARAM =
      exports.EXPIRES_QUERY_PARAM =
      exports.SIGNED_HEADERS_QUERY_PARAM =
      exports.AMZ_DATE_QUERY_PARAM =
      exports.CREDENTIAL_QUERY_PARAM =
      exports.ALGORITHM_QUERY_PARAM =
        void 0;
    exports.ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm';
    exports.CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential';
    exports.AMZ_DATE_QUERY_PARAM = 'X-Amz-Date';
    exports.SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders';
    exports.EXPIRES_QUERY_PARAM = 'X-Amz-Expires';
    exports.SIGNATURE_QUERY_PARAM = 'X-Amz-Signature';
    exports.TOKEN_QUERY_PARAM = 'X-Amz-Security-Token';
    exports.REGION_SET_PARAM = 'X-Amz-Region-Set';
    exports.AUTH_HEADER = 'authorization';
    exports.AMZ_DATE_HEADER = exports.AMZ_DATE_QUERY_PARAM.toLowerCase();
    exports.DATE_HEADER = 'date';
    exports.GENERATED_HEADERS = [exports.AUTH_HEADER, exports.AMZ_DATE_HEADER, exports.DATE_HEADER];
    exports.SIGNATURE_HEADER = exports.SIGNATURE_QUERY_PARAM.toLowerCase();
    exports.SHA256_HEADER = 'x-amz-content-sha256';
    exports.TOKEN_HEADER = exports.TOKEN_QUERY_PARAM.toLowerCase();
    exports.HOST_HEADER = 'host';
    exports.ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      'cache-control': true,
      connection: true,
      expect: true,
      from: true,
      'keep-alive': true,
      'max-forwards': true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      'transfer-encoding': true,
      upgrade: true,
      'user-agent': true,
      'x-amzn-trace-id': true,
    };
    exports.PROXY_HEADER_PATTERN = /^proxy-/;
    exports.SEC_HEADER_PATTERN = /^sec-/;
    exports.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    exports.ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256';
    exports.ALGORITHM_IDENTIFIER_V4A = 'AWS4-ECDSA-P256-SHA256';
    exports.EVENT_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256-PAYLOAD';
    exports.UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD';
    exports.MAX_CACHE_SIZE = 50;
    exports.KEY_TYPE_IDENTIFIER = 'aws4_request';
    exports.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js
var require_credentialDerivation = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.clearCredentialCache = exports.getSigningKey = exports.createScope = void 0;
    var util_hex_encoding_1 = require_dist_cjs19();
    var constants_1 = require_constants4();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = (shortDate, region, service) =>
      `${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;
    exports.createScope = createScope;
    var getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${(0, util_hex_encoding_1.toHex)(credsHash)}:${
        credentials.sessionToken
      }`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, constants_1.KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return (signingKeyCache[cacheKey] = key);
    };
    exports.getSigningKey = getSigningKey;
    var clearCredentialCache = () => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    };
    exports.clearCredentialCache = clearCredentialCache;
    var hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update(data);
      return hash.digest();
    };
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js
var require_getCanonicalHeaders = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCanonicalHeaders = void 0;
    var constants_1 = require_constants4();
    var getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (
          canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS ||
          (unsignableHeaders === null || unsignableHeaders === void 0
            ? void 0
            : unsignableHeaders.has(canonicalHeaderName)) ||
          constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||
          constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)
        ) {
          if (!signableHeaders || (signableHeaders && !signableHeaders.has(canonicalHeaderName))) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, ' ');
      }
      return canonical;
    };
    exports.getCanonicalHeaders = getCanonicalHeaders;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js
var require_escape_uri = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.escapeUri = void 0;
    var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports.escapeUri = escapeUri;
    var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js
var require_escape_uri_path = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri();
    var escapeUriPath = (uri) => uri.split('/').map(escape_uri_1.escapeUri).join('/');
    exports.escapeUriPath = escapeUriPath;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_escape_uri(), exports);
    tslib_1.__exportStar(require_escape_uri_path(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js
var require_getCanonicalQuery = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCanonicalQuery = void 0;
    var util_uri_escape_1 = require_dist_cjs20();
    var constants_1 = require_constants4();
    var getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === 'string') {
          serialized[key] = `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value
            .slice(0)
            .sort()
            .reduce(
              (encoded, value2) =>
                encoded.concat([
                  `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value2)}`,
                ]),
              []
            )
            .join('&');
        }
      }
      return keys
        .map((key) => serialized[key])
        .filter((serialized2) => serialized2)
        .join('&');
    };
    exports.getCanonicalQuery = getCanonicalQuery;
  },
});

// node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  'node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isArrayBuffer = void 0;
    var isArrayBuffer = (arg) =>
      (typeof ArrayBuffer === 'function' && arg instanceof ArrayBuffer) ||
      Object.prototype.toString.call(arg) === '[object ArrayBuffer]';
    exports.isArrayBuffer = isArrayBuffer;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js
var require_getPayloadHash = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getPayloadHash = void 0;
    var is_array_buffer_1 = require_dist_cjs21();
    var util_hex_encoding_1 = require_dist_cjs19();
    var constants_1 = require_constants4();
    var getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';
      } else if (typeof body === 'string' || ArrayBuffer.isView(body) || (0, is_array_buffer_1.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update(body);
        return (0, util_hex_encoding_1.toHex)(await hashCtor.digest());
      }
      return constants_1.UNSIGNED_PAYLOAD;
    };
    exports.getPayloadHash = getPayloadHash;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js
var require_headerUtil = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.deleteHeader = exports.getHeaderValue = exports.hasHeader = void 0;
    var hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports.hasHeader = hasHeader;
    var getHeaderValue = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return headers[headerName];
        }
      }
      return void 0;
    };
    exports.getHeaderValue = getHeaderValue;
    var deleteHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          delete headers[headerName];
        }
      }
    };
    exports.deleteHeader = deleteHeader;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js
var require_cloneRequest = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.cloneQuery = exports.cloneRequest = void 0;
    var cloneRequest = ({ headers, query, ...rest }) => ({
      ...rest,
      headers: { ...headers },
      query: query ? (0, exports.cloneQuery)(query) : void 0,
    });
    exports.cloneRequest = cloneRequest;
    var cloneQuery = (query) =>
      Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param,
        };
      }, {});
    exports.cloneQuery = cloneQuery;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js
var require_moveHeadersToQuery = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.moveHeadersToQuery = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var moveHeadersToQuery = (request, options = {}) => {
      var _a;
      const { headers, query = {} } =
        typeof request.clone === 'function' ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (
          lname.slice(0, 6) === 'x-amz-' &&
          !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))
        ) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query,
      };
    };
    exports.moveHeadersToQuery = moveHeadersToQuery;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js
var require_prepareRequest = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.prepareRequest = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var constants_1 = require_constants4();
    var prepareRequest = (request) => {
      request = typeof request.clone === 'function' ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const headerName of Object.keys(request.headers)) {
        if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    };
    exports.prepareRequest = prepareRequest;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js
var require_utilDate = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toDate = exports.iso8601 = void 0;
    var iso8601 = (time) =>
      (0, exports.toDate)(time)
        .toISOString()
        .replace(/\.\d{3}Z$/, 'Z');
    exports.iso8601 = iso8601;
    var toDate = (time) => {
      if (typeof time === 'number') {
        return new Date(time * 1e3);
      }
      if (typeof time === 'string') {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
    exports.toDate = toDate;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js
var require_SignatureV4 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SignatureV4 = void 0;
    var util_hex_encoding_1 = require_dist_cjs19();
    var util_middleware_1 = require_dist_cjs6();
    var constants_1 = require_constants4();
    var credentialDerivation_1 = require_credentialDerivation();
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    var getPayloadHash_1 = require_getPayloadHash();
    var headerUtil_1 = require_headerUtil();
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    var prepareRequest_1 = require_prepareRequest();
    var utilDate_1 = require_utilDate();
    var SignatureV4 = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true;
        this.regionProvider = (0, util_middleware_1.normalizeProvider)(region);
        this.credentialProvider = (0, util_middleware_1.normalizeProvider)(credentials);
      }
      async presign(originalRequest, options = {}) {
        const {
          signingDate = new Date(),
          expiresIn = 3600,
          unsignableHeaders,
          unhoistableHeaders,
          signableHeaders,
          signingRegion,
          signingService,
        } = options;
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
          return Promise.reject(
            'Signature version 4 presigned URLs must have an expiration date less than one week in the future'
          );
        }
        const scope = (0, credentialDerivation_1.createScope)(
          shortDate,
          region,
          signingService !== null && signingService !== void 0 ? signingService : this.service
        );
        const request = (0, moveHeadersToQuery_1.moveHeadersToQuery)(
          (0, prepareRequest_1.prepareRequest)(originalRequest),
          { unhoistableHeaders }
        );
        if (credentials.sessionToken) {
          request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;
        request.query[constants_1.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(
          request,
          unsignableHeaders,
          signableHeaders
        );
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(
          longDate,
          scope,
          this.getSigningKey(credentials, region, shortDate, signingService),
          this.createCanonicalRequest(
            request,
            canonicalHeaders,
            await (0, getPayloadHash_1.getPayloadHash)(originalRequest, this.sha256)
          )
        );
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === 'string') {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent(
        { headers, payload },
        { signingDate = new Date(), priorSignature, signingRegion, signingService }
      ) {
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(
          shortDate,
          region,
          signingService !== null && signingService !== void 0 ? signingService : this.service
        );
        const hashedPayload = await (0, getPayloadHash_1.getPayloadHash)({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, util_hex_encoding_1.toHex)(await hash.digest());
        const stringToSign = [
          constants_1.EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload,
        ].join('\n');
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update(stringToSign);
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      async signRequest(
        requestToSign,
        { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}
      ) {
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const request = (0, prepareRequest_1.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(
          shortDate,
          region,
          signingService !== null && signingService !== void 0 ? signingService : this.service
        );
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0, getPayloadHash_1.getPayloadHash)(request, this.sha256);
        if (!(0, headerUtil_1.hasHeader)(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(
          request,
          unsignableHeaders,
          signableHeaders
        );
        const signature = await this.getSignature(
          longDate,
          scope,
          this.getSigningKey(credentials, region, shortDate, signingService),
          this.createCanonicalRequest(request, canonicalHeaders, payloadHash)
        );
        request.headers[constants_1.AUTH_HEADER] = `${constants_1.ALGORITHM_IDENTIFIER} Credential=${
          credentials.accessKeyId
        }/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, getCanonicalQuery_1.getCanonicalQuery)(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join('\n')}

${sortedHeaders.join(';')}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update(canonicalRequest);
        const hashedRequest = await hash.digest();
        return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, util_hex_encoding_1.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split('/')) {
            if ((pathSegment === null || pathSegment === void 0 ? void 0 : pathSegment.length) === 0) continue;
            if (pathSegment === '.') continue;
            if (pathSegment === '..') {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${
            (path === null || path === void 0 ? void 0 : path.startsWith('/')) ? '/' : ''
          }${normalizedPathSegments.join('/')}${
            normalizedPathSegments.length > 0 && (path === null || path === void 0 ? void 0 : path.endsWith('/'))
              ? '/'
              : ''
          }`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, '/');
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update(stringToSign);
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return (0, credentialDerivation_1.getSigningKey)(
          this.sha256,
          credentials,
          shortDate,
          region,
          service || this.service
        );
      }
    };
    exports.SignatureV4 = SignatureV4;
    var formatDate = (now) => {
      const longDate = (0, utilDate_1.iso8601)(now).replace(/[\-:]/g, '');
      return {
        longDate,
        shortDate: longDate.slice(0, 8),
      };
    };
    var getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(';');
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/signature-v4/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.prepareRequest =
      exports.moveHeadersToQuery =
      exports.getPayloadHash =
      exports.getCanonicalQuery =
      exports.getCanonicalHeaders =
        void 0;
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_SignatureV4(), exports);
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    Object.defineProperty(exports, 'getCanonicalHeaders', {
      enumerable: true,
      get: function () {
        return getCanonicalHeaders_1.getCanonicalHeaders;
      },
    });
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    Object.defineProperty(exports, 'getCanonicalQuery', {
      enumerable: true,
      get: function () {
        return getCanonicalQuery_1.getCanonicalQuery;
      },
    });
    var getPayloadHash_1 = require_getPayloadHash();
    Object.defineProperty(exports, 'getPayloadHash', {
      enumerable: true,
      get: function () {
        return getPayloadHash_1.getPayloadHash;
      },
    });
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    Object.defineProperty(exports, 'moveHeadersToQuery', {
      enumerable: true,
      get: function () {
        return moveHeadersToQuery_1.moveHeadersToQuery;
      },
    });
    var prepareRequest_1 = require_prepareRequest();
    Object.defineProperty(exports, 'prepareRequest', {
      enumerable: true,
      get: function () {
        return prepareRequest_1.prepareRequest;
      },
    });
    tslib_1.__exportStar(require_credentialDerivation(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js
var require_configurations3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveSigV4AuthConfig = exports.resolveAwsAuthConfig = void 0;
    var property_provider_1 = require_dist_cjs18();
    var signature_v4_1 = require_dist_cjs22();
    var CREDENTIAL_EXPIRE_WINDOW = 3e5;
    var resolveAwsAuthConfig = (input) => {
      const normalizedCreds = input.credentials
        ? normalizeCredentialProvider(input.credentials)
        : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = normalizeProvider(input.signer);
      } else {
        signer = () =>
          normalizeProvider(input.region)()
            .then(async (region) => [
              (await input.regionInfoProvider(region, {
                useFipsEndpoint: await input.useFipsEndpoint(),
                useDualstackEndpoint: await input.useDualstackEndpoint(),
              })) || {},
              region,
            ])
            .then(([regionInfo, region]) => {
              const { signingRegion, signingService } = regionInfo;
              input.signingRegion = input.signingRegion || signingRegion || region;
              input.signingName = input.signingName || signingService || input.serviceId;
              const params = {
                ...input,
                credentials: normalizedCreds,
                region: input.signingRegion,
                service: input.signingName,
                sha256,
                uriEscapePath: signingEscapePath,
              };
              const signerConstructor = input.signerConstructor || signature_v4_1.SignatureV4;
              return new signerConstructor(params);
            });
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer,
      };
    };
    exports.resolveAwsAuthConfig = resolveAwsAuthConfig;
    var resolveSigV4AuthConfig = (input) => {
      const normalizedCreds = input.credentials
        ? normalizeCredentialProvider(input.credentials)
        : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = normalizeProvider(input.signer);
      } else {
        signer = normalizeProvider(
          new signature_v4_1.SignatureV4({
            credentials: normalizedCreds,
            region: input.region,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath,
          })
        );
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer,
      };
    };
    exports.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
    var normalizeProvider = (input) => {
      if (typeof input === 'object') {
        const promisified = Promise.resolve(input);
        return () => promisified;
      }
      return input;
    };
    var normalizeCredentialProvider = (credentials) => {
      if (typeof credentials === 'function') {
        return (0, property_provider_1.memoize)(
          credentials,
          (credentials2) =>
            credentials2.expiration !== void 0 &&
            credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW,
          (credentials2) => credentials2.expiration !== void 0
        );
      }
      return normalizeProvider(credentials);
    };
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js
var require_getSkewCorrectedDate = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSkewCorrectedDate = void 0;
    var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
    exports.getSkewCorrectedDate = getSkewCorrectedDate;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js
var require_isClockSkewed = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isClockSkewed = void 0;
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var isClockSkewed = (clockTime, systemClockOffset) =>
      Math.abs((0, getSkewCorrectedDate_1.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 3e5;
    exports.isClockSkewed = isClockSkewed;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js
var require_getUpdatedSystemClockOffset = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getUpdatedSystemClockOffset = void 0;
    var isClockSkewed_1 = require_isClockSkewed();
    var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if ((0, isClockSkewed_1.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
    exports.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js
var require_middleware = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSigV4AuthPlugin =
      exports.getAwsAuthPlugin =
      exports.awsAuthMiddlewareOptions =
      exports.awsAuthMiddleware =
        void 0;
    var protocol_http_1 = require_dist_cjs4();
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var getUpdatedSystemClockOffset_1 = require_getUpdatedSystemClockOffset();
    var awsAuthMiddleware = (options) => (next, context) =>
      async function (args) {
        if (!protocol_http_1.HttpRequest.isInstance(args.request)) return next(args);
        const signer = await options.signer();
        const output = await next({
          ...args,
          request: await signer.sign(args.request, {
            signingDate: (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(options.systemClockOffset),
            signingRegion: context['signing_region'],
            signingService: context['signing_service'],
          }),
        }).catch((error) => {
          var _a;
          const serverTime = (_a = error.ServerTime) !== null && _a !== void 0 ? _a : getDateHeader(error.$response);
          if (serverTime) {
            options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(
              serverTime,
              options.systemClockOffset
            );
          }
          throw error;
        });
        const dateHeader = getDateHeader(output.response);
        if (dateHeader) {
          options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(
            dateHeader,
            options.systemClockOffset
          );
        }
        return output;
      };
    exports.awsAuthMiddleware = awsAuthMiddleware;
    var getDateHeader = (response) => {
      var _a, _b, _c;
      return protocol_http_1.HttpResponse.isInstance(response)
        ? (_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0
          ? _b
          : (_c = response.headers) === null || _c === void 0
          ? void 0
          : _c.Date
        : void 0;
    };
    exports.awsAuthMiddlewareOptions = {
      name: 'awsAuthMiddleware',
      tags: ['SIGNATURE', 'AWSAUTH'],
      relation: 'after',
      toMiddleware: 'retryMiddleware',
      override: true,
    };
    var getAwsAuthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.awsAuthMiddleware)(options), exports.awsAuthMiddlewareOptions);
      },
    });
    exports.getAwsAuthPlugin = getAwsAuthPlugin;
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_configurations3(), exports);
    tslib_1.__exportStar(require_middleware(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js
var require_configurations4 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return {
        ...input,
        customUserAgent: typeof input.customUserAgent === 'string' ? [[input.customUserAgent]] : input.customUserAgent,
      };
    }
    exports.resolveUserAgentConfig = resolveUserAgentConfig;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js
var require_constants5 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UA_ESCAPE_REGEX = exports.SPACE = exports.X_AMZ_USER_AGENT = exports.USER_AGENT = void 0;
    exports.USER_AGENT = 'user-agent';
    exports.X_AMZ_USER_AGENT = 'x-amz-user-agent';
    exports.SPACE = ' ';
    exports.UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js
var require_user_agent_middleware = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getUserAgentPlugin = exports.getUserAgentMiddlewareOptions = exports.userAgentMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var constants_1 = require_constants5();
    var userAgentMiddleware = (options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request)) return next(args);
      const { headers } = request;
      const userAgent =
        ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0
          ? void 0
          : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent =
        ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0
          ? void 0
          : _b.map(escapeUserAgent)) || [];
      const sdkUserAgentValue = [...defaultUserAgent, ...userAgent, ...customUserAgent].join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith('aws-sdk-')),
        ...customUserAgent,
      ].join(constants_1.SPACE);
      if (options.runtime !== 'browser') {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT]
            ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}`
            : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request,
      });
    };
    exports.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = ([name, version]) => {
      const prefixSeparatorIndex = name.indexOf('/');
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === 'api') {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version]
        .filter((item) => item && item.length > 0)
        .map((item) => (item === null || item === void 0 ? void 0 : item.replace(constants_1.UA_ESCAPE_REGEX, '_')))
        .join('/');
    };
    exports.getUserAgentMiddlewareOptions = {
      name: 'getUserAgentMiddleware',
      step: 'build',
      priority: 'low',
      tags: ['SET_USER_AGENT', 'USER_AGENT'],
      override: true,
    };
    var getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.userAgentMiddleware)(config), exports.getUserAgentMiddlewareOptions);
      },
    });
    exports.getUserAgentPlugin = getUserAgentPlugin;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_configurations4(), exports);
    tslib_1.__exportStar(require_user_agent_middleware(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/package.json
var require_package = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/package.json'(exports, module2) {
    module2.exports = {
      name: '@aws-sdk/client-dynamodb',
      description: 'AWS SDK for JavaScript Dynamodb Client for Node.js, Browser and React Native',
      version: '3.141.0',
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        'build:cjs': 'tsc -p tsconfig.cjs.json',
        'build:docs': 'typedoc',
        'build:es': 'tsc -p tsconfig.es.json',
        'build:types': 'tsc -p tsconfig.types.json',
        'build:types:downlevel': 'downlevel-dts dist-types dist-types/ts3.4',
        clean: 'rimraf ./dist-* && rimraf *.tsbuildinfo',
      },
      main: './dist-cjs/index.js',
      types: './dist-types/index.d.ts',
      module: './dist-es/index.js',
      sideEffects: false,
      dependencies: {
        '@aws-crypto/sha256-browser': '2.0.0',
        '@aws-crypto/sha256-js': '2.0.0',
        '@aws-sdk/client-sts': '3.141.0',
        '@aws-sdk/config-resolver': '3.130.0',
        '@aws-sdk/credential-provider-node': '3.141.0',
        '@aws-sdk/fetch-http-handler': '3.131.0',
        '@aws-sdk/hash-node': '3.127.0',
        '@aws-sdk/invalid-dependency': '3.127.0',
        '@aws-sdk/middleware-content-length': '3.127.0',
        '@aws-sdk/middleware-endpoint-discovery': '3.130.0',
        '@aws-sdk/middleware-host-header': '3.127.0',
        '@aws-sdk/middleware-logger': '3.127.0',
        '@aws-sdk/middleware-recursion-detection': '3.127.0',
        '@aws-sdk/middleware-retry': '3.127.0',
        '@aws-sdk/middleware-serde': '3.127.0',
        '@aws-sdk/middleware-signing': '3.130.0',
        '@aws-sdk/middleware-stack': '3.127.0',
        '@aws-sdk/middleware-user-agent': '3.127.0',
        '@aws-sdk/node-config-provider': '3.127.0',
        '@aws-sdk/node-http-handler': '3.127.0',
        '@aws-sdk/protocol-http': '3.127.0',
        '@aws-sdk/smithy-client': '3.137.0',
        '@aws-sdk/types': '3.127.0',
        '@aws-sdk/url-parser': '3.127.0',
        '@aws-sdk/util-base64-browser': '3.109.0',
        '@aws-sdk/util-base64-node': '3.55.0',
        '@aws-sdk/util-body-length-browser': '3.55.0',
        '@aws-sdk/util-body-length-node': '3.55.0',
        '@aws-sdk/util-defaults-mode-browser': '3.137.0',
        '@aws-sdk/util-defaults-mode-node': '3.137.0',
        '@aws-sdk/util-user-agent-browser': '3.127.0',
        '@aws-sdk/util-user-agent-node': '3.127.0',
        '@aws-sdk/util-utf8-browser': '3.109.0',
        '@aws-sdk/util-utf8-node': '3.109.0',
        '@aws-sdk/util-waiter': '3.127.0',
        tslib: '^2.3.1',
        uuid: '^8.3.2',
      },
      devDependencies: {
        '@aws-sdk/service-client-documentation-generator': '3.58.0',
        '@tsconfig/recommended': '1.0.1',
        '@types/node': '^12.7.5',
        '@types/uuid': '^8.3.0',
        concurrently: '7.0.0',
        'downlevel-dts': '0.7.0',
        rimraf: '3.0.2',
        typedoc: '0.19.2',
        typescript: '~4.6.2',
      },
      engines: {
        node: '>=12.0.0',
      },
      typesVersions: {
        '<4.0': {
          'dist-types/*': ['dist-types/ts3.4/*'],
        },
      },
      files: ['dist-*'],
      author: {
        name: 'AWS SDK for JavaScript Team',
        url: 'https://aws.amazon.com/javascript/',
      },
      license: 'Apache-2.0',
      browser: {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.browser',
      },
      'react-native': {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.native',
      },
      homepage: 'https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-dynamodb',
      repository: {
        type: 'git',
        url: 'https://github.com/aws/aws-sdk-js-v3.git',
        directory: 'clients/client-dynamodb',
      },
    };
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/tslib/tslib.js
var require_tslib9 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/tslib/tslib.js'(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function (factory) {
      var root =
        typeof global === 'object' ? global : typeof self === 'object' ? self : typeof this === 'object' ? this : {};
      if (typeof define === 'function' && define.amd) {
        define('tslib', ['exports'], function (exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === 'object' && typeof module2.exports === 'object') {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === 'function') {
            Object.defineProperty(exports2, '__esModule', { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function (id, v) {
          return (exports2[id] = previous ? previous(id, v) : v);
        };
      }
    })(function (exporter) {
      var extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      __extends = function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
      __assign =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function (decorators, target, key, desc) {
        var c = arguments.length,
          r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
          d;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function (thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g;
        return (
          (g = { next: verb(0), throw: verb(1), return: verb(2) }),
          typeof Symbol === 'function' &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError('Generator is already executing.');
          while (_)
            try {
              if (
                ((f = 1),
                y &&
                  (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function (m, o) {
        for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
      };
      __createBinding = Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          };
      __values = function (o) {
        var s = typeof Symbol === 'function' && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === 'number')
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            },
          };
        throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      };
      __read = function (o, n) {
        var m = typeof Symbol === 'function' && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i['return'])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
        return r;
      };
      __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function (v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      };
      __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = {}),
          verb('next'),
          verb('throw'),
          verb('return'),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        function verb(n) {
          if (g[n])
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume('next', value);
        }
        function reject(value) {
          resume('throw', value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function (o) {
        var i, p;
        return (
          (i = {}),
          verb('next'),
          verb('throw', function (e) {
            throw e;
          }),
          verb('return'),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p) ? { value: __await(o[n](v)), done: n === 'return' } : f ? f(v) : v;
              }
            : f;
        }
      };
      __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, 'raw', { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          };
      __importStar = function (mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      __importDefault = function (mod2) {
        return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
      };
      __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot read private member from an object whose class did not declare it');
        return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot write private member to an object whose class did not declare it');
        return kind === 'a' ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== 'object' && typeof receiver !== 'function'))
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === 'function' ? receiver === state : state.has(receiver);
      };
      exporter('__extends', __extends);
      exporter('__assign', __assign);
      exporter('__rest', __rest);
      exporter('__decorate', __decorate);
      exporter('__param', __param);
      exporter('__metadata', __metadata);
      exporter('__awaiter', __awaiter);
      exporter('__generator', __generator);
      exporter('__exportStar', __exportStar);
      exporter('__createBinding', __createBinding);
      exporter('__values', __values);
      exporter('__read', __read);
      exporter('__spread', __spread);
      exporter('__spreadArrays', __spreadArrays);
      exporter('__spreadArray', __spreadArray);
      exporter('__await', __await);
      exporter('__asyncGenerator', __asyncGenerator);
      exporter('__asyncDelegator', __asyncDelegator);
      exporter('__asyncValues', __asyncValues);
      exporter('__makeTemplateObject', __makeTemplateObject);
      exporter('__importStar', __importStar);
      exporter('__importDefault', __importDefault);
      exporter('__classPrivateFieldGet', __classPrivateFieldGet);
      exporter('__classPrivateFieldSet', __classPrivateFieldSet);
      exporter('__classPrivateFieldIn', __classPrivateFieldIn);
    });
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js
var require_deserializerMiddleware2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.deserializerMiddleware = void 0;
    var deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed,
        };
      } catch (error) {
        Object.defineProperty(error, '$response', {
          value: response,
        });
        throw error;
      }
    };
    exports.deserializerMiddleware = deserializerMiddleware;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js
var require_serializerMiddleware2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.serializerMiddleware = void 0;
    var serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
      const request = await serializer(args.input, options);
      return next({
        ...args,
        request,
      });
    };
    exports.serializerMiddleware = serializerMiddleware;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js
var require_serdePlugin2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSerdePlugin = exports.serializerMiddlewareOption = exports.deserializerMiddlewareOption = void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware2();
    var serializerMiddleware_1 = require_serializerMiddleware2();
    exports.deserializerMiddlewareOption = {
      name: 'deserializerMiddleware',
      step: 'deserialize',
      tags: ['DESERIALIZER'],
      override: true,
    };
    exports.serializerMiddlewareOption = {
      name: 'serializerMiddleware',
      step: 'serialize',
      tags: ['SERIALIZER'],
      override: true,
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add(
            (0, deserializerMiddleware_1.deserializerMiddleware)(config, deserializer),
            exports.deserializerMiddlewareOption
          );
          commandStack.add(
            (0, serializerMiddleware_1.serializerMiddleware)(config, serializer),
            exports.serializerMiddlewareOption
          );
        },
      };
    }
    exports.getSerdePlugin = getSerdePlugin;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_deserializerMiddleware2(), exports);
    tslib_1.__exportStar(require_serdePlugin2(), exports);
    tslib_1.__exportStar(require_serializerMiddleware2(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js
var require_ProviderError2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ProviderError = void 0;
    var ProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = 'ProviderError';
        Object.setPrototypeOf(this, ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports.ProviderError = ProviderError;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError2();
    var CredentialsProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = 'CredentialsProviderError';
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
      }
    };
    exports.CredentialsProviderError = CredentialsProviderError;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js
var require_chain2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.chain = void 0;
    var ProviderError_1 = require_ProviderError2();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(new ProviderError_1.ProviderError('No providers in chain'));
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports.chain = chain;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js
var require_fromStatic2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports.fromStatic = fromStatic;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js
var require_memoize2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports.memoize = memoize;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/property-provider/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/property-provider/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_CredentialsProviderError2(), exports);
    tslib_1.__exportStar(require_ProviderError2(), exports);
    tslib_1.__exportStar(require_chain2(), exports);
    tslib_1.__exportStar(require_fromStatic2(), exports);
    tslib_1.__exportStar(require_memoize2(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toHex = exports.fromHex = void 0;
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error('Hex encoded strings must have an even number length');
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    exports.fromHex = fromHex;
    function toHex(bytes) {
      let out = '';
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    exports.toHex = toHex;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js
var require_constants6 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.MAX_PRESIGNED_TTL =
      exports.KEY_TYPE_IDENTIFIER =
      exports.MAX_CACHE_SIZE =
      exports.UNSIGNED_PAYLOAD =
      exports.EVENT_ALGORITHM_IDENTIFIER =
      exports.ALGORITHM_IDENTIFIER_V4A =
      exports.ALGORITHM_IDENTIFIER =
      exports.UNSIGNABLE_PATTERNS =
      exports.SEC_HEADER_PATTERN =
      exports.PROXY_HEADER_PATTERN =
      exports.ALWAYS_UNSIGNABLE_HEADERS =
      exports.HOST_HEADER =
      exports.TOKEN_HEADER =
      exports.SHA256_HEADER =
      exports.SIGNATURE_HEADER =
      exports.GENERATED_HEADERS =
      exports.DATE_HEADER =
      exports.AMZ_DATE_HEADER =
      exports.AUTH_HEADER =
      exports.REGION_SET_PARAM =
      exports.TOKEN_QUERY_PARAM =
      exports.SIGNATURE_QUERY_PARAM =
      exports.EXPIRES_QUERY_PARAM =
      exports.SIGNED_HEADERS_QUERY_PARAM =
      exports.AMZ_DATE_QUERY_PARAM =
      exports.CREDENTIAL_QUERY_PARAM =
      exports.ALGORITHM_QUERY_PARAM =
        void 0;
    exports.ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm';
    exports.CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential';
    exports.AMZ_DATE_QUERY_PARAM = 'X-Amz-Date';
    exports.SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders';
    exports.EXPIRES_QUERY_PARAM = 'X-Amz-Expires';
    exports.SIGNATURE_QUERY_PARAM = 'X-Amz-Signature';
    exports.TOKEN_QUERY_PARAM = 'X-Amz-Security-Token';
    exports.REGION_SET_PARAM = 'X-Amz-Region-Set';
    exports.AUTH_HEADER = 'authorization';
    exports.AMZ_DATE_HEADER = exports.AMZ_DATE_QUERY_PARAM.toLowerCase();
    exports.DATE_HEADER = 'date';
    exports.GENERATED_HEADERS = [exports.AUTH_HEADER, exports.AMZ_DATE_HEADER, exports.DATE_HEADER];
    exports.SIGNATURE_HEADER = exports.SIGNATURE_QUERY_PARAM.toLowerCase();
    exports.SHA256_HEADER = 'x-amz-content-sha256';
    exports.TOKEN_HEADER = exports.TOKEN_QUERY_PARAM.toLowerCase();
    exports.HOST_HEADER = 'host';
    exports.ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      'cache-control': true,
      connection: true,
      expect: true,
      from: true,
      'keep-alive': true,
      'max-forwards': true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      'transfer-encoding': true,
      upgrade: true,
      'user-agent': true,
      'x-amzn-trace-id': true,
    };
    exports.PROXY_HEADER_PATTERN = /^proxy-/;
    exports.SEC_HEADER_PATTERN = /^sec-/;
    exports.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    exports.ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256';
    exports.ALGORITHM_IDENTIFIER_V4A = 'AWS4-ECDSA-P256-SHA256';
    exports.EVENT_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256-PAYLOAD';
    exports.UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD';
    exports.MAX_CACHE_SIZE = 50;
    exports.KEY_TYPE_IDENTIFIER = 'aws4_request';
    exports.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js
var require_credentialDerivation2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.clearCredentialCache = exports.getSigningKey = exports.createScope = void 0;
    var util_hex_encoding_1 = require_dist_cjs27();
    var constants_1 = require_constants6();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = (shortDate, region, service) =>
      `${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;
    exports.createScope = createScope;
    var getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${(0, util_hex_encoding_1.toHex)(credsHash)}:${
        credentials.sessionToken
      }`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, constants_1.KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return (signingKeyCache[cacheKey] = key);
    };
    exports.getSigningKey = getSigningKey;
    var clearCredentialCache = () => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    };
    exports.clearCredentialCache = clearCredentialCache;
    var hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update(data);
      return hash.digest();
    };
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js
var require_getCanonicalHeaders2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCanonicalHeaders = void 0;
    var constants_1 = require_constants6();
    var getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (
          canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS ||
          (unsignableHeaders === null || unsignableHeaders === void 0
            ? void 0
            : unsignableHeaders.has(canonicalHeaderName)) ||
          constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||
          constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)
        ) {
          if (!signableHeaders || (signableHeaders && !signableHeaders.has(canonicalHeaderName))) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, ' ');
      }
      return canonical;
    };
    exports.getCanonicalHeaders = getCanonicalHeaders;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js
var require_escape_uri2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.escapeUri = void 0;
    var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports.escapeUri = escapeUri;
    var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js
var require_escape_uri_path2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri2();
    var escapeUriPath = (uri) => uri.split('/').map(escape_uri_1.escapeUri).join('/');
    exports.escapeUriPath = escapeUriPath;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_escape_uri2(), exports);
    tslib_1.__exportStar(require_escape_uri_path2(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js
var require_getCanonicalQuery2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCanonicalQuery = void 0;
    var util_uri_escape_1 = require_dist_cjs28();
    var constants_1 = require_constants6();
    var getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === 'string') {
          serialized[key] = `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value
            .slice(0)
            .sort()
            .reduce(
              (encoded, value2) =>
                encoded.concat([
                  `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value2)}`,
                ]),
              []
            )
            .join('&');
        }
      }
      return keys
        .map((key) => serialized[key])
        .filter((serialized2) => serialized2)
        .join('&');
    };
    exports.getCanonicalQuery = getCanonicalQuery;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js
var require_getPayloadHash2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getPayloadHash = void 0;
    var is_array_buffer_1 = require_dist_cjs21();
    var util_hex_encoding_1 = require_dist_cjs27();
    var constants_1 = require_constants6();
    var getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';
      } else if (typeof body === 'string' || ArrayBuffer.isView(body) || (0, is_array_buffer_1.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update(body);
        return (0, util_hex_encoding_1.toHex)(await hashCtor.digest());
      }
      return constants_1.UNSIGNED_PAYLOAD;
    };
    exports.getPayloadHash = getPayloadHash;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js
var require_headerUtil2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.deleteHeader = exports.getHeaderValue = exports.hasHeader = void 0;
    var hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports.hasHeader = hasHeader;
    var getHeaderValue = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return headers[headerName];
        }
      }
      return void 0;
    };
    exports.getHeaderValue = getHeaderValue;
    var deleteHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          delete headers[headerName];
        }
      }
    };
    exports.deleteHeader = deleteHeader;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js
var require_cloneRequest2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.cloneQuery = exports.cloneRequest = void 0;
    var cloneRequest = ({ headers, query, ...rest }) => ({
      ...rest,
      headers: { ...headers },
      query: query ? (0, exports.cloneQuery)(query) : void 0,
    });
    exports.cloneRequest = cloneRequest;
    var cloneQuery = (query) =>
      Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param,
        };
      }, {});
    exports.cloneQuery = cloneQuery;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js
var require_moveHeadersToQuery2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.moveHeadersToQuery = void 0;
    var cloneRequest_1 = require_cloneRequest2();
    var moveHeadersToQuery = (request, options = {}) => {
      var _a;
      const { headers, query = {} } =
        typeof request.clone === 'function' ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (
          lname.slice(0, 6) === 'x-amz-' &&
          !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))
        ) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query,
      };
    };
    exports.moveHeadersToQuery = moveHeadersToQuery;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js
var require_prepareRequest2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.prepareRequest = void 0;
    var cloneRequest_1 = require_cloneRequest2();
    var constants_1 = require_constants6();
    var prepareRequest = (request) => {
      request = typeof request.clone === 'function' ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const headerName of Object.keys(request.headers)) {
        if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    };
    exports.prepareRequest = prepareRequest;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js
var require_utilDate2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toDate = exports.iso8601 = void 0;
    var iso8601 = (time) =>
      (0, exports.toDate)(time)
        .toISOString()
        .replace(/\.\d{3}Z$/, 'Z');
    exports.iso8601 = iso8601;
    var toDate = (time) => {
      if (typeof time === 'number') {
        return new Date(time * 1e3);
      }
      if (typeof time === 'string') {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
    exports.toDate = toDate;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js
var require_SignatureV42 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SignatureV4 = void 0;
    var util_hex_encoding_1 = require_dist_cjs27();
    var util_middleware_1 = require_dist_cjs6();
    var constants_1 = require_constants6();
    var credentialDerivation_1 = require_credentialDerivation2();
    var getCanonicalHeaders_1 = require_getCanonicalHeaders2();
    var getCanonicalQuery_1 = require_getCanonicalQuery2();
    var getPayloadHash_1 = require_getPayloadHash2();
    var headerUtil_1 = require_headerUtil2();
    var moveHeadersToQuery_1 = require_moveHeadersToQuery2();
    var prepareRequest_1 = require_prepareRequest2();
    var utilDate_1 = require_utilDate2();
    var SignatureV4 = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true;
        this.regionProvider = (0, util_middleware_1.normalizeProvider)(region);
        this.credentialProvider = (0, util_middleware_1.normalizeProvider)(credentials);
      }
      async presign(originalRequest, options = {}) {
        const {
          signingDate = new Date(),
          expiresIn = 3600,
          unsignableHeaders,
          unhoistableHeaders,
          signableHeaders,
          signingRegion,
          signingService,
        } = options;
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
          return Promise.reject(
            'Signature version 4 presigned URLs must have an expiration date less than one week in the future'
          );
        }
        const scope = (0, credentialDerivation_1.createScope)(
          shortDate,
          region,
          signingService !== null && signingService !== void 0 ? signingService : this.service
        );
        const request = (0, moveHeadersToQuery_1.moveHeadersToQuery)(
          (0, prepareRequest_1.prepareRequest)(originalRequest),
          { unhoistableHeaders }
        );
        if (credentials.sessionToken) {
          request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;
        request.query[constants_1.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(
          request,
          unsignableHeaders,
          signableHeaders
        );
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(
          longDate,
          scope,
          this.getSigningKey(credentials, region, shortDate, signingService),
          this.createCanonicalRequest(
            request,
            canonicalHeaders,
            await (0, getPayloadHash_1.getPayloadHash)(originalRequest, this.sha256)
          )
        );
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === 'string') {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent(
        { headers, payload },
        { signingDate = new Date(), priorSignature, signingRegion, signingService }
      ) {
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(
          shortDate,
          region,
          signingService !== null && signingService !== void 0 ? signingService : this.service
        );
        const hashedPayload = await (0, getPayloadHash_1.getPayloadHash)({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, util_hex_encoding_1.toHex)(await hash.digest());
        const stringToSign = [
          constants_1.EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload,
        ].join('\n');
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update(stringToSign);
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      async signRequest(
        requestToSign,
        { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}
      ) {
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const request = (0, prepareRequest_1.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(
          shortDate,
          region,
          signingService !== null && signingService !== void 0 ? signingService : this.service
        );
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0, getPayloadHash_1.getPayloadHash)(request, this.sha256);
        if (!(0, headerUtil_1.hasHeader)(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(
          request,
          unsignableHeaders,
          signableHeaders
        );
        const signature = await this.getSignature(
          longDate,
          scope,
          this.getSigningKey(credentials, region, shortDate, signingService),
          this.createCanonicalRequest(request, canonicalHeaders, payloadHash)
        );
        request.headers[constants_1.AUTH_HEADER] = `${constants_1.ALGORITHM_IDENTIFIER} Credential=${
          credentials.accessKeyId
        }/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, getCanonicalQuery_1.getCanonicalQuery)(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join('\n')}

${sortedHeaders.join(';')}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update(canonicalRequest);
        const hashedRequest = await hash.digest();
        return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, util_hex_encoding_1.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split('/')) {
            if ((pathSegment === null || pathSegment === void 0 ? void 0 : pathSegment.length) === 0) continue;
            if (pathSegment === '.') continue;
            if (pathSegment === '..') {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${
            (path === null || path === void 0 ? void 0 : path.startsWith('/')) ? '/' : ''
          }${normalizedPathSegments.join('/')}${
            normalizedPathSegments.length > 0 && (path === null || path === void 0 ? void 0 : path.endsWith('/'))
              ? '/'
              : ''
          }`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, '/');
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update(stringToSign);
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return (0, credentialDerivation_1.getSigningKey)(
          this.sha256,
          credentials,
          shortDate,
          region,
          service || this.service
        );
      }
    };
    exports.SignatureV4 = SignatureV4;
    var formatDate = (now) => {
      const longDate = (0, utilDate_1.iso8601)(now).replace(/[\-:]/g, '');
      return {
        longDate,
        shortDate: longDate.slice(0, 8),
      };
    };
    var getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(';');
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.prepareRequest =
      exports.moveHeadersToQuery =
      exports.getPayloadHash =
      exports.getCanonicalQuery =
      exports.getCanonicalHeaders =
        void 0;
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_SignatureV42(), exports);
    var getCanonicalHeaders_1 = require_getCanonicalHeaders2();
    Object.defineProperty(exports, 'getCanonicalHeaders', {
      enumerable: true,
      get: function () {
        return getCanonicalHeaders_1.getCanonicalHeaders;
      },
    });
    var getCanonicalQuery_1 = require_getCanonicalQuery2();
    Object.defineProperty(exports, 'getCanonicalQuery', {
      enumerable: true,
      get: function () {
        return getCanonicalQuery_1.getCanonicalQuery;
      },
    });
    var getPayloadHash_1 = require_getPayloadHash2();
    Object.defineProperty(exports, 'getPayloadHash', {
      enumerable: true,
      get: function () {
        return getPayloadHash_1.getPayloadHash;
      },
    });
    var moveHeadersToQuery_1 = require_moveHeadersToQuery2();
    Object.defineProperty(exports, 'moveHeadersToQuery', {
      enumerable: true,
      get: function () {
        return moveHeadersToQuery_1.moveHeadersToQuery;
      },
    });
    var prepareRequest_1 = require_prepareRequest2();
    Object.defineProperty(exports, 'prepareRequest', {
      enumerable: true,
      get: function () {
        return prepareRequest_1.prepareRequest;
      },
    });
    tslib_1.__exportStar(require_credentialDerivation2(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js
var require_configurations5 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveSigV4AuthConfig = exports.resolveAwsAuthConfig = void 0;
    var property_provider_1 = require_dist_cjs26();
    var signature_v4_1 = require_dist_cjs29();
    var CREDENTIAL_EXPIRE_WINDOW = 3e5;
    var resolveAwsAuthConfig = (input) => {
      const normalizedCreds = input.credentials
        ? normalizeCredentialProvider(input.credentials)
        : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = normalizeProvider(input.signer);
      } else {
        signer = () =>
          normalizeProvider(input.region)()
            .then(async (region) => [
              (await input.regionInfoProvider(region, {
                useFipsEndpoint: await input.useFipsEndpoint(),
                useDualstackEndpoint: await input.useDualstackEndpoint(),
              })) || {},
              region,
            ])
            .then(([regionInfo, region]) => {
              const { signingRegion, signingService } = regionInfo;
              input.signingRegion = input.signingRegion || signingRegion || region;
              input.signingName = input.signingName || signingService || input.serviceId;
              const params = {
                ...input,
                credentials: normalizedCreds,
                region: input.signingRegion,
                service: input.signingName,
                sha256,
                uriEscapePath: signingEscapePath,
              };
              const signerConstructor = input.signerConstructor || signature_v4_1.SignatureV4;
              return new signerConstructor(params);
            });
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer,
      };
    };
    exports.resolveAwsAuthConfig = resolveAwsAuthConfig;
    var resolveSigV4AuthConfig = (input) => {
      const normalizedCreds = input.credentials
        ? normalizeCredentialProvider(input.credentials)
        : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = normalizeProvider(input.signer);
      } else {
        signer = normalizeProvider(
          new signature_v4_1.SignatureV4({
            credentials: normalizedCreds,
            region: input.region,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath,
          })
        );
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer,
      };
    };
    exports.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
    var normalizeProvider = (input) => {
      if (typeof input === 'object') {
        const promisified = Promise.resolve(input);
        return () => promisified;
      }
      return input;
    };
    var normalizeCredentialProvider = (credentials) => {
      if (typeof credentials === 'function') {
        return (0, property_provider_1.memoize)(
          credentials,
          (credentials2) =>
            credentials2.expiration !== void 0 &&
            credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW,
          (credentials2) => credentials2.expiration !== void 0
        );
      }
      return normalizeProvider(credentials);
    };
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler4 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest4 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HttpRequest = void 0;
    var HttpRequest = class {
      constructor(options) {
        this.method = options.method || 'GET';
        this.hostname = options.hostname || 'localhost';
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol
          ? options.protocol.slice(-1) !== ':'
            ? `${options.protocol}:`
            : options.protocol
          : 'https:';
        this.path = options.path ? (options.path.charAt(0) !== '/' ? `/${options.path}` : options.path) : '/';
      }
      static isInstance(request) {
        if (!request) return false;
        const req = request;
        return (
          'method' in req &&
          'protocol' in req &&
          'hostname' in req &&
          'path' in req &&
          typeof req['query'] === 'object' &&
          typeof req['headers'] === 'object'
        );
      }
      clone() {
        const cloned = new HttpRequest({
          ...this,
          headers: { ...this.headers },
        });
        if (cloned.query) cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param,
        };
      }, {});
    }
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse4 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response) return false;
        const resp = response;
        return typeof resp.statusCode === 'number' && typeof resp.headers === 'object';
      }
    };
    exports.HttpResponse = HttpResponse;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname4 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports.isValidHostname = isValidHostname;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_httpHandler4(), exports);
    tslib_1.__exportStar(require_httpRequest4(), exports);
    tslib_1.__exportStar(require_httpResponse4(), exports);
    tslib_1.__exportStar(require_isValidHostname4(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js
var require_getSkewCorrectedDate2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSkewCorrectedDate = void 0;
    var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
    exports.getSkewCorrectedDate = getSkewCorrectedDate;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js
var require_isClockSkewed2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isClockSkewed = void 0;
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate2();
    var isClockSkewed = (clockTime, systemClockOffset) =>
      Math.abs((0, getSkewCorrectedDate_1.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 3e5;
    exports.isClockSkewed = isClockSkewed;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js
var require_getUpdatedSystemClockOffset2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getUpdatedSystemClockOffset = void 0;
    var isClockSkewed_1 = require_isClockSkewed2();
    var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if ((0, isClockSkewed_1.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
    exports.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js
var require_middleware2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSigV4AuthPlugin =
      exports.getAwsAuthPlugin =
      exports.awsAuthMiddlewareOptions =
      exports.awsAuthMiddleware =
        void 0;
    var protocol_http_1 = require_dist_cjs30();
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate2();
    var getUpdatedSystemClockOffset_1 = require_getUpdatedSystemClockOffset2();
    var awsAuthMiddleware = (options) => (next, context) =>
      async function (args) {
        if (!protocol_http_1.HttpRequest.isInstance(args.request)) return next(args);
        const signer = await options.signer();
        const output = await next({
          ...args,
          request: await signer.sign(args.request, {
            signingDate: (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(options.systemClockOffset),
            signingRegion: context['signing_region'],
            signingService: context['signing_service'],
          }),
        }).catch((error) => {
          var _a;
          const serverTime = (_a = error.ServerTime) !== null && _a !== void 0 ? _a : getDateHeader(error.$response);
          if (serverTime) {
            options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(
              serverTime,
              options.systemClockOffset
            );
          }
          throw error;
        });
        const dateHeader = getDateHeader(output.response);
        if (dateHeader) {
          options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(
            dateHeader,
            options.systemClockOffset
          );
        }
        return output;
      };
    exports.awsAuthMiddleware = awsAuthMiddleware;
    var getDateHeader = (response) => {
      var _a, _b, _c;
      return protocol_http_1.HttpResponse.isInstance(response)
        ? (_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0
          ? _b
          : (_c = response.headers) === null || _c === void 0
          ? void 0
          : _c.Date
        : void 0;
    };
    exports.awsAuthMiddlewareOptions = {
      name: 'awsAuthMiddleware',
      tags: ['SIGNATURE', 'AWSAUTH'],
      relation: 'after',
      toMiddleware: 'retryMiddleware',
      override: true,
    };
    var getAwsAuthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.awsAuthMiddleware)(options), exports.awsAuthMiddlewareOptions);
      },
    });
    exports.getAwsAuthPlugin = getAwsAuthPlugin;
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_configurations5(), exports);
    tslib_1.__exportStar(require_middleware2(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js
var require_STSServiceException = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.STSServiceException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var STSServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, STSServiceException.prototype);
      }
    };
    exports.STSServiceException = STSServiceException;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js
var require_models_02 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetSessionTokenResponseFilterSensitiveLog =
      exports.GetSessionTokenRequestFilterSensitiveLog =
      exports.GetFederationTokenResponseFilterSensitiveLog =
      exports.FederatedUserFilterSensitiveLog =
      exports.GetFederationTokenRequestFilterSensitiveLog =
      exports.GetCallerIdentityResponseFilterSensitiveLog =
      exports.GetCallerIdentityRequestFilterSensitiveLog =
      exports.GetAccessKeyInfoResponseFilterSensitiveLog =
      exports.GetAccessKeyInfoRequestFilterSensitiveLog =
      exports.DecodeAuthorizationMessageResponseFilterSensitiveLog =
      exports.DecodeAuthorizationMessageRequestFilterSensitiveLog =
      exports.AssumeRoleWithWebIdentityResponseFilterSensitiveLog =
      exports.AssumeRoleWithWebIdentityRequestFilterSensitiveLog =
      exports.AssumeRoleWithSAMLResponseFilterSensitiveLog =
      exports.AssumeRoleWithSAMLRequestFilterSensitiveLog =
      exports.AssumeRoleResponseFilterSensitiveLog =
      exports.CredentialsFilterSensitiveLog =
      exports.AssumeRoleRequestFilterSensitiveLog =
      exports.TagFilterSensitiveLog =
      exports.PolicyDescriptorTypeFilterSensitiveLog =
      exports.AssumedRoleUserFilterSensitiveLog =
      exports.InvalidAuthorizationMessageException =
      exports.IDPCommunicationErrorException =
      exports.InvalidIdentityTokenException =
      exports.IDPRejectedClaimException =
      exports.RegionDisabledException =
      exports.PackedPolicyTooLargeException =
      exports.MalformedPolicyDocumentException =
      exports.ExpiredTokenException =
        void 0;
    var STSServiceException_1 = require_STSServiceException();
    var ExpiredTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'ExpiredTokenException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ExpiredTokenException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
      }
    };
    exports.ExpiredTokenException = ExpiredTokenException;
    var MalformedPolicyDocumentException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'MalformedPolicyDocumentException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'MalformedPolicyDocumentException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
      }
    };
    exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var PackedPolicyTooLargeException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'PackedPolicyTooLargeException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'PackedPolicyTooLargeException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, PackedPolicyTooLargeException.prototype);
      }
    };
    exports.PackedPolicyTooLargeException = PackedPolicyTooLargeException;
    var RegionDisabledException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'RegionDisabledException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'RegionDisabledException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, RegionDisabledException.prototype);
      }
    };
    exports.RegionDisabledException = RegionDisabledException;
    var IDPRejectedClaimException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'IDPRejectedClaimException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'IDPRejectedClaimException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, IDPRejectedClaimException.prototype);
      }
    };
    exports.IDPRejectedClaimException = IDPRejectedClaimException;
    var InvalidIdentityTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'InvalidIdentityTokenException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidIdentityTokenException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidIdentityTokenException.prototype);
      }
    };
    exports.InvalidIdentityTokenException = InvalidIdentityTokenException;
    var IDPCommunicationErrorException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'IDPCommunicationErrorException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'IDPCommunicationErrorException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, IDPCommunicationErrorException.prototype);
      }
    };
    exports.IDPCommunicationErrorException = IDPCommunicationErrorException;
    var InvalidAuthorizationMessageException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'InvalidAuthorizationMessageException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidAuthorizationMessageException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidAuthorizationMessageException.prototype);
      }
    };
    exports.InvalidAuthorizationMessageException = InvalidAuthorizationMessageException;
    var AssumedRoleUserFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.AssumedRoleUserFilterSensitiveLog = AssumedRoleUserFilterSensitiveLog;
    var PolicyDescriptorTypeFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.PolicyDescriptorTypeFilterSensitiveLog = PolicyDescriptorTypeFilterSensitiveLog;
    var TagFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.TagFilterSensitiveLog = TagFilterSensitiveLog;
    var AssumeRoleRequestFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.AssumeRoleRequestFilterSensitiveLog = AssumeRoleRequestFilterSensitiveLog;
    var CredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.CredentialsFilterSensitiveLog = CredentialsFilterSensitiveLog;
    var AssumeRoleResponseFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.AssumeRoleResponseFilterSensitiveLog = AssumeRoleResponseFilterSensitiveLog;
    var AssumeRoleWithSAMLRequestFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.AssumeRoleWithSAMLRequestFilterSensitiveLog = AssumeRoleWithSAMLRequestFilterSensitiveLog;
    var AssumeRoleWithSAMLResponseFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.AssumeRoleWithSAMLResponseFilterSensitiveLog = AssumeRoleWithSAMLResponseFilterSensitiveLog;
    var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = AssumeRoleWithWebIdentityRequestFilterSensitiveLog;
    var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = AssumeRoleWithWebIdentityResponseFilterSensitiveLog;
    var DecodeAuthorizationMessageRequestFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DecodeAuthorizationMessageRequestFilterSensitiveLog = DecodeAuthorizationMessageRequestFilterSensitiveLog;
    var DecodeAuthorizationMessageResponseFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.DecodeAuthorizationMessageResponseFilterSensitiveLog = DecodeAuthorizationMessageResponseFilterSensitiveLog;
    var GetAccessKeyInfoRequestFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.GetAccessKeyInfoRequestFilterSensitiveLog = GetAccessKeyInfoRequestFilterSensitiveLog;
    var GetAccessKeyInfoResponseFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.GetAccessKeyInfoResponseFilterSensitiveLog = GetAccessKeyInfoResponseFilterSensitiveLog;
    var GetCallerIdentityRequestFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.GetCallerIdentityRequestFilterSensitiveLog = GetCallerIdentityRequestFilterSensitiveLog;
    var GetCallerIdentityResponseFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.GetCallerIdentityResponseFilterSensitiveLog = GetCallerIdentityResponseFilterSensitiveLog;
    var GetFederationTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.GetFederationTokenRequestFilterSensitiveLog = GetFederationTokenRequestFilterSensitiveLog;
    var FederatedUserFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.FederatedUserFilterSensitiveLog = FederatedUserFilterSensitiveLog;
    var GetFederationTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.GetFederationTokenResponseFilterSensitiveLog = GetFederationTokenResponseFilterSensitiveLog;
    var GetSessionTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.GetSessionTokenRequestFilterSensitiveLog = GetSessionTokenRequestFilterSensitiveLog;
    var GetSessionTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.GetSessionTokenResponseFilterSensitiveLog = GetSessionTokenResponseFilterSensitiveLog;
  },
});

// node_modules/entities/lib/maps/entities.json
var require_entities = __commonJS({
  'node_modules/entities/lib/maps/entities.json'(exports, module2) {
    module2.exports = {
      Aacute: '\xC1',
      aacute: '\xE1',
      Abreve: '\u0102',
      abreve: '\u0103',
      ac: '\u223E',
      acd: '\u223F',
      acE: '\u223E\u0333',
      Acirc: '\xC2',
      acirc: '\xE2',
      acute: '\xB4',
      Acy: '\u0410',
      acy: '\u0430',
      AElig: '\xC6',
      aelig: '\xE6',
      af: '\u2061',
      Afr: '\u{1D504}',
      afr: '\u{1D51E}',
      Agrave: '\xC0',
      agrave: '\xE0',
      alefsym: '\u2135',
      aleph: '\u2135',
      Alpha: '\u0391',
      alpha: '\u03B1',
      Amacr: '\u0100',
      amacr: '\u0101',
      amalg: '\u2A3F',
      amp: '&',
      AMP: '&',
      andand: '\u2A55',
      And: '\u2A53',
      and: '\u2227',
      andd: '\u2A5C',
      andslope: '\u2A58',
      andv: '\u2A5A',
      ang: '\u2220',
      ange: '\u29A4',
      angle: '\u2220',
      angmsdaa: '\u29A8',
      angmsdab: '\u29A9',
      angmsdac: '\u29AA',
      angmsdad: '\u29AB',
      angmsdae: '\u29AC',
      angmsdaf: '\u29AD',
      angmsdag: '\u29AE',
      angmsdah: '\u29AF',
      angmsd: '\u2221',
      angrt: '\u221F',
      angrtvb: '\u22BE',
      angrtvbd: '\u299D',
      angsph: '\u2222',
      angst: '\xC5',
      angzarr: '\u237C',
      Aogon: '\u0104',
      aogon: '\u0105',
      Aopf: '\u{1D538}',
      aopf: '\u{1D552}',
      apacir: '\u2A6F',
      ap: '\u2248',
      apE: '\u2A70',
      ape: '\u224A',
      apid: '\u224B',
      apos: "'",
      ApplyFunction: '\u2061',
      approx: '\u2248',
      approxeq: '\u224A',
      Aring: '\xC5',
      aring: '\xE5',
      Ascr: '\u{1D49C}',
      ascr: '\u{1D4B6}',
      Assign: '\u2254',
      ast: '*',
      asymp: '\u2248',
      asympeq: '\u224D',
      Atilde: '\xC3',
      atilde: '\xE3',
      Auml: '\xC4',
      auml: '\xE4',
      awconint: '\u2233',
      awint: '\u2A11',
      backcong: '\u224C',
      backepsilon: '\u03F6',
      backprime: '\u2035',
      backsim: '\u223D',
      backsimeq: '\u22CD',
      Backslash: '\u2216',
      Barv: '\u2AE7',
      barvee: '\u22BD',
      barwed: '\u2305',
      Barwed: '\u2306',
      barwedge: '\u2305',
      bbrk: '\u23B5',
      bbrktbrk: '\u23B6',
      bcong: '\u224C',
      Bcy: '\u0411',
      bcy: '\u0431',
      bdquo: '\u201E',
      becaus: '\u2235',
      because: '\u2235',
      Because: '\u2235',
      bemptyv: '\u29B0',
      bepsi: '\u03F6',
      bernou: '\u212C',
      Bernoullis: '\u212C',
      Beta: '\u0392',
      beta: '\u03B2',
      beth: '\u2136',
      between: '\u226C',
      Bfr: '\u{1D505}',
      bfr: '\u{1D51F}',
      bigcap: '\u22C2',
      bigcirc: '\u25EF',
      bigcup: '\u22C3',
      bigodot: '\u2A00',
      bigoplus: '\u2A01',
      bigotimes: '\u2A02',
      bigsqcup: '\u2A06',
      bigstar: '\u2605',
      bigtriangledown: '\u25BD',
      bigtriangleup: '\u25B3',
      biguplus: '\u2A04',
      bigvee: '\u22C1',
      bigwedge: '\u22C0',
      bkarow: '\u290D',
      blacklozenge: '\u29EB',
      blacksquare: '\u25AA',
      blacktriangle: '\u25B4',
      blacktriangledown: '\u25BE',
      blacktriangleleft: '\u25C2',
      blacktriangleright: '\u25B8',
      blank: '\u2423',
      blk12: '\u2592',
      blk14: '\u2591',
      blk34: '\u2593',
      block: '\u2588',
      bne: '=\u20E5',
      bnequiv: '\u2261\u20E5',
      bNot: '\u2AED',
      bnot: '\u2310',
      Bopf: '\u{1D539}',
      bopf: '\u{1D553}',
      bot: '\u22A5',
      bottom: '\u22A5',
      bowtie: '\u22C8',
      boxbox: '\u29C9',
      boxdl: '\u2510',
      boxdL: '\u2555',
      boxDl: '\u2556',
      boxDL: '\u2557',
      boxdr: '\u250C',
      boxdR: '\u2552',
      boxDr: '\u2553',
      boxDR: '\u2554',
      boxh: '\u2500',
      boxH: '\u2550',
      boxhd: '\u252C',
      boxHd: '\u2564',
      boxhD: '\u2565',
      boxHD: '\u2566',
      boxhu: '\u2534',
      boxHu: '\u2567',
      boxhU: '\u2568',
      boxHU: '\u2569',
      boxminus: '\u229F',
      boxplus: '\u229E',
      boxtimes: '\u22A0',
      boxul: '\u2518',
      boxuL: '\u255B',
      boxUl: '\u255C',
      boxUL: '\u255D',
      boxur: '\u2514',
      boxuR: '\u2558',
      boxUr: '\u2559',
      boxUR: '\u255A',
      boxv: '\u2502',
      boxV: '\u2551',
      boxvh: '\u253C',
      boxvH: '\u256A',
      boxVh: '\u256B',
      boxVH: '\u256C',
      boxvl: '\u2524',
      boxvL: '\u2561',
      boxVl: '\u2562',
      boxVL: '\u2563',
      boxvr: '\u251C',
      boxvR: '\u255E',
      boxVr: '\u255F',
      boxVR: '\u2560',
      bprime: '\u2035',
      breve: '\u02D8',
      Breve: '\u02D8',
      brvbar: '\xA6',
      bscr: '\u{1D4B7}',
      Bscr: '\u212C',
      bsemi: '\u204F',
      bsim: '\u223D',
      bsime: '\u22CD',
      bsolb: '\u29C5',
      bsol: '\\',
      bsolhsub: '\u27C8',
      bull: '\u2022',
      bullet: '\u2022',
      bump: '\u224E',
      bumpE: '\u2AAE',
      bumpe: '\u224F',
      Bumpeq: '\u224E',
      bumpeq: '\u224F',
      Cacute: '\u0106',
      cacute: '\u0107',
      capand: '\u2A44',
      capbrcup: '\u2A49',
      capcap: '\u2A4B',
      cap: '\u2229',
      Cap: '\u22D2',
      capcup: '\u2A47',
      capdot: '\u2A40',
      CapitalDifferentialD: '\u2145',
      caps: '\u2229\uFE00',
      caret: '\u2041',
      caron: '\u02C7',
      Cayleys: '\u212D',
      ccaps: '\u2A4D',
      Ccaron: '\u010C',
      ccaron: '\u010D',
      Ccedil: '\xC7',
      ccedil: '\xE7',
      Ccirc: '\u0108',
      ccirc: '\u0109',
      Cconint: '\u2230',
      ccups: '\u2A4C',
      ccupssm: '\u2A50',
      Cdot: '\u010A',
      cdot: '\u010B',
      cedil: '\xB8',
      Cedilla: '\xB8',
      cemptyv: '\u29B2',
      cent: '\xA2',
      centerdot: '\xB7',
      CenterDot: '\xB7',
      cfr: '\u{1D520}',
      Cfr: '\u212D',
      CHcy: '\u0427',
      chcy: '\u0447',
      check: '\u2713',
      checkmark: '\u2713',
      Chi: '\u03A7',
      chi: '\u03C7',
      circ: '\u02C6',
      circeq: '\u2257',
      circlearrowleft: '\u21BA',
      circlearrowright: '\u21BB',
      circledast: '\u229B',
      circledcirc: '\u229A',
      circleddash: '\u229D',
      CircleDot: '\u2299',
      circledR: '\xAE',
      circledS: '\u24C8',
      CircleMinus: '\u2296',
      CirclePlus: '\u2295',
      CircleTimes: '\u2297',
      cir: '\u25CB',
      cirE: '\u29C3',
      cire: '\u2257',
      cirfnint: '\u2A10',
      cirmid: '\u2AEF',
      cirscir: '\u29C2',
      ClockwiseContourIntegral: '\u2232',
      CloseCurlyDoubleQuote: '\u201D',
      CloseCurlyQuote: '\u2019',
      clubs: '\u2663',
      clubsuit: '\u2663',
      colon: ':',
      Colon: '\u2237',
      Colone: '\u2A74',
      colone: '\u2254',
      coloneq: '\u2254',
      comma: ',',
      commat: '@',
      comp: '\u2201',
      compfn: '\u2218',
      complement: '\u2201',
      complexes: '\u2102',
      cong: '\u2245',
      congdot: '\u2A6D',
      Congruent: '\u2261',
      conint: '\u222E',
      Conint: '\u222F',
      ContourIntegral: '\u222E',
      copf: '\u{1D554}',
      Copf: '\u2102',
      coprod: '\u2210',
      Coproduct: '\u2210',
      copy: '\xA9',
      COPY: '\xA9',
      copysr: '\u2117',
      CounterClockwiseContourIntegral: '\u2233',
      crarr: '\u21B5',
      cross: '\u2717',
      Cross: '\u2A2F',
      Cscr: '\u{1D49E}',
      cscr: '\u{1D4B8}',
      csub: '\u2ACF',
      csube: '\u2AD1',
      csup: '\u2AD0',
      csupe: '\u2AD2',
      ctdot: '\u22EF',
      cudarrl: '\u2938',
      cudarrr: '\u2935',
      cuepr: '\u22DE',
      cuesc: '\u22DF',
      cularr: '\u21B6',
      cularrp: '\u293D',
      cupbrcap: '\u2A48',
      cupcap: '\u2A46',
      CupCap: '\u224D',
      cup: '\u222A',
      Cup: '\u22D3',
      cupcup: '\u2A4A',
      cupdot: '\u228D',
      cupor: '\u2A45',
      cups: '\u222A\uFE00',
      curarr: '\u21B7',
      curarrm: '\u293C',
      curlyeqprec: '\u22DE',
      curlyeqsucc: '\u22DF',
      curlyvee: '\u22CE',
      curlywedge: '\u22CF',
      curren: '\xA4',
      curvearrowleft: '\u21B6',
      curvearrowright: '\u21B7',
      cuvee: '\u22CE',
      cuwed: '\u22CF',
      cwconint: '\u2232',
      cwint: '\u2231',
      cylcty: '\u232D',
      dagger: '\u2020',
      Dagger: '\u2021',
      daleth: '\u2138',
      darr: '\u2193',
      Darr: '\u21A1',
      dArr: '\u21D3',
      dash: '\u2010',
      Dashv: '\u2AE4',
      dashv: '\u22A3',
      dbkarow: '\u290F',
      dblac: '\u02DD',
      Dcaron: '\u010E',
      dcaron: '\u010F',
      Dcy: '\u0414',
      dcy: '\u0434',
      ddagger: '\u2021',
      ddarr: '\u21CA',
      DD: '\u2145',
      dd: '\u2146',
      DDotrahd: '\u2911',
      ddotseq: '\u2A77',
      deg: '\xB0',
      Del: '\u2207',
      Delta: '\u0394',
      delta: '\u03B4',
      demptyv: '\u29B1',
      dfisht: '\u297F',
      Dfr: '\u{1D507}',
      dfr: '\u{1D521}',
      dHar: '\u2965',
      dharl: '\u21C3',
      dharr: '\u21C2',
      DiacriticalAcute: '\xB4',
      DiacriticalDot: '\u02D9',
      DiacriticalDoubleAcute: '\u02DD',
      DiacriticalGrave: '`',
      DiacriticalTilde: '\u02DC',
      diam: '\u22C4',
      diamond: '\u22C4',
      Diamond: '\u22C4',
      diamondsuit: '\u2666',
      diams: '\u2666',
      die: '\xA8',
      DifferentialD: '\u2146',
      digamma: '\u03DD',
      disin: '\u22F2',
      div: '\xF7',
      divide: '\xF7',
      divideontimes: '\u22C7',
      divonx: '\u22C7',
      DJcy: '\u0402',
      djcy: '\u0452',
      dlcorn: '\u231E',
      dlcrop: '\u230D',
      dollar: '$',
      Dopf: '\u{1D53B}',
      dopf: '\u{1D555}',
      Dot: '\xA8',
      dot: '\u02D9',
      DotDot: '\u20DC',
      doteq: '\u2250',
      doteqdot: '\u2251',
      DotEqual: '\u2250',
      dotminus: '\u2238',
      dotplus: '\u2214',
      dotsquare: '\u22A1',
      doublebarwedge: '\u2306',
      DoubleContourIntegral: '\u222F',
      DoubleDot: '\xA8',
      DoubleDownArrow: '\u21D3',
      DoubleLeftArrow: '\u21D0',
      DoubleLeftRightArrow: '\u21D4',
      DoubleLeftTee: '\u2AE4',
      DoubleLongLeftArrow: '\u27F8',
      DoubleLongLeftRightArrow: '\u27FA',
      DoubleLongRightArrow: '\u27F9',
      DoubleRightArrow: '\u21D2',
      DoubleRightTee: '\u22A8',
      DoubleUpArrow: '\u21D1',
      DoubleUpDownArrow: '\u21D5',
      DoubleVerticalBar: '\u2225',
      DownArrowBar: '\u2913',
      downarrow: '\u2193',
      DownArrow: '\u2193',
      Downarrow: '\u21D3',
      DownArrowUpArrow: '\u21F5',
      DownBreve: '\u0311',
      downdownarrows: '\u21CA',
      downharpoonleft: '\u21C3',
      downharpoonright: '\u21C2',
      DownLeftRightVector: '\u2950',
      DownLeftTeeVector: '\u295E',
      DownLeftVectorBar: '\u2956',
      DownLeftVector: '\u21BD',
      DownRightTeeVector: '\u295F',
      DownRightVectorBar: '\u2957',
      DownRightVector: '\u21C1',
      DownTeeArrow: '\u21A7',
      DownTee: '\u22A4',
      drbkarow: '\u2910',
      drcorn: '\u231F',
      drcrop: '\u230C',
      Dscr: '\u{1D49F}',
      dscr: '\u{1D4B9}',
      DScy: '\u0405',
      dscy: '\u0455',
      dsol: '\u29F6',
      Dstrok: '\u0110',
      dstrok: '\u0111',
      dtdot: '\u22F1',
      dtri: '\u25BF',
      dtrif: '\u25BE',
      duarr: '\u21F5',
      duhar: '\u296F',
      dwangle: '\u29A6',
      DZcy: '\u040F',
      dzcy: '\u045F',
      dzigrarr: '\u27FF',
      Eacute: '\xC9',
      eacute: '\xE9',
      easter: '\u2A6E',
      Ecaron: '\u011A',
      ecaron: '\u011B',
      Ecirc: '\xCA',
      ecirc: '\xEA',
      ecir: '\u2256',
      ecolon: '\u2255',
      Ecy: '\u042D',
      ecy: '\u044D',
      eDDot: '\u2A77',
      Edot: '\u0116',
      edot: '\u0117',
      eDot: '\u2251',
      ee: '\u2147',
      efDot: '\u2252',
      Efr: '\u{1D508}',
      efr: '\u{1D522}',
      eg: '\u2A9A',
      Egrave: '\xC8',
      egrave: '\xE8',
      egs: '\u2A96',
      egsdot: '\u2A98',
      el: '\u2A99',
      Element: '\u2208',
      elinters: '\u23E7',
      ell: '\u2113',
      els: '\u2A95',
      elsdot: '\u2A97',
      Emacr: '\u0112',
      emacr: '\u0113',
      empty: '\u2205',
      emptyset: '\u2205',
      EmptySmallSquare: '\u25FB',
      emptyv: '\u2205',
      EmptyVerySmallSquare: '\u25AB',
      emsp13: '\u2004',
      emsp14: '\u2005',
      emsp: '\u2003',
      ENG: '\u014A',
      eng: '\u014B',
      ensp: '\u2002',
      Eogon: '\u0118',
      eogon: '\u0119',
      Eopf: '\u{1D53C}',
      eopf: '\u{1D556}',
      epar: '\u22D5',
      eparsl: '\u29E3',
      eplus: '\u2A71',
      epsi: '\u03B5',
      Epsilon: '\u0395',
      epsilon: '\u03B5',
      epsiv: '\u03F5',
      eqcirc: '\u2256',
      eqcolon: '\u2255',
      eqsim: '\u2242',
      eqslantgtr: '\u2A96',
      eqslantless: '\u2A95',
      Equal: '\u2A75',
      equals: '=',
      EqualTilde: '\u2242',
      equest: '\u225F',
      Equilibrium: '\u21CC',
      equiv: '\u2261',
      equivDD: '\u2A78',
      eqvparsl: '\u29E5',
      erarr: '\u2971',
      erDot: '\u2253',
      escr: '\u212F',
      Escr: '\u2130',
      esdot: '\u2250',
      Esim: '\u2A73',
      esim: '\u2242',
      Eta: '\u0397',
      eta: '\u03B7',
      ETH: '\xD0',
      eth: '\xF0',
      Euml: '\xCB',
      euml: '\xEB',
      euro: '\u20AC',
      excl: '!',
      exist: '\u2203',
      Exists: '\u2203',
      expectation: '\u2130',
      exponentiale: '\u2147',
      ExponentialE: '\u2147',
      fallingdotseq: '\u2252',
      Fcy: '\u0424',
      fcy: '\u0444',
      female: '\u2640',
      ffilig: '\uFB03',
      fflig: '\uFB00',
      ffllig: '\uFB04',
      Ffr: '\u{1D509}',
      ffr: '\u{1D523}',
      filig: '\uFB01',
      FilledSmallSquare: '\u25FC',
      FilledVerySmallSquare: '\u25AA',
      fjlig: 'fj',
      flat: '\u266D',
      fllig: '\uFB02',
      fltns: '\u25B1',
      fnof: '\u0192',
      Fopf: '\u{1D53D}',
      fopf: '\u{1D557}',
      forall: '\u2200',
      ForAll: '\u2200',
      fork: '\u22D4',
      forkv: '\u2AD9',
      Fouriertrf: '\u2131',
      fpartint: '\u2A0D',
      frac12: '\xBD',
      frac13: '\u2153',
      frac14: '\xBC',
      frac15: '\u2155',
      frac16: '\u2159',
      frac18: '\u215B',
      frac23: '\u2154',
      frac25: '\u2156',
      frac34: '\xBE',
      frac35: '\u2157',
      frac38: '\u215C',
      frac45: '\u2158',
      frac56: '\u215A',
      frac58: '\u215D',
      frac78: '\u215E',
      frasl: '\u2044',
      frown: '\u2322',
      fscr: '\u{1D4BB}',
      Fscr: '\u2131',
      gacute: '\u01F5',
      Gamma: '\u0393',
      gamma: '\u03B3',
      Gammad: '\u03DC',
      gammad: '\u03DD',
      gap: '\u2A86',
      Gbreve: '\u011E',
      gbreve: '\u011F',
      Gcedil: '\u0122',
      Gcirc: '\u011C',
      gcirc: '\u011D',
      Gcy: '\u0413',
      gcy: '\u0433',
      Gdot: '\u0120',
      gdot: '\u0121',
      ge: '\u2265',
      gE: '\u2267',
      gEl: '\u2A8C',
      gel: '\u22DB',
      geq: '\u2265',
      geqq: '\u2267',
      geqslant: '\u2A7E',
      gescc: '\u2AA9',
      ges: '\u2A7E',
      gesdot: '\u2A80',
      gesdoto: '\u2A82',
      gesdotol: '\u2A84',
      gesl: '\u22DB\uFE00',
      gesles: '\u2A94',
      Gfr: '\u{1D50A}',
      gfr: '\u{1D524}',
      gg: '\u226B',
      Gg: '\u22D9',
      ggg: '\u22D9',
      gimel: '\u2137',
      GJcy: '\u0403',
      gjcy: '\u0453',
      gla: '\u2AA5',
      gl: '\u2277',
      glE: '\u2A92',
      glj: '\u2AA4',
      gnap: '\u2A8A',
      gnapprox: '\u2A8A',
      gne: '\u2A88',
      gnE: '\u2269',
      gneq: '\u2A88',
      gneqq: '\u2269',
      gnsim: '\u22E7',
      Gopf: '\u{1D53E}',
      gopf: '\u{1D558}',
      grave: '`',
      GreaterEqual: '\u2265',
      GreaterEqualLess: '\u22DB',
      GreaterFullEqual: '\u2267',
      GreaterGreater: '\u2AA2',
      GreaterLess: '\u2277',
      GreaterSlantEqual: '\u2A7E',
      GreaterTilde: '\u2273',
      Gscr: '\u{1D4A2}',
      gscr: '\u210A',
      gsim: '\u2273',
      gsime: '\u2A8E',
      gsiml: '\u2A90',
      gtcc: '\u2AA7',
      gtcir: '\u2A7A',
      gt: '>',
      GT: '>',
      Gt: '\u226B',
      gtdot: '\u22D7',
      gtlPar: '\u2995',
      gtquest: '\u2A7C',
      gtrapprox: '\u2A86',
      gtrarr: '\u2978',
      gtrdot: '\u22D7',
      gtreqless: '\u22DB',
      gtreqqless: '\u2A8C',
      gtrless: '\u2277',
      gtrsim: '\u2273',
      gvertneqq: '\u2269\uFE00',
      gvnE: '\u2269\uFE00',
      Hacek: '\u02C7',
      hairsp: '\u200A',
      half: '\xBD',
      hamilt: '\u210B',
      HARDcy: '\u042A',
      hardcy: '\u044A',
      harrcir: '\u2948',
      harr: '\u2194',
      hArr: '\u21D4',
      harrw: '\u21AD',
      Hat: '^',
      hbar: '\u210F',
      Hcirc: '\u0124',
      hcirc: '\u0125',
      hearts: '\u2665',
      heartsuit: '\u2665',
      hellip: '\u2026',
      hercon: '\u22B9',
      hfr: '\u{1D525}',
      Hfr: '\u210C',
      HilbertSpace: '\u210B',
      hksearow: '\u2925',
      hkswarow: '\u2926',
      hoarr: '\u21FF',
      homtht: '\u223B',
      hookleftarrow: '\u21A9',
      hookrightarrow: '\u21AA',
      hopf: '\u{1D559}',
      Hopf: '\u210D',
      horbar: '\u2015',
      HorizontalLine: '\u2500',
      hscr: '\u{1D4BD}',
      Hscr: '\u210B',
      hslash: '\u210F',
      Hstrok: '\u0126',
      hstrok: '\u0127',
      HumpDownHump: '\u224E',
      HumpEqual: '\u224F',
      hybull: '\u2043',
      hyphen: '\u2010',
      Iacute: '\xCD',
      iacute: '\xED',
      ic: '\u2063',
      Icirc: '\xCE',
      icirc: '\xEE',
      Icy: '\u0418',
      icy: '\u0438',
      Idot: '\u0130',
      IEcy: '\u0415',
      iecy: '\u0435',
      iexcl: '\xA1',
      iff: '\u21D4',
      ifr: '\u{1D526}',
      Ifr: '\u2111',
      Igrave: '\xCC',
      igrave: '\xEC',
      ii: '\u2148',
      iiiint: '\u2A0C',
      iiint: '\u222D',
      iinfin: '\u29DC',
      iiota: '\u2129',
      IJlig: '\u0132',
      ijlig: '\u0133',
      Imacr: '\u012A',
      imacr: '\u012B',
      image: '\u2111',
      ImaginaryI: '\u2148',
      imagline: '\u2110',
      imagpart: '\u2111',
      imath: '\u0131',
      Im: '\u2111',
      imof: '\u22B7',
      imped: '\u01B5',
      Implies: '\u21D2',
      incare: '\u2105',
      in: '\u2208',
      infin: '\u221E',
      infintie: '\u29DD',
      inodot: '\u0131',
      intcal: '\u22BA',
      int: '\u222B',
      Int: '\u222C',
      integers: '\u2124',
      Integral: '\u222B',
      intercal: '\u22BA',
      Intersection: '\u22C2',
      intlarhk: '\u2A17',
      intprod: '\u2A3C',
      InvisibleComma: '\u2063',
      InvisibleTimes: '\u2062',
      IOcy: '\u0401',
      iocy: '\u0451',
      Iogon: '\u012E',
      iogon: '\u012F',
      Iopf: '\u{1D540}',
      iopf: '\u{1D55A}',
      Iota: '\u0399',
      iota: '\u03B9',
      iprod: '\u2A3C',
      iquest: '\xBF',
      iscr: '\u{1D4BE}',
      Iscr: '\u2110',
      isin: '\u2208',
      isindot: '\u22F5',
      isinE: '\u22F9',
      isins: '\u22F4',
      isinsv: '\u22F3',
      isinv: '\u2208',
      it: '\u2062',
      Itilde: '\u0128',
      itilde: '\u0129',
      Iukcy: '\u0406',
      iukcy: '\u0456',
      Iuml: '\xCF',
      iuml: '\xEF',
      Jcirc: '\u0134',
      jcirc: '\u0135',
      Jcy: '\u0419',
      jcy: '\u0439',
      Jfr: '\u{1D50D}',
      jfr: '\u{1D527}',
      jmath: '\u0237',
      Jopf: '\u{1D541}',
      jopf: '\u{1D55B}',
      Jscr: '\u{1D4A5}',
      jscr: '\u{1D4BF}',
      Jsercy: '\u0408',
      jsercy: '\u0458',
      Jukcy: '\u0404',
      jukcy: '\u0454',
      Kappa: '\u039A',
      kappa: '\u03BA',
      kappav: '\u03F0',
      Kcedil: '\u0136',
      kcedil: '\u0137',
      Kcy: '\u041A',
      kcy: '\u043A',
      Kfr: '\u{1D50E}',
      kfr: '\u{1D528}',
      kgreen: '\u0138',
      KHcy: '\u0425',
      khcy: '\u0445',
      KJcy: '\u040C',
      kjcy: '\u045C',
      Kopf: '\u{1D542}',
      kopf: '\u{1D55C}',
      Kscr: '\u{1D4A6}',
      kscr: '\u{1D4C0}',
      lAarr: '\u21DA',
      Lacute: '\u0139',
      lacute: '\u013A',
      laemptyv: '\u29B4',
      lagran: '\u2112',
      Lambda: '\u039B',
      lambda: '\u03BB',
      lang: '\u27E8',
      Lang: '\u27EA',
      langd: '\u2991',
      langle: '\u27E8',
      lap: '\u2A85',
      Laplacetrf: '\u2112',
      laquo: '\xAB',
      larrb: '\u21E4',
      larrbfs: '\u291F',
      larr: '\u2190',
      Larr: '\u219E',
      lArr: '\u21D0',
      larrfs: '\u291D',
      larrhk: '\u21A9',
      larrlp: '\u21AB',
      larrpl: '\u2939',
      larrsim: '\u2973',
      larrtl: '\u21A2',
      latail: '\u2919',
      lAtail: '\u291B',
      lat: '\u2AAB',
      late: '\u2AAD',
      lates: '\u2AAD\uFE00',
      lbarr: '\u290C',
      lBarr: '\u290E',
      lbbrk: '\u2772',
      lbrace: '{',
      lbrack: '[',
      lbrke: '\u298B',
      lbrksld: '\u298F',
      lbrkslu: '\u298D',
      Lcaron: '\u013D',
      lcaron: '\u013E',
      Lcedil: '\u013B',
      lcedil: '\u013C',
      lceil: '\u2308',
      lcub: '{',
      Lcy: '\u041B',
      lcy: '\u043B',
      ldca: '\u2936',
      ldquo: '\u201C',
      ldquor: '\u201E',
      ldrdhar: '\u2967',
      ldrushar: '\u294B',
      ldsh: '\u21B2',
      le: '\u2264',
      lE: '\u2266',
      LeftAngleBracket: '\u27E8',
      LeftArrowBar: '\u21E4',
      leftarrow: '\u2190',
      LeftArrow: '\u2190',
      Leftarrow: '\u21D0',
      LeftArrowRightArrow: '\u21C6',
      leftarrowtail: '\u21A2',
      LeftCeiling: '\u2308',
      LeftDoubleBracket: '\u27E6',
      LeftDownTeeVector: '\u2961',
      LeftDownVectorBar: '\u2959',
      LeftDownVector: '\u21C3',
      LeftFloor: '\u230A',
      leftharpoondown: '\u21BD',
      leftharpoonup: '\u21BC',
      leftleftarrows: '\u21C7',
      leftrightarrow: '\u2194',
      LeftRightArrow: '\u2194',
      Leftrightarrow: '\u21D4',
      leftrightarrows: '\u21C6',
      leftrightharpoons: '\u21CB',
      leftrightsquigarrow: '\u21AD',
      LeftRightVector: '\u294E',
      LeftTeeArrow: '\u21A4',
      LeftTee: '\u22A3',
      LeftTeeVector: '\u295A',
      leftthreetimes: '\u22CB',
      LeftTriangleBar: '\u29CF',
      LeftTriangle: '\u22B2',
      LeftTriangleEqual: '\u22B4',
      LeftUpDownVector: '\u2951',
      LeftUpTeeVector: '\u2960',
      LeftUpVectorBar: '\u2958',
      LeftUpVector: '\u21BF',
      LeftVectorBar: '\u2952',
      LeftVector: '\u21BC',
      lEg: '\u2A8B',
      leg: '\u22DA',
      leq: '\u2264',
      leqq: '\u2266',
      leqslant: '\u2A7D',
      lescc: '\u2AA8',
      les: '\u2A7D',
      lesdot: '\u2A7F',
      lesdoto: '\u2A81',
      lesdotor: '\u2A83',
      lesg: '\u22DA\uFE00',
      lesges: '\u2A93',
      lessapprox: '\u2A85',
      lessdot: '\u22D6',
      lesseqgtr: '\u22DA',
      lesseqqgtr: '\u2A8B',
      LessEqualGreater: '\u22DA',
      LessFullEqual: '\u2266',
      LessGreater: '\u2276',
      lessgtr: '\u2276',
      LessLess: '\u2AA1',
      lesssim: '\u2272',
      LessSlantEqual: '\u2A7D',
      LessTilde: '\u2272',
      lfisht: '\u297C',
      lfloor: '\u230A',
      Lfr: '\u{1D50F}',
      lfr: '\u{1D529}',
      lg: '\u2276',
      lgE: '\u2A91',
      lHar: '\u2962',
      lhard: '\u21BD',
      lharu: '\u21BC',
      lharul: '\u296A',
      lhblk: '\u2584',
      LJcy: '\u0409',
      ljcy: '\u0459',
      llarr: '\u21C7',
      ll: '\u226A',
      Ll: '\u22D8',
      llcorner: '\u231E',
      Lleftarrow: '\u21DA',
      llhard: '\u296B',
      lltri: '\u25FA',
      Lmidot: '\u013F',
      lmidot: '\u0140',
      lmoustache: '\u23B0',
      lmoust: '\u23B0',
      lnap: '\u2A89',
      lnapprox: '\u2A89',
      lne: '\u2A87',
      lnE: '\u2268',
      lneq: '\u2A87',
      lneqq: '\u2268',
      lnsim: '\u22E6',
      loang: '\u27EC',
      loarr: '\u21FD',
      lobrk: '\u27E6',
      longleftarrow: '\u27F5',
      LongLeftArrow: '\u27F5',
      Longleftarrow: '\u27F8',
      longleftrightarrow: '\u27F7',
      LongLeftRightArrow: '\u27F7',
      Longleftrightarrow: '\u27FA',
      longmapsto: '\u27FC',
      longrightarrow: '\u27F6',
      LongRightArrow: '\u27F6',
      Longrightarrow: '\u27F9',
      looparrowleft: '\u21AB',
      looparrowright: '\u21AC',
      lopar: '\u2985',
      Lopf: '\u{1D543}',
      lopf: '\u{1D55D}',
      loplus: '\u2A2D',
      lotimes: '\u2A34',
      lowast: '\u2217',
      lowbar: '_',
      LowerLeftArrow: '\u2199',
      LowerRightArrow: '\u2198',
      loz: '\u25CA',
      lozenge: '\u25CA',
      lozf: '\u29EB',
      lpar: '(',
      lparlt: '\u2993',
      lrarr: '\u21C6',
      lrcorner: '\u231F',
      lrhar: '\u21CB',
      lrhard: '\u296D',
      lrm: '\u200E',
      lrtri: '\u22BF',
      lsaquo: '\u2039',
      lscr: '\u{1D4C1}',
      Lscr: '\u2112',
      lsh: '\u21B0',
      Lsh: '\u21B0',
      lsim: '\u2272',
      lsime: '\u2A8D',
      lsimg: '\u2A8F',
      lsqb: '[',
      lsquo: '\u2018',
      lsquor: '\u201A',
      Lstrok: '\u0141',
      lstrok: '\u0142',
      ltcc: '\u2AA6',
      ltcir: '\u2A79',
      lt: '<',
      LT: '<',
      Lt: '\u226A',
      ltdot: '\u22D6',
      lthree: '\u22CB',
      ltimes: '\u22C9',
      ltlarr: '\u2976',
      ltquest: '\u2A7B',
      ltri: '\u25C3',
      ltrie: '\u22B4',
      ltrif: '\u25C2',
      ltrPar: '\u2996',
      lurdshar: '\u294A',
      luruhar: '\u2966',
      lvertneqq: '\u2268\uFE00',
      lvnE: '\u2268\uFE00',
      macr: '\xAF',
      male: '\u2642',
      malt: '\u2720',
      maltese: '\u2720',
      Map: '\u2905',
      map: '\u21A6',
      mapsto: '\u21A6',
      mapstodown: '\u21A7',
      mapstoleft: '\u21A4',
      mapstoup: '\u21A5',
      marker: '\u25AE',
      mcomma: '\u2A29',
      Mcy: '\u041C',
      mcy: '\u043C',
      mdash: '\u2014',
      mDDot: '\u223A',
      measuredangle: '\u2221',
      MediumSpace: '\u205F',
      Mellintrf: '\u2133',
      Mfr: '\u{1D510}',
      mfr: '\u{1D52A}',
      mho: '\u2127',
      micro: '\xB5',
      midast: '*',
      midcir: '\u2AF0',
      mid: '\u2223',
      middot: '\xB7',
      minusb: '\u229F',
      minus: '\u2212',
      minusd: '\u2238',
      minusdu: '\u2A2A',
      MinusPlus: '\u2213',
      mlcp: '\u2ADB',
      mldr: '\u2026',
      mnplus: '\u2213',
      models: '\u22A7',
      Mopf: '\u{1D544}',
      mopf: '\u{1D55E}',
      mp: '\u2213',
      mscr: '\u{1D4C2}',
      Mscr: '\u2133',
      mstpos: '\u223E',
      Mu: '\u039C',
      mu: '\u03BC',
      multimap: '\u22B8',
      mumap: '\u22B8',
      nabla: '\u2207',
      Nacute: '\u0143',
      nacute: '\u0144',
      nang: '\u2220\u20D2',
      nap: '\u2249',
      napE: '\u2A70\u0338',
      napid: '\u224B\u0338',
      napos: '\u0149',
      napprox: '\u2249',
      natural: '\u266E',
      naturals: '\u2115',
      natur: '\u266E',
      nbsp: '\xA0',
      nbump: '\u224E\u0338',
      nbumpe: '\u224F\u0338',
      ncap: '\u2A43',
      Ncaron: '\u0147',
      ncaron: '\u0148',
      Ncedil: '\u0145',
      ncedil: '\u0146',
      ncong: '\u2247',
      ncongdot: '\u2A6D\u0338',
      ncup: '\u2A42',
      Ncy: '\u041D',
      ncy: '\u043D',
      ndash: '\u2013',
      nearhk: '\u2924',
      nearr: '\u2197',
      neArr: '\u21D7',
      nearrow: '\u2197',
      ne: '\u2260',
      nedot: '\u2250\u0338',
      NegativeMediumSpace: '\u200B',
      NegativeThickSpace: '\u200B',
      NegativeThinSpace: '\u200B',
      NegativeVeryThinSpace: '\u200B',
      nequiv: '\u2262',
      nesear: '\u2928',
      nesim: '\u2242\u0338',
      NestedGreaterGreater: '\u226B',
      NestedLessLess: '\u226A',
      NewLine: '\n',
      nexist: '\u2204',
      nexists: '\u2204',
      Nfr: '\u{1D511}',
      nfr: '\u{1D52B}',
      ngE: '\u2267\u0338',
      nge: '\u2271',
      ngeq: '\u2271',
      ngeqq: '\u2267\u0338',
      ngeqslant: '\u2A7E\u0338',
      nges: '\u2A7E\u0338',
      nGg: '\u22D9\u0338',
      ngsim: '\u2275',
      nGt: '\u226B\u20D2',
      ngt: '\u226F',
      ngtr: '\u226F',
      nGtv: '\u226B\u0338',
      nharr: '\u21AE',
      nhArr: '\u21CE',
      nhpar: '\u2AF2',
      ni: '\u220B',
      nis: '\u22FC',
      nisd: '\u22FA',
      niv: '\u220B',
      NJcy: '\u040A',
      njcy: '\u045A',
      nlarr: '\u219A',
      nlArr: '\u21CD',
      nldr: '\u2025',
      nlE: '\u2266\u0338',
      nle: '\u2270',
      nleftarrow: '\u219A',
      nLeftarrow: '\u21CD',
      nleftrightarrow: '\u21AE',
      nLeftrightarrow: '\u21CE',
      nleq: '\u2270',
      nleqq: '\u2266\u0338',
      nleqslant: '\u2A7D\u0338',
      nles: '\u2A7D\u0338',
      nless: '\u226E',
      nLl: '\u22D8\u0338',
      nlsim: '\u2274',
      nLt: '\u226A\u20D2',
      nlt: '\u226E',
      nltri: '\u22EA',
      nltrie: '\u22EC',
      nLtv: '\u226A\u0338',
      nmid: '\u2224',
      NoBreak: '\u2060',
      NonBreakingSpace: '\xA0',
      nopf: '\u{1D55F}',
      Nopf: '\u2115',
      Not: '\u2AEC',
      not: '\xAC',
      NotCongruent: '\u2262',
      NotCupCap: '\u226D',
      NotDoubleVerticalBar: '\u2226',
      NotElement: '\u2209',
      NotEqual: '\u2260',
      NotEqualTilde: '\u2242\u0338',
      NotExists: '\u2204',
      NotGreater: '\u226F',
      NotGreaterEqual: '\u2271',
      NotGreaterFullEqual: '\u2267\u0338',
      NotGreaterGreater: '\u226B\u0338',
      NotGreaterLess: '\u2279',
      NotGreaterSlantEqual: '\u2A7E\u0338',
      NotGreaterTilde: '\u2275',
      NotHumpDownHump: '\u224E\u0338',
      NotHumpEqual: '\u224F\u0338',
      notin: '\u2209',
      notindot: '\u22F5\u0338',
      notinE: '\u22F9\u0338',
      notinva: '\u2209',
      notinvb: '\u22F7',
      notinvc: '\u22F6',
      NotLeftTriangleBar: '\u29CF\u0338',
      NotLeftTriangle: '\u22EA',
      NotLeftTriangleEqual: '\u22EC',
      NotLess: '\u226E',
      NotLessEqual: '\u2270',
      NotLessGreater: '\u2278',
      NotLessLess: '\u226A\u0338',
      NotLessSlantEqual: '\u2A7D\u0338',
      NotLessTilde: '\u2274',
      NotNestedGreaterGreater: '\u2AA2\u0338',
      NotNestedLessLess: '\u2AA1\u0338',
      notni: '\u220C',
      notniva: '\u220C',
      notnivb: '\u22FE',
      notnivc: '\u22FD',
      NotPrecedes: '\u2280',
      NotPrecedesEqual: '\u2AAF\u0338',
      NotPrecedesSlantEqual: '\u22E0',
      NotReverseElement: '\u220C',
      NotRightTriangleBar: '\u29D0\u0338',
      NotRightTriangle: '\u22EB',
      NotRightTriangleEqual: '\u22ED',
      NotSquareSubset: '\u228F\u0338',
      NotSquareSubsetEqual: '\u22E2',
      NotSquareSuperset: '\u2290\u0338',
      NotSquareSupersetEqual: '\u22E3',
      NotSubset: '\u2282\u20D2',
      NotSubsetEqual: '\u2288',
      NotSucceeds: '\u2281',
      NotSucceedsEqual: '\u2AB0\u0338',
      NotSucceedsSlantEqual: '\u22E1',
      NotSucceedsTilde: '\u227F\u0338',
      NotSuperset: '\u2283\u20D2',
      NotSupersetEqual: '\u2289',
      NotTilde: '\u2241',
      NotTildeEqual: '\u2244',
      NotTildeFullEqual: '\u2247',
      NotTildeTilde: '\u2249',
      NotVerticalBar: '\u2224',
      nparallel: '\u2226',
      npar: '\u2226',
      nparsl: '\u2AFD\u20E5',
      npart: '\u2202\u0338',
      npolint: '\u2A14',
      npr: '\u2280',
      nprcue: '\u22E0',
      nprec: '\u2280',
      npreceq: '\u2AAF\u0338',
      npre: '\u2AAF\u0338',
      nrarrc: '\u2933\u0338',
      nrarr: '\u219B',
      nrArr: '\u21CF',
      nrarrw: '\u219D\u0338',
      nrightarrow: '\u219B',
      nRightarrow: '\u21CF',
      nrtri: '\u22EB',
      nrtrie: '\u22ED',
      nsc: '\u2281',
      nsccue: '\u22E1',
      nsce: '\u2AB0\u0338',
      Nscr: '\u{1D4A9}',
      nscr: '\u{1D4C3}',
      nshortmid: '\u2224',
      nshortparallel: '\u2226',
      nsim: '\u2241',
      nsime: '\u2244',
      nsimeq: '\u2244',
      nsmid: '\u2224',
      nspar: '\u2226',
      nsqsube: '\u22E2',
      nsqsupe: '\u22E3',
      nsub: '\u2284',
      nsubE: '\u2AC5\u0338',
      nsube: '\u2288',
      nsubset: '\u2282\u20D2',
      nsubseteq: '\u2288',
      nsubseteqq: '\u2AC5\u0338',
      nsucc: '\u2281',
      nsucceq: '\u2AB0\u0338',
      nsup: '\u2285',
      nsupE: '\u2AC6\u0338',
      nsupe: '\u2289',
      nsupset: '\u2283\u20D2',
      nsupseteq: '\u2289',
      nsupseteqq: '\u2AC6\u0338',
      ntgl: '\u2279',
      Ntilde: '\xD1',
      ntilde: '\xF1',
      ntlg: '\u2278',
      ntriangleleft: '\u22EA',
      ntrianglelefteq: '\u22EC',
      ntriangleright: '\u22EB',
      ntrianglerighteq: '\u22ED',
      Nu: '\u039D',
      nu: '\u03BD',
      num: '#',
      numero: '\u2116',
      numsp: '\u2007',
      nvap: '\u224D\u20D2',
      nvdash: '\u22AC',
      nvDash: '\u22AD',
      nVdash: '\u22AE',
      nVDash: '\u22AF',
      nvge: '\u2265\u20D2',
      nvgt: '>\u20D2',
      nvHarr: '\u2904',
      nvinfin: '\u29DE',
      nvlArr: '\u2902',
      nvle: '\u2264\u20D2',
      nvlt: '<\u20D2',
      nvltrie: '\u22B4\u20D2',
      nvrArr: '\u2903',
      nvrtrie: '\u22B5\u20D2',
      nvsim: '\u223C\u20D2',
      nwarhk: '\u2923',
      nwarr: '\u2196',
      nwArr: '\u21D6',
      nwarrow: '\u2196',
      nwnear: '\u2927',
      Oacute: '\xD3',
      oacute: '\xF3',
      oast: '\u229B',
      Ocirc: '\xD4',
      ocirc: '\xF4',
      ocir: '\u229A',
      Ocy: '\u041E',
      ocy: '\u043E',
      odash: '\u229D',
      Odblac: '\u0150',
      odblac: '\u0151',
      odiv: '\u2A38',
      odot: '\u2299',
      odsold: '\u29BC',
      OElig: '\u0152',
      oelig: '\u0153',
      ofcir: '\u29BF',
      Ofr: '\u{1D512}',
      ofr: '\u{1D52C}',
      ogon: '\u02DB',
      Ograve: '\xD2',
      ograve: '\xF2',
      ogt: '\u29C1',
      ohbar: '\u29B5',
      ohm: '\u03A9',
      oint: '\u222E',
      olarr: '\u21BA',
      olcir: '\u29BE',
      olcross: '\u29BB',
      oline: '\u203E',
      olt: '\u29C0',
      Omacr: '\u014C',
      omacr: '\u014D',
      Omega: '\u03A9',
      omega: '\u03C9',
      Omicron: '\u039F',
      omicron: '\u03BF',
      omid: '\u29B6',
      ominus: '\u2296',
      Oopf: '\u{1D546}',
      oopf: '\u{1D560}',
      opar: '\u29B7',
      OpenCurlyDoubleQuote: '\u201C',
      OpenCurlyQuote: '\u2018',
      operp: '\u29B9',
      oplus: '\u2295',
      orarr: '\u21BB',
      Or: '\u2A54',
      or: '\u2228',
      ord: '\u2A5D',
      order: '\u2134',
      orderof: '\u2134',
      ordf: '\xAA',
      ordm: '\xBA',
      origof: '\u22B6',
      oror: '\u2A56',
      orslope: '\u2A57',
      orv: '\u2A5B',
      oS: '\u24C8',
      Oscr: '\u{1D4AA}',
      oscr: '\u2134',
      Oslash: '\xD8',
      oslash: '\xF8',
      osol: '\u2298',
      Otilde: '\xD5',
      otilde: '\xF5',
      otimesas: '\u2A36',
      Otimes: '\u2A37',
      otimes: '\u2297',
      Ouml: '\xD6',
      ouml: '\xF6',
      ovbar: '\u233D',
      OverBar: '\u203E',
      OverBrace: '\u23DE',
      OverBracket: '\u23B4',
      OverParenthesis: '\u23DC',
      para: '\xB6',
      parallel: '\u2225',
      par: '\u2225',
      parsim: '\u2AF3',
      parsl: '\u2AFD',
      part: '\u2202',
      PartialD: '\u2202',
      Pcy: '\u041F',
      pcy: '\u043F',
      percnt: '%',
      period: '.',
      permil: '\u2030',
      perp: '\u22A5',
      pertenk: '\u2031',
      Pfr: '\u{1D513}',
      pfr: '\u{1D52D}',
      Phi: '\u03A6',
      phi: '\u03C6',
      phiv: '\u03D5',
      phmmat: '\u2133',
      phone: '\u260E',
      Pi: '\u03A0',
      pi: '\u03C0',
      pitchfork: '\u22D4',
      piv: '\u03D6',
      planck: '\u210F',
      planckh: '\u210E',
      plankv: '\u210F',
      plusacir: '\u2A23',
      plusb: '\u229E',
      pluscir: '\u2A22',
      plus: '+',
      plusdo: '\u2214',
      plusdu: '\u2A25',
      pluse: '\u2A72',
      PlusMinus: '\xB1',
      plusmn: '\xB1',
      plussim: '\u2A26',
      plustwo: '\u2A27',
      pm: '\xB1',
      Poincareplane: '\u210C',
      pointint: '\u2A15',
      popf: '\u{1D561}',
      Popf: '\u2119',
      pound: '\xA3',
      prap: '\u2AB7',
      Pr: '\u2ABB',
      pr: '\u227A',
      prcue: '\u227C',
      precapprox: '\u2AB7',
      prec: '\u227A',
      preccurlyeq: '\u227C',
      Precedes: '\u227A',
      PrecedesEqual: '\u2AAF',
      PrecedesSlantEqual: '\u227C',
      PrecedesTilde: '\u227E',
      preceq: '\u2AAF',
      precnapprox: '\u2AB9',
      precneqq: '\u2AB5',
      precnsim: '\u22E8',
      pre: '\u2AAF',
      prE: '\u2AB3',
      precsim: '\u227E',
      prime: '\u2032',
      Prime: '\u2033',
      primes: '\u2119',
      prnap: '\u2AB9',
      prnE: '\u2AB5',
      prnsim: '\u22E8',
      prod: '\u220F',
      Product: '\u220F',
      profalar: '\u232E',
      profline: '\u2312',
      profsurf: '\u2313',
      prop: '\u221D',
      Proportional: '\u221D',
      Proportion: '\u2237',
      propto: '\u221D',
      prsim: '\u227E',
      prurel: '\u22B0',
      Pscr: '\u{1D4AB}',
      pscr: '\u{1D4C5}',
      Psi: '\u03A8',
      psi: '\u03C8',
      puncsp: '\u2008',
      Qfr: '\u{1D514}',
      qfr: '\u{1D52E}',
      qint: '\u2A0C',
      qopf: '\u{1D562}',
      Qopf: '\u211A',
      qprime: '\u2057',
      Qscr: '\u{1D4AC}',
      qscr: '\u{1D4C6}',
      quaternions: '\u210D',
      quatint: '\u2A16',
      quest: '?',
      questeq: '\u225F',
      quot: '"',
      QUOT: '"',
      rAarr: '\u21DB',
      race: '\u223D\u0331',
      Racute: '\u0154',
      racute: '\u0155',
      radic: '\u221A',
      raemptyv: '\u29B3',
      rang: '\u27E9',
      Rang: '\u27EB',
      rangd: '\u2992',
      range: '\u29A5',
      rangle: '\u27E9',
      raquo: '\xBB',
      rarrap: '\u2975',
      rarrb: '\u21E5',
      rarrbfs: '\u2920',
      rarrc: '\u2933',
      rarr: '\u2192',
      Rarr: '\u21A0',
      rArr: '\u21D2',
      rarrfs: '\u291E',
      rarrhk: '\u21AA',
      rarrlp: '\u21AC',
      rarrpl: '\u2945',
      rarrsim: '\u2974',
      Rarrtl: '\u2916',
      rarrtl: '\u21A3',
      rarrw: '\u219D',
      ratail: '\u291A',
      rAtail: '\u291C',
      ratio: '\u2236',
      rationals: '\u211A',
      rbarr: '\u290D',
      rBarr: '\u290F',
      RBarr: '\u2910',
      rbbrk: '\u2773',
      rbrace: '}',
      rbrack: ']',
      rbrke: '\u298C',
      rbrksld: '\u298E',
      rbrkslu: '\u2990',
      Rcaron: '\u0158',
      rcaron: '\u0159',
      Rcedil: '\u0156',
      rcedil: '\u0157',
      rceil: '\u2309',
      rcub: '}',
      Rcy: '\u0420',
      rcy: '\u0440',
      rdca: '\u2937',
      rdldhar: '\u2969',
      rdquo: '\u201D',
      rdquor: '\u201D',
      rdsh: '\u21B3',
      real: '\u211C',
      realine: '\u211B',
      realpart: '\u211C',
      reals: '\u211D',
      Re: '\u211C',
      rect: '\u25AD',
      reg: '\xAE',
      REG: '\xAE',
      ReverseElement: '\u220B',
      ReverseEquilibrium: '\u21CB',
      ReverseUpEquilibrium: '\u296F',
      rfisht: '\u297D',
      rfloor: '\u230B',
      rfr: '\u{1D52F}',
      Rfr: '\u211C',
      rHar: '\u2964',
      rhard: '\u21C1',
      rharu: '\u21C0',
      rharul: '\u296C',
      Rho: '\u03A1',
      rho: '\u03C1',
      rhov: '\u03F1',
      RightAngleBracket: '\u27E9',
      RightArrowBar: '\u21E5',
      rightarrow: '\u2192',
      RightArrow: '\u2192',
      Rightarrow: '\u21D2',
      RightArrowLeftArrow: '\u21C4',
      rightarrowtail: '\u21A3',
      RightCeiling: '\u2309',
      RightDoubleBracket: '\u27E7',
      RightDownTeeVector: '\u295D',
      RightDownVectorBar: '\u2955',
      RightDownVector: '\u21C2',
      RightFloor: '\u230B',
      rightharpoondown: '\u21C1',
      rightharpoonup: '\u21C0',
      rightleftarrows: '\u21C4',
      rightleftharpoons: '\u21CC',
      rightrightarrows: '\u21C9',
      rightsquigarrow: '\u219D',
      RightTeeArrow: '\u21A6',
      RightTee: '\u22A2',
      RightTeeVector: '\u295B',
      rightthreetimes: '\u22CC',
      RightTriangleBar: '\u29D0',
      RightTriangle: '\u22B3',
      RightTriangleEqual: '\u22B5',
      RightUpDownVector: '\u294F',
      RightUpTeeVector: '\u295C',
      RightUpVectorBar: '\u2954',
      RightUpVector: '\u21BE',
      RightVectorBar: '\u2953',
      RightVector: '\u21C0',
      ring: '\u02DA',
      risingdotseq: '\u2253',
      rlarr: '\u21C4',
      rlhar: '\u21CC',
      rlm: '\u200F',
      rmoustache: '\u23B1',
      rmoust: '\u23B1',
      rnmid: '\u2AEE',
      roang: '\u27ED',
      roarr: '\u21FE',
      robrk: '\u27E7',
      ropar: '\u2986',
      ropf: '\u{1D563}',
      Ropf: '\u211D',
      roplus: '\u2A2E',
      rotimes: '\u2A35',
      RoundImplies: '\u2970',
      rpar: ')',
      rpargt: '\u2994',
      rppolint: '\u2A12',
      rrarr: '\u21C9',
      Rrightarrow: '\u21DB',
      rsaquo: '\u203A',
      rscr: '\u{1D4C7}',
      Rscr: '\u211B',
      rsh: '\u21B1',
      Rsh: '\u21B1',
      rsqb: ']',
      rsquo: '\u2019',
      rsquor: '\u2019',
      rthree: '\u22CC',
      rtimes: '\u22CA',
      rtri: '\u25B9',
      rtrie: '\u22B5',
      rtrif: '\u25B8',
      rtriltri: '\u29CE',
      RuleDelayed: '\u29F4',
      ruluhar: '\u2968',
      rx: '\u211E',
      Sacute: '\u015A',
      sacute: '\u015B',
      sbquo: '\u201A',
      scap: '\u2AB8',
      Scaron: '\u0160',
      scaron: '\u0161',
      Sc: '\u2ABC',
      sc: '\u227B',
      sccue: '\u227D',
      sce: '\u2AB0',
      scE: '\u2AB4',
      Scedil: '\u015E',
      scedil: '\u015F',
      Scirc: '\u015C',
      scirc: '\u015D',
      scnap: '\u2ABA',
      scnE: '\u2AB6',
      scnsim: '\u22E9',
      scpolint: '\u2A13',
      scsim: '\u227F',
      Scy: '\u0421',
      scy: '\u0441',
      sdotb: '\u22A1',
      sdot: '\u22C5',
      sdote: '\u2A66',
      searhk: '\u2925',
      searr: '\u2198',
      seArr: '\u21D8',
      searrow: '\u2198',
      sect: '\xA7',
      semi: ';',
      seswar: '\u2929',
      setminus: '\u2216',
      setmn: '\u2216',
      sext: '\u2736',
      Sfr: '\u{1D516}',
      sfr: '\u{1D530}',
      sfrown: '\u2322',
      sharp: '\u266F',
      SHCHcy: '\u0429',
      shchcy: '\u0449',
      SHcy: '\u0428',
      shcy: '\u0448',
      ShortDownArrow: '\u2193',
      ShortLeftArrow: '\u2190',
      shortmid: '\u2223',
      shortparallel: '\u2225',
      ShortRightArrow: '\u2192',
      ShortUpArrow: '\u2191',
      shy: '\xAD',
      Sigma: '\u03A3',
      sigma: '\u03C3',
      sigmaf: '\u03C2',
      sigmav: '\u03C2',
      sim: '\u223C',
      simdot: '\u2A6A',
      sime: '\u2243',
      simeq: '\u2243',
      simg: '\u2A9E',
      simgE: '\u2AA0',
      siml: '\u2A9D',
      simlE: '\u2A9F',
      simne: '\u2246',
      simplus: '\u2A24',
      simrarr: '\u2972',
      slarr: '\u2190',
      SmallCircle: '\u2218',
      smallsetminus: '\u2216',
      smashp: '\u2A33',
      smeparsl: '\u29E4',
      smid: '\u2223',
      smile: '\u2323',
      smt: '\u2AAA',
      smte: '\u2AAC',
      smtes: '\u2AAC\uFE00',
      SOFTcy: '\u042C',
      softcy: '\u044C',
      solbar: '\u233F',
      solb: '\u29C4',
      sol: '/',
      Sopf: '\u{1D54A}',
      sopf: '\u{1D564}',
      spades: '\u2660',
      spadesuit: '\u2660',
      spar: '\u2225',
      sqcap: '\u2293',
      sqcaps: '\u2293\uFE00',
      sqcup: '\u2294',
      sqcups: '\u2294\uFE00',
      Sqrt: '\u221A',
      sqsub: '\u228F',
      sqsube: '\u2291',
      sqsubset: '\u228F',
      sqsubseteq: '\u2291',
      sqsup: '\u2290',
      sqsupe: '\u2292',
      sqsupset: '\u2290',
      sqsupseteq: '\u2292',
      square: '\u25A1',
      Square: '\u25A1',
      SquareIntersection: '\u2293',
      SquareSubset: '\u228F',
      SquareSubsetEqual: '\u2291',
      SquareSuperset: '\u2290',
      SquareSupersetEqual: '\u2292',
      SquareUnion: '\u2294',
      squarf: '\u25AA',
      squ: '\u25A1',
      squf: '\u25AA',
      srarr: '\u2192',
      Sscr: '\u{1D4AE}',
      sscr: '\u{1D4C8}',
      ssetmn: '\u2216',
      ssmile: '\u2323',
      sstarf: '\u22C6',
      Star: '\u22C6',
      star: '\u2606',
      starf: '\u2605',
      straightepsilon: '\u03F5',
      straightphi: '\u03D5',
      strns: '\xAF',
      sub: '\u2282',
      Sub: '\u22D0',
      subdot: '\u2ABD',
      subE: '\u2AC5',
      sube: '\u2286',
      subedot: '\u2AC3',
      submult: '\u2AC1',
      subnE: '\u2ACB',
      subne: '\u228A',
      subplus: '\u2ABF',
      subrarr: '\u2979',
      subset: '\u2282',
      Subset: '\u22D0',
      subseteq: '\u2286',
      subseteqq: '\u2AC5',
      SubsetEqual: '\u2286',
      subsetneq: '\u228A',
      subsetneqq: '\u2ACB',
      subsim: '\u2AC7',
      subsub: '\u2AD5',
      subsup: '\u2AD3',
      succapprox: '\u2AB8',
      succ: '\u227B',
      succcurlyeq: '\u227D',
      Succeeds: '\u227B',
      SucceedsEqual: '\u2AB0',
      SucceedsSlantEqual: '\u227D',
      SucceedsTilde: '\u227F',
      succeq: '\u2AB0',
      succnapprox: '\u2ABA',
      succneqq: '\u2AB6',
      succnsim: '\u22E9',
      succsim: '\u227F',
      SuchThat: '\u220B',
      sum: '\u2211',
      Sum: '\u2211',
      sung: '\u266A',
      sup1: '\xB9',
      sup2: '\xB2',
      sup3: '\xB3',
      sup: '\u2283',
      Sup: '\u22D1',
      supdot: '\u2ABE',
      supdsub: '\u2AD8',
      supE: '\u2AC6',
      supe: '\u2287',
      supedot: '\u2AC4',
      Superset: '\u2283',
      SupersetEqual: '\u2287',
      suphsol: '\u27C9',
      suphsub: '\u2AD7',
      suplarr: '\u297B',
      supmult: '\u2AC2',
      supnE: '\u2ACC',
      supne: '\u228B',
      supplus: '\u2AC0',
      supset: '\u2283',
      Supset: '\u22D1',
      supseteq: '\u2287',
      supseteqq: '\u2AC6',
      supsetneq: '\u228B',
      supsetneqq: '\u2ACC',
      supsim: '\u2AC8',
      supsub: '\u2AD4',
      supsup: '\u2AD6',
      swarhk: '\u2926',
      swarr: '\u2199',
      swArr: '\u21D9',
      swarrow: '\u2199',
      swnwar: '\u292A',
      szlig: '\xDF',
      Tab: '	',
      target: '\u2316',
      Tau: '\u03A4',
      tau: '\u03C4',
      tbrk: '\u23B4',
      Tcaron: '\u0164',
      tcaron: '\u0165',
      Tcedil: '\u0162',
      tcedil: '\u0163',
      Tcy: '\u0422',
      tcy: '\u0442',
      tdot: '\u20DB',
      telrec: '\u2315',
      Tfr: '\u{1D517}',
      tfr: '\u{1D531}',
      there4: '\u2234',
      therefore: '\u2234',
      Therefore: '\u2234',
      Theta: '\u0398',
      theta: '\u03B8',
      thetasym: '\u03D1',
      thetav: '\u03D1',
      thickapprox: '\u2248',
      thicksim: '\u223C',
      ThickSpace: '\u205F\u200A',
      ThinSpace: '\u2009',
      thinsp: '\u2009',
      thkap: '\u2248',
      thksim: '\u223C',
      THORN: '\xDE',
      thorn: '\xFE',
      tilde: '\u02DC',
      Tilde: '\u223C',
      TildeEqual: '\u2243',
      TildeFullEqual: '\u2245',
      TildeTilde: '\u2248',
      timesbar: '\u2A31',
      timesb: '\u22A0',
      times: '\xD7',
      timesd: '\u2A30',
      tint: '\u222D',
      toea: '\u2928',
      topbot: '\u2336',
      topcir: '\u2AF1',
      top: '\u22A4',
      Topf: '\u{1D54B}',
      topf: '\u{1D565}',
      topfork: '\u2ADA',
      tosa: '\u2929',
      tprime: '\u2034',
      trade: '\u2122',
      TRADE: '\u2122',
      triangle: '\u25B5',
      triangledown: '\u25BF',
      triangleleft: '\u25C3',
      trianglelefteq: '\u22B4',
      triangleq: '\u225C',
      triangleright: '\u25B9',
      trianglerighteq: '\u22B5',
      tridot: '\u25EC',
      trie: '\u225C',
      triminus: '\u2A3A',
      TripleDot: '\u20DB',
      triplus: '\u2A39',
      trisb: '\u29CD',
      tritime: '\u2A3B',
      trpezium: '\u23E2',
      Tscr: '\u{1D4AF}',
      tscr: '\u{1D4C9}',
      TScy: '\u0426',
      tscy: '\u0446',
      TSHcy: '\u040B',
      tshcy: '\u045B',
      Tstrok: '\u0166',
      tstrok: '\u0167',
      twixt: '\u226C',
      twoheadleftarrow: '\u219E',
      twoheadrightarrow: '\u21A0',
      Uacute: '\xDA',
      uacute: '\xFA',
      uarr: '\u2191',
      Uarr: '\u219F',
      uArr: '\u21D1',
      Uarrocir: '\u2949',
      Ubrcy: '\u040E',
      ubrcy: '\u045E',
      Ubreve: '\u016C',
      ubreve: '\u016D',
      Ucirc: '\xDB',
      ucirc: '\xFB',
      Ucy: '\u0423',
      ucy: '\u0443',
      udarr: '\u21C5',
      Udblac: '\u0170',
      udblac: '\u0171',
      udhar: '\u296E',
      ufisht: '\u297E',
      Ufr: '\u{1D518}',
      ufr: '\u{1D532}',
      Ugrave: '\xD9',
      ugrave: '\xF9',
      uHar: '\u2963',
      uharl: '\u21BF',
      uharr: '\u21BE',
      uhblk: '\u2580',
      ulcorn: '\u231C',
      ulcorner: '\u231C',
      ulcrop: '\u230F',
      ultri: '\u25F8',
      Umacr: '\u016A',
      umacr: '\u016B',
      uml: '\xA8',
      UnderBar: '_',
      UnderBrace: '\u23DF',
      UnderBracket: '\u23B5',
      UnderParenthesis: '\u23DD',
      Union: '\u22C3',
      UnionPlus: '\u228E',
      Uogon: '\u0172',
      uogon: '\u0173',
      Uopf: '\u{1D54C}',
      uopf: '\u{1D566}',
      UpArrowBar: '\u2912',
      uparrow: '\u2191',
      UpArrow: '\u2191',
      Uparrow: '\u21D1',
      UpArrowDownArrow: '\u21C5',
      updownarrow: '\u2195',
      UpDownArrow: '\u2195',
      Updownarrow: '\u21D5',
      UpEquilibrium: '\u296E',
      upharpoonleft: '\u21BF',
      upharpoonright: '\u21BE',
      uplus: '\u228E',
      UpperLeftArrow: '\u2196',
      UpperRightArrow: '\u2197',
      upsi: '\u03C5',
      Upsi: '\u03D2',
      upsih: '\u03D2',
      Upsilon: '\u03A5',
      upsilon: '\u03C5',
      UpTeeArrow: '\u21A5',
      UpTee: '\u22A5',
      upuparrows: '\u21C8',
      urcorn: '\u231D',
      urcorner: '\u231D',
      urcrop: '\u230E',
      Uring: '\u016E',
      uring: '\u016F',
      urtri: '\u25F9',
      Uscr: '\u{1D4B0}',
      uscr: '\u{1D4CA}',
      utdot: '\u22F0',
      Utilde: '\u0168',
      utilde: '\u0169',
      utri: '\u25B5',
      utrif: '\u25B4',
      uuarr: '\u21C8',
      Uuml: '\xDC',
      uuml: '\xFC',
      uwangle: '\u29A7',
      vangrt: '\u299C',
      varepsilon: '\u03F5',
      varkappa: '\u03F0',
      varnothing: '\u2205',
      varphi: '\u03D5',
      varpi: '\u03D6',
      varpropto: '\u221D',
      varr: '\u2195',
      vArr: '\u21D5',
      varrho: '\u03F1',
      varsigma: '\u03C2',
      varsubsetneq: '\u228A\uFE00',
      varsubsetneqq: '\u2ACB\uFE00',
      varsupsetneq: '\u228B\uFE00',
      varsupsetneqq: '\u2ACC\uFE00',
      vartheta: '\u03D1',
      vartriangleleft: '\u22B2',
      vartriangleright: '\u22B3',
      vBar: '\u2AE8',
      Vbar: '\u2AEB',
      vBarv: '\u2AE9',
      Vcy: '\u0412',
      vcy: '\u0432',
      vdash: '\u22A2',
      vDash: '\u22A8',
      Vdash: '\u22A9',
      VDash: '\u22AB',
      Vdashl: '\u2AE6',
      veebar: '\u22BB',
      vee: '\u2228',
      Vee: '\u22C1',
      veeeq: '\u225A',
      vellip: '\u22EE',
      verbar: '|',
      Verbar: '\u2016',
      vert: '|',
      Vert: '\u2016',
      VerticalBar: '\u2223',
      VerticalLine: '|',
      VerticalSeparator: '\u2758',
      VerticalTilde: '\u2240',
      VeryThinSpace: '\u200A',
      Vfr: '\u{1D519}',
      vfr: '\u{1D533}',
      vltri: '\u22B2',
      vnsub: '\u2282\u20D2',
      vnsup: '\u2283\u20D2',
      Vopf: '\u{1D54D}',
      vopf: '\u{1D567}',
      vprop: '\u221D',
      vrtri: '\u22B3',
      Vscr: '\u{1D4B1}',
      vscr: '\u{1D4CB}',
      vsubnE: '\u2ACB\uFE00',
      vsubne: '\u228A\uFE00',
      vsupnE: '\u2ACC\uFE00',
      vsupne: '\u228B\uFE00',
      Vvdash: '\u22AA',
      vzigzag: '\u299A',
      Wcirc: '\u0174',
      wcirc: '\u0175',
      wedbar: '\u2A5F',
      wedge: '\u2227',
      Wedge: '\u22C0',
      wedgeq: '\u2259',
      weierp: '\u2118',
      Wfr: '\u{1D51A}',
      wfr: '\u{1D534}',
      Wopf: '\u{1D54E}',
      wopf: '\u{1D568}',
      wp: '\u2118',
      wr: '\u2240',
      wreath: '\u2240',
      Wscr: '\u{1D4B2}',
      wscr: '\u{1D4CC}',
      xcap: '\u22C2',
      xcirc: '\u25EF',
      xcup: '\u22C3',
      xdtri: '\u25BD',
      Xfr: '\u{1D51B}',
      xfr: '\u{1D535}',
      xharr: '\u27F7',
      xhArr: '\u27FA',
      Xi: '\u039E',
      xi: '\u03BE',
      xlarr: '\u27F5',
      xlArr: '\u27F8',
      xmap: '\u27FC',
      xnis: '\u22FB',
      xodot: '\u2A00',
      Xopf: '\u{1D54F}',
      xopf: '\u{1D569}',
      xoplus: '\u2A01',
      xotime: '\u2A02',
      xrarr: '\u27F6',
      xrArr: '\u27F9',
      Xscr: '\u{1D4B3}',
      xscr: '\u{1D4CD}',
      xsqcup: '\u2A06',
      xuplus: '\u2A04',
      xutri: '\u25B3',
      xvee: '\u22C1',
      xwedge: '\u22C0',
      Yacute: '\xDD',
      yacute: '\xFD',
      YAcy: '\u042F',
      yacy: '\u044F',
      Ycirc: '\u0176',
      ycirc: '\u0177',
      Ycy: '\u042B',
      ycy: '\u044B',
      yen: '\xA5',
      Yfr: '\u{1D51C}',
      yfr: '\u{1D536}',
      YIcy: '\u0407',
      yicy: '\u0457',
      Yopf: '\u{1D550}',
      yopf: '\u{1D56A}',
      Yscr: '\u{1D4B4}',
      yscr: '\u{1D4CE}',
      YUcy: '\u042E',
      yucy: '\u044E',
      yuml: '\xFF',
      Yuml: '\u0178',
      Zacute: '\u0179',
      zacute: '\u017A',
      Zcaron: '\u017D',
      zcaron: '\u017E',
      Zcy: '\u0417',
      zcy: '\u0437',
      Zdot: '\u017B',
      zdot: '\u017C',
      zeetrf: '\u2128',
      ZeroWidthSpace: '\u200B',
      Zeta: '\u0396',
      zeta: '\u03B6',
      zfr: '\u{1D537}',
      Zfr: '\u2128',
      ZHcy: '\u0416',
      zhcy: '\u0436',
      zigrarr: '\u21DD',
      zopf: '\u{1D56B}',
      Zopf: '\u2124',
      Zscr: '\u{1D4B5}',
      zscr: '\u{1D4CF}',
      zwj: '\u200D',
      zwnj: '\u200C',
    };
  },
});

// node_modules/entities/lib/maps/legacy.json
var require_legacy = __commonJS({
  'node_modules/entities/lib/maps/legacy.json'(exports, module2) {
    module2.exports = {
      Aacute: '\xC1',
      aacute: '\xE1',
      Acirc: '\xC2',
      acirc: '\xE2',
      acute: '\xB4',
      AElig: '\xC6',
      aelig: '\xE6',
      Agrave: '\xC0',
      agrave: '\xE0',
      amp: '&',
      AMP: '&',
      Aring: '\xC5',
      aring: '\xE5',
      Atilde: '\xC3',
      atilde: '\xE3',
      Auml: '\xC4',
      auml: '\xE4',
      brvbar: '\xA6',
      Ccedil: '\xC7',
      ccedil: '\xE7',
      cedil: '\xB8',
      cent: '\xA2',
      copy: '\xA9',
      COPY: '\xA9',
      curren: '\xA4',
      deg: '\xB0',
      divide: '\xF7',
      Eacute: '\xC9',
      eacute: '\xE9',
      Ecirc: '\xCA',
      ecirc: '\xEA',
      Egrave: '\xC8',
      egrave: '\xE8',
      ETH: '\xD0',
      eth: '\xF0',
      Euml: '\xCB',
      euml: '\xEB',
      frac12: '\xBD',
      frac14: '\xBC',
      frac34: '\xBE',
      gt: '>',
      GT: '>',
      Iacute: '\xCD',
      iacute: '\xED',
      Icirc: '\xCE',
      icirc: '\xEE',
      iexcl: '\xA1',
      Igrave: '\xCC',
      igrave: '\xEC',
      iquest: '\xBF',
      Iuml: '\xCF',
      iuml: '\xEF',
      laquo: '\xAB',
      lt: '<',
      LT: '<',
      macr: '\xAF',
      micro: '\xB5',
      middot: '\xB7',
      nbsp: '\xA0',
      not: '\xAC',
      Ntilde: '\xD1',
      ntilde: '\xF1',
      Oacute: '\xD3',
      oacute: '\xF3',
      Ocirc: '\xD4',
      ocirc: '\xF4',
      Ograve: '\xD2',
      ograve: '\xF2',
      ordf: '\xAA',
      ordm: '\xBA',
      Oslash: '\xD8',
      oslash: '\xF8',
      Otilde: '\xD5',
      otilde: '\xF5',
      Ouml: '\xD6',
      ouml: '\xF6',
      para: '\xB6',
      plusmn: '\xB1',
      pound: '\xA3',
      quot: '"',
      QUOT: '"',
      raquo: '\xBB',
      reg: '\xAE',
      REG: '\xAE',
      sect: '\xA7',
      shy: '\xAD',
      sup1: '\xB9',
      sup2: '\xB2',
      sup3: '\xB3',
      szlig: '\xDF',
      THORN: '\xDE',
      thorn: '\xFE',
      times: '\xD7',
      Uacute: '\xDA',
      uacute: '\xFA',
      Ucirc: '\xDB',
      ucirc: '\xFB',
      Ugrave: '\xD9',
      ugrave: '\xF9',
      uml: '\xA8',
      Uuml: '\xDC',
      uuml: '\xFC',
      Yacute: '\xDD',
      yacute: '\xFD',
      yen: '\xA5',
      yuml: '\xFF',
    };
  },
});

// node_modules/entities/lib/maps/xml.json
var require_xml = __commonJS({
  'node_modules/entities/lib/maps/xml.json'(exports, module2) {
    module2.exports = { amp: '&', apos: "'", gt: '>', lt: '<', quot: '"' };
  },
});

// node_modules/entities/lib/maps/decode.json
var require_decode = __commonJS({
  'node_modules/entities/lib/maps/decode.json'(exports, module2) {
    module2.exports = {
      0: 65533,
      128: 8364,
      130: 8218,
      131: 402,
      132: 8222,
      133: 8230,
      134: 8224,
      135: 8225,
      136: 710,
      137: 8240,
      138: 352,
      139: 8249,
      140: 338,
      142: 381,
      145: 8216,
      146: 8217,
      147: 8220,
      148: 8221,
      149: 8226,
      150: 8211,
      151: 8212,
      152: 732,
      153: 8482,
      154: 353,
      155: 8250,
      156: 339,
      158: 382,
      159: 376,
    };
  },
});

// node_modules/entities/lib/decode_codepoint.js
var require_decode_codepoint = __commonJS({
  'node_modules/entities/lib/decode_codepoint.js'(exports) {
    'use strict';
    var __importDefault =
      (exports && exports.__importDefault) ||
      function (mod2) {
        return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
      };
    Object.defineProperty(exports, '__esModule', { value: true });
    var decode_json_1 = __importDefault(require_decode());
    var fromCodePoint =
      String.fromCodePoint ||
      function (codePoint) {
        var output = '';
        if (codePoint > 65535) {
          codePoint -= 65536;
          output += String.fromCharCode(((codePoint >>> 10) & 1023) | 55296);
          codePoint = 56320 | (codePoint & 1023);
        }
        output += String.fromCharCode(codePoint);
        return output;
      };
    function decodeCodePoint(codePoint) {
      if ((codePoint >= 55296 && codePoint <= 57343) || codePoint > 1114111) {
        return '\uFFFD';
      }
      if (codePoint in decode_json_1.default) {
        codePoint = decode_json_1.default[codePoint];
      }
      return fromCodePoint(codePoint);
    }
    exports.default = decodeCodePoint;
  },
});

// node_modules/entities/lib/decode.js
var require_decode2 = __commonJS({
  'node_modules/entities/lib/decode.js'(exports) {
    'use strict';
    var __importDefault =
      (exports && exports.__importDefault) ||
      function (mod2) {
        return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
      };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;
    var entities_json_1 = __importDefault(require_entities());
    var legacy_json_1 = __importDefault(require_legacy());
    var xml_json_1 = __importDefault(require_xml());
    var decode_codepoint_1 = __importDefault(require_decode_codepoint());
    var strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
    exports.decodeXML = getStrictDecoder(xml_json_1.default);
    exports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
    function getStrictDecoder(map) {
      var replace = getReplacer(map);
      return function (str) {
        return String(str).replace(strictEntityRe, replace);
      };
    }
    var sorter = function (a, b) {
      return a < b ? 1 : -1;
    };
    exports.decodeHTML = (function () {
      var legacy = Object.keys(legacy_json_1.default).sort(sorter);
      var keys = Object.keys(entities_json_1.default).sort(sorter);
      for (var i = 0, j = 0; i < keys.length; i++) {
        if (legacy[j] === keys[i]) {
          keys[i] += ';?';
          j++;
        } else {
          keys[i] += ';';
        }
      }
      var re = new RegExp('&(?:' + keys.join('|') + '|#[xX][\\da-fA-F]+;?|#\\d+;?)', 'g');
      var replace = getReplacer(entities_json_1.default);
      function replacer(str) {
        if (str.substr(-1) !== ';') str += ';';
        return replace(str);
      }
      return function (str) {
        return String(str).replace(re, replacer);
      };
    })();
    function getReplacer(map) {
      return function replace(str) {
        if (str.charAt(1) === '#') {
          var secondChar = str.charAt(2);
          if (secondChar === 'X' || secondChar === 'x') {
            return decode_codepoint_1.default(parseInt(str.substr(3), 16));
          }
          return decode_codepoint_1.default(parseInt(str.substr(2), 10));
        }
        return map[str.slice(1, -1)] || str;
      };
    }
  },
});

// node_modules/entities/lib/encode.js
var require_encode = __commonJS({
  'node_modules/entities/lib/encode.js'(exports) {
    'use strict';
    var __importDefault =
      (exports && exports.__importDefault) ||
      function (mod2) {
        return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
      };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = void 0;
    var xml_json_1 = __importDefault(require_xml());
    var inverseXML = getInverseObj(xml_json_1.default);
    var xmlReplacer = getInverseReplacer(inverseXML);
    exports.encodeXML = getASCIIEncoder(inverseXML);
    var entities_json_1 = __importDefault(require_entities());
    var inverseHTML = getInverseObj(entities_json_1.default);
    var htmlReplacer = getInverseReplacer(inverseHTML);
    exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);
    exports.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
    function getInverseObj(obj) {
      return Object.keys(obj)
        .sort()
        .reduce(function (inverse, name) {
          inverse[obj[name]] = '&' + name + ';';
          return inverse;
        }, {});
    }
    function getInverseReplacer(inverse) {
      var single = [];
      var multiple = [];
      for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
        var k = _a[_i];
        if (k.length === 1) {
          single.push('\\' + k);
        } else {
          multiple.push(k);
        }
      }
      single.sort();
      for (var start = 0; start < single.length - 1; start++) {
        var end = start;
        while (end < single.length - 1 && single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {
          end += 1;
        }
        var count = 1 + end - start;
        if (count < 3) continue;
        single.splice(start, count, single[start] + '-' + single[end]);
      }
      multiple.unshift('[' + single.join('') + ']');
      return new RegExp(multiple.join('|'), 'g');
    }
    var reNonASCII =
      /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
    var getCodePoint =
      String.prototype.codePointAt != null
        ? function (str) {
            return str.codePointAt(0);
          }
        : function (c) {
            return (c.charCodeAt(0) - 55296) * 1024 + c.charCodeAt(1) - 56320 + 65536;
          };
    function singleCharReplacer(c) {
      return '&#x' + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0)).toString(16).toUpperCase() + ';';
    }
    function getInverse(inverse, re) {
      return function (data) {
        return data
          .replace(re, function (name) {
            return inverse[name];
          })
          .replace(reNonASCII, singleCharReplacer);
      };
    }
    var reEscapeChars = new RegExp(xmlReplacer.source + '|' + reNonASCII.source, 'g');
    function escape(data) {
      return data.replace(reEscapeChars, singleCharReplacer);
    }
    exports.escape = escape;
    function escapeUTF8(data) {
      return data.replace(xmlReplacer, singleCharReplacer);
    }
    exports.escapeUTF8 = escapeUTF8;
    function getASCIIEncoder(obj) {
      return function (data) {
        return data.replace(reEscapeChars, function (c) {
          return obj[c] || singleCharReplacer(c);
        });
      };
    }
  },
});

// node_modules/entities/lib/index.js
var require_lib = __commonJS({
  'node_modules/entities/lib/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.decodeXMLStrict =
      exports.decodeHTML5Strict =
      exports.decodeHTML4Strict =
      exports.decodeHTML5 =
      exports.decodeHTML4 =
      exports.decodeHTMLStrict =
      exports.decodeHTML =
      exports.decodeXML =
      exports.encodeHTML5 =
      exports.encodeHTML4 =
      exports.escapeUTF8 =
      exports.escape =
      exports.encodeNonAsciiHTML =
      exports.encodeHTML =
      exports.encodeXML =
      exports.encode =
      exports.decodeStrict =
      exports.decode =
        void 0;
    var decode_1 = require_decode2();
    var encode_1 = require_encode();
    function decode(data, level) {
      return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
    }
    exports.decode = decode;
    function decodeStrict(data, level) {
      return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
    }
    exports.decodeStrict = decodeStrict;
    function encode(data, level) {
      return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
    }
    exports.encode = encode;
    var encode_2 = require_encode();
    Object.defineProperty(exports, 'encodeXML', {
      enumerable: true,
      get: function () {
        return encode_2.encodeXML;
      },
    });
    Object.defineProperty(exports, 'encodeHTML', {
      enumerable: true,
      get: function () {
        return encode_2.encodeHTML;
      },
    });
    Object.defineProperty(exports, 'encodeNonAsciiHTML', {
      enumerable: true,
      get: function () {
        return encode_2.encodeNonAsciiHTML;
      },
    });
    Object.defineProperty(exports, 'escape', {
      enumerable: true,
      get: function () {
        return encode_2.escape;
      },
    });
    Object.defineProperty(exports, 'escapeUTF8', {
      enumerable: true,
      get: function () {
        return encode_2.escapeUTF8;
      },
    });
    Object.defineProperty(exports, 'encodeHTML4', {
      enumerable: true,
      get: function () {
        return encode_2.encodeHTML;
      },
    });
    Object.defineProperty(exports, 'encodeHTML5', {
      enumerable: true,
      get: function () {
        return encode_2.encodeHTML;
      },
    });
    var decode_2 = require_decode2();
    Object.defineProperty(exports, 'decodeXML', {
      enumerable: true,
      get: function () {
        return decode_2.decodeXML;
      },
    });
    Object.defineProperty(exports, 'decodeHTML', {
      enumerable: true,
      get: function () {
        return decode_2.decodeHTML;
      },
    });
    Object.defineProperty(exports, 'decodeHTMLStrict', {
      enumerable: true,
      get: function () {
        return decode_2.decodeHTMLStrict;
      },
    });
    Object.defineProperty(exports, 'decodeHTML4', {
      enumerable: true,
      get: function () {
        return decode_2.decodeHTML;
      },
    });
    Object.defineProperty(exports, 'decodeHTML5', {
      enumerable: true,
      get: function () {
        return decode_2.decodeHTML;
      },
    });
    Object.defineProperty(exports, 'decodeHTML4Strict', {
      enumerable: true,
      get: function () {
        return decode_2.decodeHTMLStrict;
      },
    });
    Object.defineProperty(exports, 'decodeHTML5Strict', {
      enumerable: true,
      get: function () {
        return decode_2.decodeHTMLStrict;
      },
    });
    Object.defineProperty(exports, 'decodeXMLStrict', {
      enumerable: true,
      get: function () {
        return decode_2.decodeXML;
      },
    });
  },
});

// node_modules/fast-xml-parser/src/util.js
var require_util = __commonJS({
  'node_modules/fast-xml-parser/src/util.js'(exports) {
    'use strict';
    var nameStartChar =
      ':A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
    var nameChar = nameStartChar + '\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
    var nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*';
    var regexName = new RegExp('^' + nameRegexp + '$');
    var getAllMatches = function (string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function (string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === 'undefined');
    };
    exports.isExist = function (v) {
      return typeof v !== 'undefined';
    };
    exports.isEmptyObject = function (obj) {
      return Object.keys(obj).length === 0;
    };
    exports.merge = function (target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === 'strict') {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports.getValue = function (v) {
      if (exports.isExist(v)) {
        return v;
      } else {
        return '';
      }
    };
    exports.buildOptions = function (options, defaultOptions, props) {
      var newOptions = {};
      if (!options) {
        return defaultOptions;
      }
      for (let i = 0; i < props.length; i++) {
        if (options[props[i]] !== void 0) {
          newOptions[props[i]] = options[props[i]];
        } else {
          newOptions[props[i]] = defaultOptions[props[i]];
        }
      }
      return newOptions;
    };
    exports.isTagNameInArrayMode = function (tagName, arrayMode, parentTagName) {
      if (arrayMode === false) {
        return false;
      } else if (arrayMode instanceof RegExp) {
        return arrayMode.test(tagName);
      } else if (typeof arrayMode === 'function') {
        return !!arrayMode(tagName, parentTagName);
      }
      return arrayMode === 'strict';
    };
    exports.isName = isName;
    exports.getAllMatches = getAllMatches;
    exports.nameRegexp = nameRegexp;
  },
});

// node_modules/fast-xml-parser/src/node2json.js
var require_node2json = __commonJS({
  'node_modules/fast-xml-parser/src/node2json.js'(exports) {
    'use strict';
    var util2 = require_util();
    var convertToJson = function (node, options, parentTagName) {
      const jObj = {};
      if ((!node.child || util2.isEmptyObject(node.child)) && (!node.attrsMap || util2.isEmptyObject(node.attrsMap))) {
        return util2.isExist(node.val) ? node.val : '';
      }
      if (
        util2.isExist(node.val) &&
        !(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))
      ) {
        const asArray = util2.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName);
        jObj[options.textNodeName] = asArray ? [node.val] : node.val;
      }
      util2.merge(jObj, node.attrsMap, options.arrayMode);
      const keys = Object.keys(node.child);
      for (let index = 0; index < keys.length; index++) {
        const tagName = keys[index];
        if (node.child[tagName] && node.child[tagName].length > 1) {
          jObj[tagName] = [];
          for (let tag in node.child[tagName]) {
            if (node.child[tagName].hasOwnProperty(tag)) {
              jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));
            }
          }
        } else {
          const result = convertToJson(node.child[tagName][0], options, tagName);
          const asArray =
            (options.arrayMode === true && typeof result === 'object') ||
            util2.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);
          jObj[tagName] = asArray ? [result] : result;
        }
      }
      return jObj;
    };
    exports.convertToJson = convertToJson;
  },
});

// node_modules/fast-xml-parser/src/xmlNode.js
var require_xmlNode = __commonJS({
  'node_modules/fast-xml-parser/src/xmlNode.js'(exports, module2) {
    'use strict';
    module2.exports = function (tagname, parent, val) {
      this.tagname = tagname;
      this.parent = parent;
      this.child = {};
      this.attrsMap = {};
      this.val = val;
      this.addChild = function (child) {
        if (Array.isArray(this.child[child.tagname])) {
          this.child[child.tagname].push(child);
        } else {
          this.child[child.tagname] = [child];
        }
      };
    };
  },
});

// node_modules/fast-xml-parser/src/xmlstr2xmlnode.js
var require_xmlstr2xmlnode = __commonJS({
  'node_modules/fast-xml-parser/src/xmlstr2xmlnode.js'(exports) {
    'use strict';
    var util2 = require_util();
    var buildOptions = require_util().buildOptions;
    var xmlNode = require_xmlNode();
    var regx = '<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)'.replace(
      /NAME/g,
      util2.nameRegexp
    );
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var defaultOptions = {
      attributeNamePrefix: '@_',
      attrNodeName: false,
      textNodeName: '#text',
      ignoreAttributes: true,
      ignoreNameSpace: false,
      allowBooleanAttributes: false,
      parseNodeValue: true,
      parseAttributeValue: false,
      arrayMode: false,
      trimValues: true,
      cdataTagName: false,
      cdataPositionChar: '\\c',
      tagValueProcessor: function (a, tagName) {
        return a;
      },
      attrValueProcessor: function (a, attrName) {
        return a;
      },
      stopNodes: [],
    };
    exports.defaultOptions = defaultOptions;
    var props = [
      'attributeNamePrefix',
      'attrNodeName',
      'textNodeName',
      'ignoreAttributes',
      'ignoreNameSpace',
      'allowBooleanAttributes',
      'parseNodeValue',
      'parseAttributeValue',
      'arrayMode',
      'trimValues',
      'cdataTagName',
      'cdataPositionChar',
      'tagValueProcessor',
      'attrValueProcessor',
      'parseTrueNumberOnly',
      'stopNodes',
    ];
    exports.props = props;
    function processTagValue(tagName, val, options) {
      if (val) {
        if (options.trimValues) {
          val = val.trim();
        }
        val = options.tagValueProcessor(val, tagName);
        val = parseValue(val, options.parseNodeValue, options.parseTrueNumberOnly);
      }
      return val;
    }
    function resolveNameSpace(tagname, options) {
      if (options.ignoreNameSpace) {
        const tags = tagname.split(':');
        const prefix = tagname.charAt(0) === '/' ? '/' : '';
        if (tags[0] === 'xmlns') {
          return '';
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    function parseValue(val, shouldParse, parseTrueNumberOnly) {
      if (shouldParse && typeof val === 'string') {
        let parsed;
        if (val.trim() === '' || isNaN(val)) {
          parsed = val === 'true' ? true : val === 'false' ? false : val;
        } else {
          if (val.indexOf('0x') !== -1) {
            parsed = Number.parseInt(val, 16);
          } else if (val.indexOf('.') !== -1) {
            parsed = Number.parseFloat(val);
            val = val.replace(/\.?0+$/, '');
          } else {
            parsed = Number.parseInt(val, 10);
          }
          if (parseTrueNumberOnly) {
            parsed = String(parsed) === val ? parsed : val;
          }
        }
        return parsed;
      } else {
        if (util2.isExist(val)) {
          return val;
        } else {
          return '';
        }
      }
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])(.*?)\\3)?`, 'g');
    function buildAttributesMap(attrStr, options) {
      if (!options.ignoreAttributes && typeof attrStr === 'string') {
        attrStr = attrStr.replace(/\r?\n/g, ' ');
        const matches = util2.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = resolveNameSpace(matches[i][1], options);
          if (attrName.length) {
            if (matches[i][4] !== void 0) {
              if (options.trimValues) {
                matches[i][4] = matches[i][4].trim();
              }
              matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);
              attrs[options.attributeNamePrefix + attrName] = parseValue(
                matches[i][4],
                options.parseAttributeValue,
                options.parseTrueNumberOnly
              );
            } else if (options.allowBooleanAttributes) {
              attrs[options.attributeNamePrefix + attrName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (options.attrNodeName) {
          const attrCollection = {};
          attrCollection[options.attrNodeName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var getTraversalObj = function (xmlData, options) {
      xmlData = xmlData.replace(/\r\n?/g, '\n');
      options = buildOptions(options, defaultOptions, props);
      const xmlObj = new xmlNode('!xml');
      let currentNode = xmlObj;
      let textData = '';
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === '<') {
          if (xmlData[i + 1] === '/') {
            const closeIndex = findClosingIndex(xmlData, '>', i, 'Closing Tag is not closed.');
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (options.ignoreNameSpace) {
              const colonIndex = tagName.indexOf(':');
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (currentNode) {
              if (currentNode.val) {
                currentNode.val = util2.getValue(currentNode.val) + '' + processTagValue(tagName, textData, options);
              } else {
                currentNode.val = processTagValue(tagName, textData, options);
              }
            }
            if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {
              currentNode.child = [];
              if (currentNode.attrsMap == void 0) {
                currentNode.attrsMap = {};
              }
              currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1);
            }
            currentNode = currentNode.parent;
            textData = '';
            i = closeIndex;
          } else if (xmlData[i + 1] === '?') {
            i = findClosingIndex(xmlData, '?>', i, 'Pi Tag is not closed.');
          } else if (xmlData.substr(i + 1, 3) === '!--') {
            i = findClosingIndex(xmlData, '-->', i, 'Comment is not closed.');
          } else if (xmlData.substr(i + 1, 2) === '!D') {
            const closeIndex = findClosingIndex(xmlData, '>', i, 'DOCTYPE is not closed.');
            const tagExp = xmlData.substring(i, closeIndex);
            if (tagExp.indexOf('[') >= 0) {
              i = xmlData.indexOf(']>', i) + 1;
            } else {
              i = closeIndex;
            }
          } else if (xmlData.substr(i + 1, 2) === '![') {
            const closeIndex = findClosingIndex(xmlData, ']]>', i, 'CDATA is not closed.') - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            if (textData) {
              currentNode.val =
                util2.getValue(currentNode.val) + '' + processTagValue(currentNode.tagname, textData, options);
              textData = '';
            }
            if (options.cdataTagName) {
              const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);
              currentNode.addChild(childNode);
              currentNode.val = util2.getValue(currentNode.val) + options.cdataPositionChar;
              if (tagExp) {
                childNode.val = tagExp;
              }
            } else {
              currentNode.val = (currentNode.val || '') + (tagExp || '');
            }
            i = closeIndex + 2;
          } else {
            const result = closingIndexForOpeningTag(xmlData, i + 1);
            let tagExp = result.data;
            const closeIndex = result.index;
            const separatorIndex = tagExp.indexOf(' ');
            let tagName = tagExp;
            let shouldBuildAttributesMap = true;
            if (separatorIndex !== -1) {
              tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, '');
              tagExp = tagExp.substr(separatorIndex + 1);
            }
            if (options.ignoreNameSpace) {
              const colonIndex = tagName.indexOf(':');
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
                shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);
              }
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== '!xml') {
                currentNode.val =
                  util2.getValue(currentNode.val) + '' + processTagValue(currentNode.tagname, textData, options);
              }
            }
            if (tagExp.length > 0 && tagExp.lastIndexOf('/') === tagExp.length - 1) {
              if (tagName[tagName.length - 1] === '/') {
                tagName = tagName.substr(0, tagName.length - 1);
                tagExp = tagName;
              } else {
                tagExp = tagExp.substr(0, tagExp.length - 1);
              }
              const childNode = new xmlNode(tagName, currentNode, '');
              if (tagName !== tagExp) {
                childNode.attrsMap = buildAttributesMap(tagExp, options);
              }
              currentNode.addChild(childNode);
            } else {
              const childNode = new xmlNode(tagName, currentNode);
              if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {
                childNode.startIndex = closeIndex;
              }
              if (tagName !== tagExp && shouldBuildAttributesMap) {
                childNode.attrsMap = buildAttributesMap(tagExp, options);
              }
              currentNode.addChild(childNode);
              currentNode = childNode;
            }
            textData = '';
            i = closeIndex;
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj;
    };
    function closingIndexForOpeningTag(data, i) {
      let attrBoundary;
      let tagExp = '';
      for (let index = i; index < data.length; index++) {
        let ch = data[index];
        if (attrBoundary) {
          if (ch === attrBoundary) attrBoundary = '';
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === '>') {
          return {
            data: tagExp,
            index,
          };
        } else if (ch === '	') {
          ch = ' ';
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    exports.getTraversalObj = getTraversalObj;
  },
});

// node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  'node_modules/fast-xml-parser/src/validator.js'(exports) {
    'use strict';
    var util2 = require_util();
    var defaultOptions = {
      allowBooleanAttributes: false,
    };
    var props = ['allowBooleanAttributes'];
    exports.validate = function (xmlData, options) {
      options = util2.buildOptions(options, defaultOptions, props);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === '\uFEFF') {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === '<' && xmlData[i + 1] === '?') {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err) return i;
        } else if (xmlData[i] === '<') {
          i++;
          if (xmlData[i] === '!') {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === '/') {
              closingTag = true;
              i++;
            }
            let tagName = '';
            for (
              ;
              i < xmlData.length &&
              xmlData[i] !== '>' &&
              xmlData[i] !== ' ' &&
              xmlData[i] !== '	' &&
              xmlData[i] !== '\n' &&
              xmlData[i] !== '\r';
              i++
            ) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === '/') {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "There is an unnecessary space between tag name and backward slash '</ ..'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject(
                'InvalidAttr',
                "Attributes for '" + tagName + "' have open quote.",
                getLineNumberForPosition(xmlData, i)
              );
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === '/') {
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid2 = validateAttributeString(attrStr, options);
              if (isValid2 === true) {
                tagFound = true;
              } else {
                return getErrorObject(
                  isValid2.err.code,
                  isValid2.err.msg,
                  getLineNumberForPosition(xmlData, i - attrStr.length + isValid2.err.line)
                );
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject(
                  'InvalidTag',
                  "Closing tag '" + tagName + "' doesn't have proper closing.",
                  getLineNumberForPosition(xmlData, i)
                );
              } else if (attrStr.trim().length > 0) {
                return getErrorObject(
                  'InvalidTag',
                  "Closing tag '" + tagName + "' can't have attributes or invalid starting.",
                  getLineNumberForPosition(xmlData, i)
                );
              } else {
                const otg = tags.pop();
                if (tagName !== otg) {
                  return getErrorObject(
                    'InvalidTag',
                    "Closing tag '" + otg + "' is expected inplace of '" + tagName + "'.",
                    getLineNumberForPosition(xmlData, i)
                  );
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid2 = validateAttributeString(attrStr, options);
              if (isValid2 !== true) {
                return getErrorObject(
                  isValid2.err.code,
                  isValid2.err.msg,
                  getLineNumberForPosition(xmlData, i - attrStr.length + isValid2.err.line)
                );
              }
              if (reachedRoot === true) {
                return getErrorObject(
                  'InvalidXml',
                  'Multiple possible root nodes found.',
                  getLineNumberForPosition(xmlData, i)
                );
              } else {
                tags.push(tagName);
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === '<') {
                if (xmlData[i + 1] === '!') {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === '?') {
                  i = readPI(xmlData, ++i);
                  if (i.err) return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === '&') {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject(
                    'InvalidChar',
                    "char '&' is not expected.",
                    getLineNumberForPosition(xmlData, i)
                  );
                i = afterAmp;
              }
            }
            if (xmlData[i] === '<') {
              i--;
            }
          }
        } else {
          if (xmlData[i] === ' ' || xmlData[i] === '	' || xmlData[i] === '\n' || xmlData[i] === '\r') {
            continue;
          }
          return getErrorObject(
            'InvalidChar',
            "char '" + xmlData[i] + "' is not expected.",
            getLineNumberForPosition(xmlData, i)
          );
        }
      }
      if (!tagFound) {
        return getErrorObject('InvalidXml', 'Start tag expected.', 1);
      } else if (tags.length > 0) {
        return getErrorObject(
          'InvalidXml',
          "Invalid '" + JSON.stringify(tags, null, 4).replace(/\r?\n/g, '') + "' found.",
          1
        );
      }
      return true;
    };
    function readPI(xmlData, i) {
      var start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == '?' || xmlData[i] == ' ') {
          var tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === 'xml') {
            return getErrorObject(
              'InvalidXml',
              'XML declaration allowed only at the start of the document.',
              getLineNumberForPosition(xmlData, i)
            );
          } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {
            i += 2;
            break;
          }
        }
      } else if (
        xmlData.length > i + 8 &&
        xmlData[i + 1] === 'D' &&
        xmlData[i + 2] === 'O' &&
        xmlData[i + 3] === 'C' &&
        xmlData[i + 4] === 'T' &&
        xmlData[i + 5] === 'Y' &&
        xmlData[i + 6] === 'P' &&
        xmlData[i + 7] === 'E'
      ) {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === '<') {
            angleBracketsCount++;
          } else if (xmlData[i] === '>') {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (
        xmlData.length > i + 9 &&
        xmlData[i + 1] === '[' &&
        xmlData[i + 2] === 'C' &&
        xmlData[i + 3] === 'D' &&
        xmlData[i + 4] === 'A' &&
        xmlData[i + 5] === 'T' &&
        xmlData[i + 6] === 'A' &&
        xmlData[i + 7] === '['
      ) {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = '';
      let startChar = '';
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === '') {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
            continue;
          } else {
            startChar = '';
          }
        } else if (xmlData[i] === '>') {
          if (startChar === '') {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== '') {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed,
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, 'g');
    function validateAttributeString(attrStr, options) {
      const matches = util2.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject(
            'InvalidAttr',
            "Attribute '" + matches[i][2] + "' has no space in starting.",
            getPositionFromMatch(attrStr, matches[i][0])
          );
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject(
            'InvalidAttr',
            "boolean attribute '" + matches[i][2] + "' is not allowed.",
            getPositionFromMatch(attrStr, matches[i][0])
          );
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject(
            'InvalidAttr',
            "Attribute '" + attrName + "' is an invalid name.",
            getPositionFromMatch(attrStr, matches[i][0])
          );
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject(
            'InvalidAttr',
            "Attribute '" + attrName + "' is repeated.",
            getPositionFromMatch(attrStr, matches[i][0])
          );
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === 'x') {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ';') return i;
        if (!xmlData[i].match(re)) break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ';') return -1;
      if (xmlData[i] === '#') {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20) continue;
        if (xmlData[i] === ';') break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber,
        },
      };
    }
    function validateAttrName(attrName) {
      return util2.isName(attrName);
    }
    function validateTagName(tagname) {
      return util2.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      var lines = xmlData.substring(0, index).split(/\r?\n/);
      return lines.length;
    }
    function getPositionFromMatch(attrStr, match) {
      return attrStr.indexOf(match) + match.length;
    }
  },
});

// node_modules/fast-xml-parser/src/nimndata.js
var require_nimndata = __commonJS({
  'node_modules/fast-xml-parser/src/nimndata.js'(exports) {
    'use strict';
    var char = function (a) {
      return String.fromCharCode(a);
    };
    var chars = {
      nilChar: char(176),
      missingChar: char(201),
      nilPremitive: char(175),
      missingPremitive: char(200),
      emptyChar: char(178),
      emptyValue: char(177),
      boundryChar: char(179),
      objStart: char(198),
      arrStart: char(204),
      arrayEnd: char(185),
    };
    var charsArr = [
      chars.nilChar,
      chars.nilPremitive,
      chars.missingChar,
      chars.missingPremitive,
      chars.boundryChar,
      chars.emptyChar,
      chars.emptyValue,
      chars.arrayEnd,
      chars.objStart,
      chars.arrStart,
    ];
    var _e = function (node, e_schema, options) {
      if (typeof e_schema === 'string') {
        if (node && node[0] && node[0].val !== void 0) {
          return getValue(node[0].val, e_schema);
        } else {
          return getValue(node, e_schema);
        }
      } else {
        const hasValidData = hasData(node);
        if (hasValidData === true) {
          let str = '';
          if (Array.isArray(e_schema)) {
            str += chars.arrStart;
            const itemSchema = e_schema[0];
            const arr_len = node.length;
            if (typeof itemSchema === 'string') {
              for (let arr_i = 0; arr_i < arr_len; arr_i++) {
                const r = getValue(node[arr_i].val, itemSchema);
                str = processValue(str, r);
              }
            } else {
              for (let arr_i = 0; arr_i < arr_len; arr_i++) {
                const r = _e(node[arr_i], itemSchema, options);
                str = processValue(str, r);
              }
            }
            str += chars.arrayEnd;
          } else {
            str += chars.objStart;
            const keys = Object.keys(e_schema);
            if (Array.isArray(node)) {
              node = node[0];
            }
            for (let i in keys) {
              const key = keys[i];
              let r;
              if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {
                r = _e(node.attrsMap[key], e_schema[key], options);
              } else if (key === options.textNodeName) {
                r = _e(node.val, e_schema[key], options);
              } else {
                r = _e(node.child[key], e_schema[key], options);
              }
              str = processValue(str, r);
            }
          }
          return str;
        } else {
          return hasValidData;
        }
      }
    };
    var getValue = function (a) {
      switch (a) {
        case void 0:
          return chars.missingPremitive;
        case null:
          return chars.nilPremitive;
        case '':
          return chars.emptyValue;
        default:
          return a;
      }
    };
    var processValue = function (str, r) {
      if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {
        str += chars.boundryChar;
      }
      return str + r;
    };
    var isAppChar = function (ch) {
      return charsArr.indexOf(ch) !== -1;
    };
    function hasData(jObj) {
      if (jObj === void 0) {
        return chars.missingChar;
      } else if (jObj === null) {
        return chars.nilChar;
      } else if (
        jObj.child &&
        Object.keys(jObj.child).length === 0 &&
        (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)
      ) {
        return chars.emptyChar;
      } else {
        return true;
      }
    }
    var x2j = require_xmlstr2xmlnode();
    var buildOptions = require_util().buildOptions;
    var convert2nimn = function (node, e_schema, options) {
      options = buildOptions(options, x2j.defaultOptions, x2j.props);
      return _e(node, e_schema, options);
    };
    exports.convert2nimn = convert2nimn;
  },
});

// node_modules/fast-xml-parser/src/node2json_str.js
var require_node2json_str = __commonJS({
  'node_modules/fast-xml-parser/src/node2json_str.js'(exports) {
    'use strict';
    var util2 = require_util();
    var buildOptions = require_util().buildOptions;
    var x2j = require_xmlstr2xmlnode();
    var convertToJsonString = function (node, options) {
      options = buildOptions(options, x2j.defaultOptions, x2j.props);
      options.indentBy = options.indentBy || '';
      return _cToJsonStr(node, options, 0);
    };
    var _cToJsonStr = function (node, options, level) {
      let jObj = '{';
      const keys = Object.keys(node.child);
      for (let index = 0; index < keys.length; index++) {
        var tagname = keys[index];
        if (node.child[tagname] && node.child[tagname].length > 1) {
          jObj += '"' + tagname + '" : [ ';
          for (var tag in node.child[tagname]) {
            jObj += _cToJsonStr(node.child[tagname][tag], options) + ' , ';
          }
          jObj = jObj.substr(0, jObj.length - 1) + ' ] ';
        } else {
          jObj += '"' + tagname + '" : ' + _cToJsonStr(node.child[tagname][0], options) + ' ,';
        }
      }
      util2.merge(jObj, node.attrsMap);
      if (util2.isEmptyObject(jObj)) {
        return util2.isExist(node.val) ? node.val : '';
      } else {
        if (util2.isExist(node.val)) {
          if (!(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {
            jObj += '"' + options.textNodeName + '" : ' + stringval(node.val);
          }
        }
      }
      if (jObj[jObj.length - 1] === ',') {
        jObj = jObj.substr(0, jObj.length - 2);
      }
      return jObj + '}';
    };
    function stringval(v) {
      if (v === true || v === false || !isNaN(v)) {
        return v;
      } else {
        return '"' + v + '"';
      }
    }
    exports.convertToJsonString = convertToJsonString;
  },
});

// node_modules/fast-xml-parser/src/json2xml.js
var require_json2xml = __commonJS({
  'node_modules/fast-xml-parser/src/json2xml.js'(exports, module2) {
    'use strict';
    var buildOptions = require_util().buildOptions;
    var defaultOptions = {
      attributeNamePrefix: '@_',
      attrNodeName: false,
      textNodeName: '#text',
      ignoreAttributes: true,
      cdataTagName: false,
      cdataPositionChar: '\\c',
      format: false,
      indentBy: '  ',
      supressEmptyNode: false,
      tagValueProcessor: function (a) {
        return a;
      },
      attrValueProcessor: function (a) {
        return a;
      },
    };
    var props = [
      'attributeNamePrefix',
      'attrNodeName',
      'textNodeName',
      'ignoreAttributes',
      'cdataTagName',
      'cdataPositionChar',
      'format',
      'indentBy',
      'supressEmptyNode',
      'tagValueProcessor',
      'attrValueProcessor',
    ];
    function Parser(options) {
      this.options = buildOptions(options, defaultOptions, props);
      if (this.options.ignoreAttributes || this.options.attrNodeName) {
        this.isAttribute = function () {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      if (this.options.cdataTagName) {
        this.isCDATA = isCDATA;
      } else {
        this.isCDATA = function () {
          return false;
        };
      }
      this.replaceCDATAstr = replaceCDATAstr;
      this.replaceCDATAarr = replaceCDATAarr;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = '>\n';
        this.newLine = '\n';
      } else {
        this.indentate = function () {
          return '';
        };
        this.tagEndChar = '>';
        this.newLine = '';
      }
      if (this.options.supressEmptyNode) {
        this.buildTextNode = buildEmptyTextNode;
        this.buildObjNode = buildEmptyObjNode;
      } else {
        this.buildTextNode = buildTextValNode;
        this.buildObjNode = buildObjectNode;
      }
      this.buildTextValNode = buildTextValNode;
      this.buildObjectNode = buildObjectNode;
    }
    Parser.prototype.parse = function (jObj) {
      return this.j2x(jObj, 0).val;
    };
    Parser.prototype.j2x = function (jObj, level) {
      let attrStr = '';
      let val = '';
      const keys = Object.keys(jObj);
      const len = keys.length;
      for (let i = 0; i < len; i++) {
        const key = keys[i];
        if (typeof jObj[key] === 'undefined') {
        } else if (jObj[key] === null) {
          val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val += this.buildTextNode(jObj[key], key, '', level);
        } else if (typeof jObj[key] !== 'object') {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += ' ' + attr + '="' + this.options.attrValueProcessor('' + jObj[key]) + '"';
          } else if (this.isCDATA(key)) {
            if (jObj[this.options.textNodeName]) {
              val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);
            } else {
              val += this.replaceCDATAstr('', jObj[key]);
            }
          } else {
            if (key === this.options.textNodeName) {
              if (jObj[this.options.cdataTagName]) {
              } else {
                val += this.options.tagValueProcessor('' + jObj[key]);
              }
            } else {
              val += this.buildTextNode(jObj[key], key, '', level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          if (this.isCDATA(key)) {
            val += this.indentate(level);
            if (jObj[this.options.textNodeName]) {
              val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);
            } else {
              val += this.replaceCDATAarr('', jObj[key]);
            }
          } else {
            const arrLen = jObj[key].length;
            for (let j = 0; j < arrLen; j++) {
              const item = jObj[key][j];
              if (typeof item === 'undefined') {
              } else if (item === null) {
                val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
              } else if (typeof item === 'object') {
                const result = this.j2x(item, level + 1);
                val += this.buildObjNode(result.val, key, result.attrStr, level);
              } else {
                val += this.buildTextNode(item, key, '', level);
              }
            }
          }
        } else {
          if (this.options.attrNodeName && key === this.options.attrNodeName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += ' ' + Ks[j] + '="' + this.options.attrValueProcessor('' + jObj[key][Ks[j]]) + '"';
            }
          } else {
            const result = this.j2x(jObj[key], level + 1);
            val += this.buildObjNode(result.val, key, result.attrStr, level);
          }
        }
      }
      return { attrStr, val };
    };
    function replaceCDATAstr(str, cdata) {
      str = this.options.tagValueProcessor('' + str);
      if (this.options.cdataPositionChar === '' || str === '') {
        return str + '<![CDATA[' + cdata + ']]' + this.tagEndChar;
      } else {
        return str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata + ']]' + this.tagEndChar);
      }
    }
    function replaceCDATAarr(str, cdata) {
      str = this.options.tagValueProcessor('' + str);
      if (this.options.cdataPositionChar === '' || str === '') {
        return str + '<![CDATA[' + cdata.join(']]><![CDATA[') + ']]' + this.tagEndChar;
      } else {
        for (let v in cdata) {
          str = str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata[v] + ']]>');
        }
        return str + this.newLine;
      }
    }
    function buildObjectNode(val, key, attrStr, level) {
      if (attrStr && !val.includes('<')) {
        return this.indentate(level) + '<' + key + attrStr + '>' + val + '</' + key + this.tagEndChar;
      } else {
        return (
          this.indentate(level) +
          '<' +
          key +
          attrStr +
          this.tagEndChar +
          val +
          this.indentate(level) +
          '</' +
          key +
          this.tagEndChar
        );
      }
    }
    function buildEmptyObjNode(val, key, attrStr, level) {
      if (val !== '') {
        return this.buildObjectNode(val, key, attrStr, level);
      } else {
        return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;
      }
    }
    function buildTextValNode(val, key, attrStr, level) {
      return (
        this.indentate(level) +
        '<' +
        key +
        attrStr +
        '>' +
        this.options.tagValueProcessor(val) +
        '</' +
        key +
        this.tagEndChar
      );
    }
    function buildEmptyTextNode(val, key, attrStr, level) {
      if (val !== '') {
        return this.buildTextValNode(val, key, attrStr, level);
      } else {
        return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;
      }
    }
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    function isCDATA(name) {
      return name === this.options.cdataTagName;
    }
    module2.exports = Parser;
  },
});

// node_modules/fast-xml-parser/src/parser.js
var require_parser = __commonJS({
  'node_modules/fast-xml-parser/src/parser.js'(exports) {
    'use strict';
    var nodeToJson = require_node2json();
    var xmlToNodeobj = require_xmlstr2xmlnode();
    var x2xmlnode = require_xmlstr2xmlnode();
    var buildOptions = require_util().buildOptions;
    var validator = require_validator();
    exports.parse = function (xmlData, options, validationOption) {
      if (validationOption) {
        if (validationOption === true) validationOption = {};
        const result = validator.validate(xmlData, validationOption);
        if (result !== true) {
          throw Error(result.err.msg);
        }
      }
      options = buildOptions(options, x2xmlnode.defaultOptions, x2xmlnode.props);
      const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options);
      return nodeToJson.convertToJson(traversableObj, options);
    };
    exports.convertTonimn = require_nimndata().convert2nimn;
    exports.getTraversalObj = xmlToNodeobj.getTraversalObj;
    exports.convertToJson = nodeToJson.convertToJson;
    exports.convertToJsonString = require_node2json_str().convertToJsonString;
    exports.validate = validator.validate;
    exports.j2xParser = require_json2xml();
    exports.parseToNimn = function (xmlData, schema, options) {
      return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);
    };
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js
var require_Aws_query = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.deserializeAws_queryGetSessionTokenCommand =
      exports.deserializeAws_queryGetFederationTokenCommand =
      exports.deserializeAws_queryGetCallerIdentityCommand =
      exports.deserializeAws_queryGetAccessKeyInfoCommand =
      exports.deserializeAws_queryDecodeAuthorizationMessageCommand =
      exports.deserializeAws_queryAssumeRoleWithWebIdentityCommand =
      exports.deserializeAws_queryAssumeRoleWithSAMLCommand =
      exports.deserializeAws_queryAssumeRoleCommand =
      exports.serializeAws_queryGetSessionTokenCommand =
      exports.serializeAws_queryGetFederationTokenCommand =
      exports.serializeAws_queryGetCallerIdentityCommand =
      exports.serializeAws_queryGetAccessKeyInfoCommand =
      exports.serializeAws_queryDecodeAuthorizationMessageCommand =
      exports.serializeAws_queryAssumeRoleWithWebIdentityCommand =
      exports.serializeAws_queryAssumeRoleWithSAMLCommand =
      exports.serializeAws_queryAssumeRoleCommand =
        void 0;
    var protocol_http_1 = require_dist_cjs30();
    var smithy_client_1 = require_dist_cjs3();
    var entities_1 = require_lib();
    var fast_xml_parser_1 = require_parser();
    var models_0_1 = require_models_02();
    var STSServiceException_1 = require_STSServiceException();
    var serializeAws_queryAssumeRoleCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-www-form-urlencoded',
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleRequest(input, context),
        Action: 'AssumeRole',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_queryAssumeRoleCommand = serializeAws_queryAssumeRoleCommand;
    var serializeAws_queryAssumeRoleWithSAMLCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-www-form-urlencoded',
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleWithSAMLRequest(input, context),
        Action: 'AssumeRoleWithSAML',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_queryAssumeRoleWithSAMLCommand = serializeAws_queryAssumeRoleWithSAMLCommand;
    var serializeAws_queryAssumeRoleWithWebIdentityCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-www-form-urlencoded',
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleWithWebIdentityRequest(input, context),
        Action: 'AssumeRoleWithWebIdentity',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_queryAssumeRoleWithWebIdentityCommand = serializeAws_queryAssumeRoleWithWebIdentityCommand;
    var serializeAws_queryDecodeAuthorizationMessageCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-www-form-urlencoded',
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDecodeAuthorizationMessageRequest(input, context),
        Action: 'DecodeAuthorizationMessage',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_queryDecodeAuthorizationMessageCommand = serializeAws_queryDecodeAuthorizationMessageCommand;
    var serializeAws_queryGetAccessKeyInfoCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-www-form-urlencoded',
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetAccessKeyInfoRequest(input, context),
        Action: 'GetAccessKeyInfo',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_queryGetAccessKeyInfoCommand = serializeAws_queryGetAccessKeyInfoCommand;
    var serializeAws_queryGetCallerIdentityCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-www-form-urlencoded',
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetCallerIdentityRequest(input, context),
        Action: 'GetCallerIdentity',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_queryGetCallerIdentityCommand = serializeAws_queryGetCallerIdentityCommand;
    var serializeAws_queryGetFederationTokenCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-www-form-urlencoded',
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetFederationTokenRequest(input, context),
        Action: 'GetFederationToken',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_queryGetFederationTokenCommand = serializeAws_queryGetFederationTokenCommand;
    var serializeAws_queryGetSessionTokenCommand = async (input, context) => {
      const headers = {
        'content-type': 'application/x-www-form-urlencoded',
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetSessionTokenRequest(input, context),
        Action: 'GetSessionToken',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.serializeAws_queryGetSessionTokenCommand = serializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryAssumeRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAssumeRoleCommand = deserializeAws_queryAssumeRoleCommand;
    var deserializeAws_queryAssumeRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ExpiredTokenException':
        case 'com.amazonaws.sts#ExpiredTokenException':
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case 'MalformedPolicyDocumentException':
        case 'com.amazonaws.sts#MalformedPolicyDocumentException':
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case 'PackedPolicyTooLargeException':
        case 'com.amazonaws.sts#PackedPolicyTooLargeException':
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case 'RegionDisabledException':
        case 'com.amazonaws.sts#RegionDisabledException':
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryAssumeRoleWithSAMLCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithSAMLCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAssumeRoleWithSAMLCommand = deserializeAws_queryAssumeRoleWithSAMLCommand;
    var deserializeAws_queryAssumeRoleWithSAMLCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ExpiredTokenException':
        case 'com.amazonaws.sts#ExpiredTokenException':
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case 'IDPRejectedClaimException':
        case 'com.amazonaws.sts#IDPRejectedClaimException':
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case 'InvalidIdentityTokenException':
        case 'com.amazonaws.sts#InvalidIdentityTokenException':
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case 'MalformedPolicyDocumentException':
        case 'com.amazonaws.sts#MalformedPolicyDocumentException':
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case 'PackedPolicyTooLargeException':
        case 'com.amazonaws.sts#PackedPolicyTooLargeException':
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case 'RegionDisabledException':
        case 'com.amazonaws.sts#RegionDisabledException':
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithWebIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAssumeRoleWithWebIdentityCommand = deserializeAws_queryAssumeRoleWithWebIdentityCommand;
    var deserializeAws_queryAssumeRoleWithWebIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ExpiredTokenException':
        case 'com.amazonaws.sts#ExpiredTokenException':
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case 'IDPCommunicationErrorException':
        case 'com.amazonaws.sts#IDPCommunicationErrorException':
          throw await deserializeAws_queryIDPCommunicationErrorExceptionResponse(parsedOutput, context);
        case 'IDPRejectedClaimException':
        case 'com.amazonaws.sts#IDPRejectedClaimException':
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case 'InvalidIdentityTokenException':
        case 'com.amazonaws.sts#InvalidIdentityTokenException':
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case 'MalformedPolicyDocumentException':
        case 'com.amazonaws.sts#MalformedPolicyDocumentException':
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case 'PackedPolicyTooLargeException':
        case 'com.amazonaws.sts#PackedPolicyTooLargeException':
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case 'RegionDisabledException':
        case 'com.amazonaws.sts#RegionDisabledException':
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDecodeAuthorizationMessageCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDecodeAuthorizationMessageCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDecodeAuthorizationMessageCommand =
      deserializeAws_queryDecodeAuthorizationMessageCommand;
    var deserializeAws_queryDecodeAuthorizationMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InvalidAuthorizationMessageException':
        case 'com.amazonaws.sts#InvalidAuthorizationMessageException':
          throw await deserializeAws_queryInvalidAuthorizationMessageExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetAccessKeyInfoCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetAccessKeyInfoCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetAccessKeyInfoCommand = deserializeAws_queryGetAccessKeyInfoCommand;
    var deserializeAws_queryGetAccessKeyInfoCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetCallerIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetCallerIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetCallerIdentityCommand = deserializeAws_queryGetCallerIdentityCommand;
    var deserializeAws_queryGetCallerIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetFederationTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetFederationTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetFederationTokenCommand = deserializeAws_queryGetFederationTokenCommand;
    var deserializeAws_queryGetFederationTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'MalformedPolicyDocumentException':
        case 'com.amazonaws.sts#MalformedPolicyDocumentException':
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case 'PackedPolicyTooLargeException':
        case 'com.amazonaws.sts#PackedPolicyTooLargeException':
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case 'RegionDisabledException':
        case 'com.amazonaws.sts#RegionDisabledException':
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetSessionTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetSessionTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetSessionTokenCommand = deserializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryGetSessionTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'RegionDisabledException':
        case 'com.amazonaws.sts#RegionDisabledException':
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryExpiredTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryExpiredTokenException(body.Error, context);
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIDPCommunicationErrorExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPCommunicationErrorException(body.Error, context);
      const exception = new models_0_1.IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIDPRejectedClaimExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPRejectedClaimException(body.Error, context);
      const exception = new models_0_1.IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidAuthorizationMessageExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidAuthorizationMessageException(body.Error, context);
      const exception = new models_0_1.InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidIdentityTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidIdentityTokenException(body.Error, context);
      const exception = new models_0_1.InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryMalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);
      const exception = new models_0_1.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryPackedPolicyTooLargeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryPackedPolicyTooLargeException(body.Error, context);
      const exception = new models_0_1.PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryRegionDisabledExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryRegionDisabledException(body.Error, context);
      const exception = new models_0_1.RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_queryAssumeRoleRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries['RoleArn'] = input.RoleArn;
      }
      if (input.RoleSessionName !== void 0 && input.RoleSessionName !== null) {
        entries['RoleSessionName'] = input.RoleSessionName;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries['Policy'] = input.Policy;
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries['DurationSeconds'] = input.DurationSeconds;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TransitiveTagKeys !== void 0 && input.TransitiveTagKeys !== null) {
        const memberEntries = serializeAws_querytagKeyListType(input.TransitiveTagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExternalId !== void 0 && input.ExternalId !== null) {
        entries['ExternalId'] = input.ExternalId;
      }
      if (input.SerialNumber !== void 0 && input.SerialNumber !== null) {
        entries['SerialNumber'] = input.SerialNumber;
      }
      if (input.TokenCode !== void 0 && input.TokenCode !== null) {
        entries['TokenCode'] = input.TokenCode;
      }
      if (input.SourceIdentity !== void 0 && input.SourceIdentity !== null) {
        entries['SourceIdentity'] = input.SourceIdentity;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithSAMLRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries['RoleArn'] = input.RoleArn;
      }
      if (input.PrincipalArn !== void 0 && input.PrincipalArn !== null) {
        entries['PrincipalArn'] = input.PrincipalArn;
      }
      if (input.SAMLAssertion !== void 0 && input.SAMLAssertion !== null) {
        entries['SAMLAssertion'] = input.SAMLAssertion;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries['Policy'] = input.Policy;
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries['DurationSeconds'] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithWebIdentityRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries['RoleArn'] = input.RoleArn;
      }
      if (input.RoleSessionName !== void 0 && input.RoleSessionName !== null) {
        entries['RoleSessionName'] = input.RoleSessionName;
      }
      if (input.WebIdentityToken !== void 0 && input.WebIdentityToken !== null) {
        entries['WebIdentityToken'] = input.WebIdentityToken;
      }
      if (input.ProviderId !== void 0 && input.ProviderId !== null) {
        entries['ProviderId'] = input.ProviderId;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries['Policy'] = input.Policy;
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries['DurationSeconds'] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryDecodeAuthorizationMessageRequest = (input, context) => {
      const entries = {};
      if (input.EncodedMessage !== void 0 && input.EncodedMessage !== null) {
        entries['EncodedMessage'] = input.EncodedMessage;
      }
      return entries;
    };
    var serializeAws_queryGetAccessKeyInfoRequest = (input, context) => {
      const entries = {};
      if (input.AccessKeyId !== void 0 && input.AccessKeyId !== null) {
        entries['AccessKeyId'] = input.AccessKeyId;
      }
      return entries;
    };
    var serializeAws_queryGetCallerIdentityRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var serializeAws_queryGetFederationTokenRequest = (input, context) => {
      const entries = {};
      if (input.Name !== void 0 && input.Name !== null) {
        entries['Name'] = input.Name;
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries['Policy'] = input.Policy;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries['DurationSeconds'] = input.DurationSeconds;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryGetSessionTokenRequest = (input, context) => {
      const entries = {};
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries['DurationSeconds'] = input.DurationSeconds;
      }
      if (input.SerialNumber !== void 0 && input.SerialNumber !== null) {
        entries['SerialNumber'] = input.SerialNumber;
      }
      if (input.TokenCode !== void 0 && input.TokenCode !== null) {
        entries['TokenCode'] = input.TokenCode;
      }
      return entries;
    };
    var serializeAws_querypolicyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryPolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryPolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input.arn !== void 0 && input.arn !== null) {
        entries['arn'] = input.arn;
      }
      return entries;
    };
    var serializeAws_queryTag = (input, context) => {
      const entries = {};
      if (input.Key !== void 0 && input.Key !== null) {
        entries['Key'] = input.Key;
      }
      if (input.Value !== void 0 && input.Value !== null) {
        entries['Value'] = input.Value;
      }
      return entries;
    };
    var serializeAws_querytagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_querytagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var deserializeAws_queryAssumedRoleUser = (output, context) => {
      const contents = {
        AssumedRoleId: void 0,
        Arn: void 0,
      };
      if (output['AssumedRoleId'] !== void 0) {
        contents.AssumedRoleId = (0, smithy_client_1.expectString)(output['AssumedRoleId']);
      }
      if (output['Arn'] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output['Arn']);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        SourceIdentity: void 0,
      };
      if (output['Credentials'] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output['Credentials'], context);
      }
      if (output['AssumedRoleUser'] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output['AssumedRoleUser'], context);
      }
      if (output['PackedPolicySize'] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output['PackedPolicySize']);
      }
      if (output['SourceIdentity'] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output['SourceIdentity']);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithSAMLResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Subject: void 0,
        SubjectType: void 0,
        Issuer: void 0,
        Audience: void 0,
        NameQualifier: void 0,
        SourceIdentity: void 0,
      };
      if (output['Credentials'] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output['Credentials'], context);
      }
      if (output['AssumedRoleUser'] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output['AssumedRoleUser'], context);
      }
      if (output['PackedPolicySize'] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output['PackedPolicySize']);
      }
      if (output['Subject'] !== void 0) {
        contents.Subject = (0, smithy_client_1.expectString)(output['Subject']);
      }
      if (output['SubjectType'] !== void 0) {
        contents.SubjectType = (0, smithy_client_1.expectString)(output['SubjectType']);
      }
      if (output['Issuer'] !== void 0) {
        contents.Issuer = (0, smithy_client_1.expectString)(output['Issuer']);
      }
      if (output['Audience'] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output['Audience']);
      }
      if (output['NameQualifier'] !== void 0) {
        contents.NameQualifier = (0, smithy_client_1.expectString)(output['NameQualifier']);
      }
      if (output['SourceIdentity'] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output['SourceIdentity']);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        SubjectFromWebIdentityToken: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Provider: void 0,
        Audience: void 0,
        SourceIdentity: void 0,
      };
      if (output['Credentials'] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output['Credentials'], context);
      }
      if (output['SubjectFromWebIdentityToken'] !== void 0) {
        contents.SubjectFromWebIdentityToken = (0, smithy_client_1.expectString)(output['SubjectFromWebIdentityToken']);
      }
      if (output['AssumedRoleUser'] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output['AssumedRoleUser'], context);
      }
      if (output['PackedPolicySize'] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output['PackedPolicySize']);
      }
      if (output['Provider'] !== void 0) {
        contents.Provider = (0, smithy_client_1.expectString)(output['Provider']);
      }
      if (output['Audience'] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output['Audience']);
      }
      if (output['SourceIdentity'] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output['SourceIdentity']);
      }
      return contents;
    };
    var deserializeAws_queryCredentials = (output, context) => {
      const contents = {
        AccessKeyId: void 0,
        SecretAccessKey: void 0,
        SessionToken: void 0,
        Expiration: void 0,
      };
      if (output['AccessKeyId'] !== void 0) {
        contents.AccessKeyId = (0, smithy_client_1.expectString)(output['AccessKeyId']);
      }
      if (output['SecretAccessKey'] !== void 0) {
        contents.SecretAccessKey = (0, smithy_client_1.expectString)(output['SecretAccessKey']);
      }
      if (output['SessionToken'] !== void 0) {
        contents.SessionToken = (0, smithy_client_1.expectString)(output['SessionToken']);
      }
      if (output['Expiration'] !== void 0) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)(
          (0, smithy_client_1.parseRfc3339DateTime)(output['Expiration'])
        );
      }
      return contents;
    };
    var deserializeAws_queryDecodeAuthorizationMessageResponse = (output, context) => {
      const contents = {
        DecodedMessage: void 0,
      };
      if (output['DecodedMessage'] !== void 0) {
        contents.DecodedMessage = (0, smithy_client_1.expectString)(output['DecodedMessage']);
      }
      return contents;
    };
    var deserializeAws_queryExpiredTokenException = (output, context) => {
      const contents = {
        message: void 0,
      };
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var deserializeAws_queryFederatedUser = (output, context) => {
      const contents = {
        FederatedUserId: void 0,
        Arn: void 0,
      };
      if (output['FederatedUserId'] !== void 0) {
        contents.FederatedUserId = (0, smithy_client_1.expectString)(output['FederatedUserId']);
      }
      if (output['Arn'] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output['Arn']);
      }
      return contents;
    };
    var deserializeAws_queryGetAccessKeyInfoResponse = (output, context) => {
      const contents = {
        Account: void 0,
      };
      if (output['Account'] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output['Account']);
      }
      return contents;
    };
    var deserializeAws_queryGetCallerIdentityResponse = (output, context) => {
      const contents = {
        UserId: void 0,
        Account: void 0,
        Arn: void 0,
      };
      if (output['UserId'] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output['UserId']);
      }
      if (output['Account'] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output['Account']);
      }
      if (output['Arn'] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output['Arn']);
      }
      return contents;
    };
    var deserializeAws_queryGetFederationTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        FederatedUser: void 0,
        PackedPolicySize: void 0,
      };
      if (output['Credentials'] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output['Credentials'], context);
      }
      if (output['FederatedUser'] !== void 0) {
        contents.FederatedUser = deserializeAws_queryFederatedUser(output['FederatedUser'], context);
      }
      if (output['PackedPolicySize'] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output['PackedPolicySize']);
      }
      return contents;
    };
    var deserializeAws_queryGetSessionTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
      };
      if (output['Credentials'] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output['Credentials'], context);
      }
      return contents;
    };
    var deserializeAws_queryIDPCommunicationErrorException = (output, context) => {
      const contents = {
        message: void 0,
      };
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var deserializeAws_queryIDPRejectedClaimException = (output, context) => {
      const contents = {
        message: void 0,
      };
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var deserializeAws_queryInvalidAuthorizationMessageException = (output, context) => {
      const contents = {
        message: void 0,
      };
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var deserializeAws_queryInvalidIdentityTokenException = (output, context) => {
      const contents = {
        message: void 0,
      };
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var deserializeAws_queryMalformedPolicyDocumentException = (output, context) => {
      const contents = {
        message: void 0,
      };
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var deserializeAws_queryPackedPolicyTooLargeException = (output, context) => {
      const contents = {
        message: void 0,
      };
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var deserializeAws_queryRegionDisabledException = (output, context) => {
      const contents = {
        message: void 0,
      };
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId:
          (_a = output.headers['x-amzn-requestid']) !== null && _a !== void 0
            ? _a
            : output.headers['x-amzn-request-id'],
        extendedRequestId: output.headers['x-amz-id-2'],
        cfId: output.headers['x-amz-cf-id'],
      };
    };
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) =>
      collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = 'https', port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: 'POST',
        path: basePath.endsWith('/') ? basePath.slice(0, -1) + path : basePath + path,
        headers,
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) =>
      collectBodyString(streamBody, context).then((encoded) => {
        if (encoded.length) {
          const parsedObj = (0, fast_xml_parser_1.parse)(encoded, {
            attributeNamePrefix: '',
            ignoreAttributes: false,
            parseNodeValue: false,
            trimValues: false,
            tagValueProcessor: (val) =>
              val.trim() === '' && val.includes('\n') ? '' : (0, entities_1.decodeHTML)(val),
          });
          const textNodeName = '#text';
          const key = Object.keys(parsedObj)[0];
          const parsedObjToReturn = parsedObj[key];
          if (parsedObjToReturn[textNodeName]) {
            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
            delete parsedObjToReturn[textNodeName];
          }
          return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
        }
        return {};
      });
    var buildFormUrlencodedString = (formEntries) =>
      Object.entries(formEntries)
        .map(
          ([key, value]) =>
            (0, smithy_client_1.extendedEncodeURIComponent)(key) +
            '=' +
            (0, smithy_client_1.extendedEncodeURIComponent)(value)
        )
        .join('&');
    var loadQueryErrorCode = (output, data) => {
      if (data.Error.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return 'NotFound';
      }
    };
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js
var require_AssumeRoleCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.AssumeRoleCommand = void 0;
    var middleware_serde_1 = require_dist_cjs25();
    var middleware_signing_1 = require_dist_cjs31();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'AssumeRoleCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleCommand)(output, context);
      }
    };
    exports.AssumeRoleCommand = AssumeRoleCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js
var require_AssumeRoleWithSAMLCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.AssumeRoleWithSAMLCommand = void 0;
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithSAMLCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'AssumeRoleWithSAMLCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithSAMLCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithSAMLCommand)(output, context);
      }
    };
    exports.AssumeRoleWithSAMLCommand = AssumeRoleWithSAMLCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js
var require_AssumeRoleWithWebIdentityCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.AssumeRoleWithWebIdentityCommand = void 0;
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithWebIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'AssumeRoleWithWebIdentityCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithWebIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithWebIdentityCommand)(output, context);
      }
    };
    exports.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js
var require_DecodeAuthorizationMessageCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DecodeAuthorizationMessageCommand = void 0;
    var middleware_serde_1 = require_dist_cjs25();
    var middleware_signing_1 = require_dist_cjs31();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var DecodeAuthorizationMessageCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'DecodeAuthorizationMessageCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDecodeAuthorizationMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDecodeAuthorizationMessageCommand)(output, context);
      }
    };
    exports.DecodeAuthorizationMessageCommand = DecodeAuthorizationMessageCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js
var require_GetAccessKeyInfoCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetAccessKeyInfoCommand = void 0;
    var middleware_serde_1 = require_dist_cjs25();
    var middleware_signing_1 = require_dist_cjs31();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetAccessKeyInfoCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'GetAccessKeyInfoCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetAccessKeyInfoRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetAccessKeyInfoResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetAccessKeyInfoCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetAccessKeyInfoCommand)(output, context);
      }
    };
    exports.GetAccessKeyInfoCommand = GetAccessKeyInfoCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js
var require_GetCallerIdentityCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetCallerIdentityCommand = void 0;
    var middleware_serde_1 = require_dist_cjs25();
    var middleware_signing_1 = require_dist_cjs31();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetCallerIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'GetCallerIdentityCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetCallerIdentityRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetCallerIdentityResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetCallerIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetCallerIdentityCommand)(output, context);
      }
    };
    exports.GetCallerIdentityCommand = GetCallerIdentityCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js
var require_GetFederationTokenCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetFederationTokenCommand = void 0;
    var middleware_serde_1 = require_dist_cjs25();
    var middleware_signing_1 = require_dist_cjs31();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetFederationTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'GetFederationTokenCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFederationTokenRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetFederationTokenResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetFederationTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetFederationTokenCommand)(output, context);
      }
    };
    exports.GetFederationTokenCommand = GetFederationTokenCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js
var require_GetSessionTokenCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetSessionTokenCommand = void 0;
    var middleware_serde_1 = require_dist_cjs25();
    var middleware_signing_1 = require_dist_cjs31();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetSessionTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'GetSessionTokenCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetSessionTokenRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetSessionTokenResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetSessionTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetSessionTokenCommand)(output, context);
      }
    };
    exports.GetSessionTokenCommand = GetSessionTokenCommand;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var require_NodeUseDualstackEndpointConfigOptions2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS =
      exports.DEFAULT_USE_DUALSTACK_ENDPOINT =
      exports.CONFIG_USE_DUALSTACK_ENDPOINT =
      exports.ENV_USE_DUALSTACK_ENDPOINT =
        void 0;
    var util_config_provider_1 = require_dist_cjs5();
    exports.ENV_USE_DUALSTACK_ENDPOINT = 'AWS_USE_DUALSTACK_ENDPOINT';
    exports.CONFIG_USE_DUALSTACK_ENDPOINT = 'use_dualstack_endpoint';
    exports.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) =>
        (0, util_config_provider_1.booleanSelector)(
          env2,
          exports.ENV_USE_DUALSTACK_ENDPOINT,
          util_config_provider_1.SelectorType.ENV
        ),
      configFileSelector: (profile) =>
        (0, util_config_provider_1.booleanSelector)(
          profile,
          exports.CONFIG_USE_DUALSTACK_ENDPOINT,
          util_config_provider_1.SelectorType.CONFIG
        ),
      default: false,
    };
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var require_NodeUseFipsEndpointConfigOptions2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS =
      exports.DEFAULT_USE_FIPS_ENDPOINT =
      exports.CONFIG_USE_FIPS_ENDPOINT =
      exports.ENV_USE_FIPS_ENDPOINT =
        void 0;
    var util_config_provider_1 = require_dist_cjs5();
    exports.ENV_USE_FIPS_ENDPOINT = 'AWS_USE_FIPS_ENDPOINT';
    exports.CONFIG_USE_FIPS_ENDPOINT = 'use_fips_endpoint';
    exports.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) =>
        (0, util_config_provider_1.booleanSelector)(
          env2,
          exports.ENV_USE_FIPS_ENDPOINT,
          util_config_provider_1.SelectorType.ENV
        ),
      configFileSelector: (profile) =>
        (0, util_config_provider_1.booleanSelector)(
          profile,
          exports.CONFIG_USE_FIPS_ENDPOINT,
          util_config_provider_1.SelectorType.CONFIG
        ),
      default: false,
    };
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js
var require_resolveCustomEndpointsConfig2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveCustomEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var resolveCustomEndpointsConfig = (input) => {
      var _a;
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(
          typeof endpoint === 'string' ? urlParser(endpoint) : endpoint
        ),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)(input.useDualstackEndpoint),
      };
    };
    exports.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js
var require_getEndpointFromRegion2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error('Invalid region in client config');
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } =
        (_a = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) !== null &&
        _a !== void 0
          ? _a
          : {};
      if (!hostname) {
        throw new Error('Cannot resolve hostname from client config');
      }
      return input.urlParser(`${tls ? 'https:' : 'http:'}//${hostname}`);
    };
    exports.getEndpointFromRegion = getEndpointFromRegion;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js
var require_resolveEndpointsConfig2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var getEndpointFromRegion_1 = require_getEndpointFromRegion2();
    var resolveEndpointsConfig = (input) => {
      var _a;
      const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)(input.useDualstackEndpoint);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: endpoint
          ? (0, util_middleware_1.normalizeProvider)(typeof endpoint === 'string' ? urlParser(endpoint) : endpoint)
          : () =>
              (0, getEndpointFromRegion_1.getEndpointFromRegion)({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: endpoint ? true : false,
        useDualstackEndpoint,
      };
    };
    exports.resolveEndpointsConfig = resolveEndpointsConfig;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js
var require_endpointsConfig2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_NodeUseDualstackEndpointConfigOptions2(), exports);
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions2(), exports);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig2(), exports);
    tslib_1.__exportStar(require_resolveEndpointsConfig2(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js
var require_config3 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_REGION_CONFIG_FILE_OPTIONS =
      exports.NODE_REGION_CONFIG_OPTIONS =
      exports.REGION_INI_NAME =
      exports.REGION_ENV_NAME =
        void 0;
    exports.REGION_ENV_NAME = 'AWS_REGION';
    exports.REGION_INI_NAME = 'region';
    exports.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[exports.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports.REGION_INI_NAME],
      default: () => {
        throw new Error('Region is missing');
      },
    };
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: 'credentials',
    };
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js
var require_isFipsRegion2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isFipsRegion = void 0;
    var isFipsRegion = (region) =>
      typeof region === 'string' && (region.startsWith('fips-') || region.endsWith('-fips'));
    exports.isFipsRegion = isFipsRegion;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js
var require_getRealRegion2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion2();
    var getRealRegion = (region) =>
      (0, isFipsRegion_1.isFipsRegion)(region)
        ? ['fips-aws-global', 'aws-fips'].includes(region)
          ? 'us-east-1'
          : region.replace(/fips-(dkr-|prod-)?|-fips/, '')
        : region;
    exports.getRealRegion = getRealRegion;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js
var require_resolveRegionConfig2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion2();
    var isFipsRegion_1 = require_isFipsRegion2();
    var resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error('Region is missing');
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === 'string') {
            return (0, getRealRegion_1.getRealRegion)(region);
          }
          const providedRegion = await region();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === 'string' ? region : await region();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint === 'boolean' ? Promise.resolve(useFipsEndpoint) : useFipsEndpoint();
        },
      };
    };
    exports.resolveRegionConfig = resolveRegionConfig;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js
var require_regionConfig2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_config3(), exports);
    tslib_1.__exportStar(require_resolveRegionConfig2(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js
var require_PartitionHash2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js
var require_RegionHash2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js
var require_getHostnameFromVariants2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(
        ({ tags }) => useFipsEndpoint === tags.includes('fips') && useDualstackEndpoint === tags.includes('dualstack')
      )) === null || _a === void 0
        ? void 0
        : _a.hostname;
    };
    exports.getHostnameFromVariants = getHostnameFromVariants;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js
var require_getResolvedHostname2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getResolvedHostname = void 0;
    var getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) =>
      regionHostname
        ? regionHostname
        : partitionHostname
        ? partitionHostname.replace('{region}', resolvedRegion)
        : void 0;
    exports.getResolvedHostname = getResolvedHostname;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js
var require_getResolvedPartition2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getResolvedPartition = void 0;
    var getResolvedPartition = (region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region))) !==
        null && _a !== void 0
        ? _a
        : 'aws';
    };
    exports.getResolvedPartition = getResolvedPartition;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js
var require_getResolvedSigningRegion2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace('\\\\', '\\').replace(/^\^/g, '\\.').replace(/\$$/g, '\\.');
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    };
    exports.getResolvedSigningRegion = getResolvedSigningRegion;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js
var require_getRegionInfo2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants2();
    var getResolvedHostname_1 = require_getResolvedHostname2();
    var getResolvedPartition_1 = require_getResolvedPartition2();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion2();
    var getRegionInfo = (
      region,
      { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash }
    ) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = (0, getResolvedPartition_1.getResolvedPartition)(region, { partitionHash });
      const resolvedRegion =
        region in regionHash
          ? region
          : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null &&
            _b !== void 0
          ? _b
          : region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)(
        (_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants,
        hostnameOptions
      );
      const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)(
        (_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants,
        hostnameOptions
      );
      const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, {
        regionHostname,
        partitionHostname,
      });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint,
      });
      return {
        partition,
        signingService,
        hostname,
        ...(signingRegion && { signingRegion }),
        ...(((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {
          signingService: regionHash[resolvedRegion].signingService,
        }),
      };
    };
    exports.getRegionInfo = getRegionInfo;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js
var require_regionInfo2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_PartitionHash2(), exports);
    tslib_1.__exportStar(require_RegionHash2(), exports);
    tslib_1.__exportStar(require_getRegionInfo2(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/config-resolver/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_endpointsConfig2(), exports);
    tslib_1.__exportStar(require_regionConfig2(), exports);
    tslib_1.__exportStar(require_regionInfo2(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getContentLengthPlugin = exports.contentLengthMiddlewareOptions = exports.contentLengthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs30();
    var CONTENT_LENGTH_HEADER = 'content-length';
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (
            body &&
            Object.keys(headers)
              .map((str) => str.toLowerCase())
              .indexOf(CONTENT_LENGTH_HEADER) === -1
          ) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length),
              };
            } catch (error) {}
          }
        }
        return next({
          ...args,
          request,
        });
      };
    }
    exports.contentLengthMiddleware = contentLengthMiddleware;
    exports.contentLengthMiddlewareOptions = {
      step: 'build',
      tags: ['SET_CONTENT_LENGTH', 'CONTENT_LENGTH'],
      name: 'contentLengthMiddleware',
      override: true,
    };
    var getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports.contentLengthMiddlewareOptions);
      },
    });
    exports.getContentLengthPlugin = getContentLengthPlugin;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getHostHeaderPlugin =
      exports.hostHeaderMiddlewareOptions =
      exports.hostHeaderMiddleware =
      exports.resolveHostHeaderConfig =
        void 0;
    var protocol_http_1 = require_dist_cjs30();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    exports.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request)) return next(args);
      const { request } = args;
      const { handlerProtocol = '' } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf('h2') >= 0 && !request.headers[':authority']) {
        delete request.headers['host'];
        request.headers[':authority'] = '';
      } else if (!request.headers['host']) {
        request.headers['host'] = request.hostname;
      }
      return next(args);
    };
    exports.hostHeaderMiddleware = hostHeaderMiddleware;
    exports.hostHeaderMiddlewareOptions = {
      name: 'hostHeaderMiddleware',
      step: 'build',
      priority: 'low',
      tags: ['HOST'],
      override: true,
    };
    var getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.hostHeaderMiddleware)(options), exports.hostHeaderMiddlewareOptions);
      },
    });
    exports.getHostHeaderPlugin = getHostHeaderPlugin;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js
var require_loggerMiddleware2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getLoggerPlugin = exports.loggerMiddlewareOptions = exports.loggerMiddleware = void 0;
    var loggerMiddleware = () => (next, context) => async (args) => {
      const { clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog } = context;
      const response = await next(args);
      if (!logger) {
        return response;
      }
      if (typeof logger.info === 'function') {
        const { $metadata, ...outputWithoutMetadata } = response.output;
        logger.info({
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata,
        });
      }
      return response;
    };
    exports.loggerMiddleware = loggerMiddleware;
    exports.loggerMiddlewareOptions = {
      name: 'loggerMiddleware',
      tags: ['LOGGER'],
      step: 'initialize',
      override: true,
    };
    var getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.loggerMiddleware)(), exports.loggerMiddlewareOptions);
      },
    });
    exports.getLoggerPlugin = getLoggerPlugin;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_loggerMiddleware2(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/config.js
var require_config4 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/config.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DEFAULT_RETRY_MODE = exports.DEFAULT_MAX_ATTEMPTS = exports.RETRY_MODES = void 0;
    var RETRY_MODES;
    (function (RETRY_MODES2) {
      RETRY_MODES2['STANDARD'] = 'standard';
      RETRY_MODES2['ADAPTIVE'] = 'adaptive';
    })((RETRY_MODES = exports.RETRY_MODES || (exports.RETRY_MODES = {})));
    exports.DEFAULT_MAX_ATTEMPTS = 3;
    exports.DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js
var require_constants7 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TRANSIENT_ERROR_STATUS_CODES =
      exports.TRANSIENT_ERROR_CODES =
      exports.THROTTLING_ERROR_CODES =
      exports.CLOCK_SKEW_ERROR_CODES =
        void 0;
    exports.CLOCK_SKEW_ERROR_CODES = [
      'AuthFailure',
      'InvalidSignatureException',
      'RequestExpired',
      'RequestInTheFuture',
      'RequestTimeTooSkewed',
      'SignatureDoesNotMatch',
    ];
    exports.THROTTLING_ERROR_CODES = [
      'BandwidthLimitExceeded',
      'EC2ThrottledException',
      'LimitExceededException',
      'PriorRequestNotComplete',
      'ProvisionedThroughputExceededException',
      'RequestLimitExceeded',
      'RequestThrottled',
      'RequestThrottledException',
      'SlowDown',
      'ThrottledException',
      'Throttling',
      'ThrottlingException',
      'TooManyRequestsException',
      'TransactionInProgressException',
    ];
    exports.TRANSIENT_ERROR_CODES = ['AbortError', 'TimeoutError', 'RequestTimeout', 'RequestTimeoutException'];
    exports.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isTransientError =
      exports.isThrottlingError =
      exports.isClockSkewError =
      exports.isRetryableByTrait =
        void 0;
    var constants_1 = require_constants7();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return (
        ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 ||
        constants_1.THROTTLING_ERROR_CODES.includes(error.name) ||
        ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true
      );
    };
    exports.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return (
        constants_1.TRANSIENT_ERROR_CODES.includes(error.name) ||
        constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(
          ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0
        )
      );
    };
    exports.isTransientError = isTransientError;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/DefaultRateLimiter.js
var require_DefaultRateLimiter2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/DefaultRateLimiter.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs36();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta =
          (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
        this.minCapacity =
          (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0
            ? _b
            : 1;
        this.minFillRate =
          (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0
            ? _c
            : 0.5;
        this.scaleConstant =
          (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0
            ? _d
            : 0.4;
        this.smooth =
          (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = ((amount - this.currentCapacity) / this.fillRate) * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow((this.lastMaxRate * (1 - this.beta)) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(
          this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate
        );
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    exports.DefaultRateLimiter = DefaultRateLimiter;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/constants.js
var require_constants8 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.REQUEST_HEADER =
      exports.INVOCATION_ID_HEADER =
      exports.NO_RETRY_INCREMENT =
      exports.TIMEOUT_RETRY_COST =
      exports.RETRY_COST =
      exports.INITIAL_RETRY_TOKENS =
      exports.THROTTLING_RETRY_DELAY_BASE =
      exports.MAXIMUM_RETRY_DELAY =
      exports.DEFAULT_RETRY_DELAY_BASE =
        void 0;
    exports.DEFAULT_RETRY_DELAY_BASE = 100;
    exports.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports.THROTTLING_RETRY_DELAY_BASE = 500;
    exports.INITIAL_RETRY_TOKENS = 500;
    exports.RETRY_COST = 5;
    exports.TIMEOUT_RETRY_COST = 10;
    exports.NO_RETRY_INCREMENT = 1;
    exports.INVOCATION_ID_HEADER = 'amz-sdk-invocation-id';
    exports.REQUEST_HEADER = 'amz-sdk-request';
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js
var require_defaultRetryQuota2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getDefaultRetryQuota = void 0;
    var constants_1 = require_constants8();
    var getDefaultRetryQuota = (initialRetryTokens, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement =
        (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0
          ? _a
          : constants_1.NO_RETRY_INCREMENT;
      const retryCost =
        (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0
          ? _b
          : constants_1.RETRY_COST;
      const timeoutRetryCost =
        (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0
          ? _c
          : constants_1.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = (error) => (error.name === 'TimeoutError' ? timeoutRetryCost : retryCost);
      const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
      const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
          throw new Error('No retry token available');
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity +=
          capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens,
      });
    };
    exports.getDefaultRetryQuota = getDefaultRetryQuota;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js
var require_delayDecider2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultDelayDecider = void 0;
    var constants_1 = require_constants8();
    var defaultDelayDecider = (delayBase, attempts) =>
      Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    exports.defaultDelayDecider = defaultDelayDecider;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js
var require_retryDecider2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultRetryDecider = void 0;
    var service_error_classification_1 = require_dist_cjs36();
    var defaultRetryDecider = (error) => {
      if (!error) {
        return false;
      }
      return (
        (0, service_error_classification_1.isRetryableByTrait)(error) ||
        (0, service_error_classification_1.isClockSkewError)(error) ||
        (0, service_error_classification_1.isThrottlingError)(error) ||
        (0, service_error_classification_1.isTransientError)(error)
      );
    };
    exports.defaultRetryDecider = defaultRetryDecider;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.StandardRetryStrategy = void 0;
    var protocol_http_1 = require_dist_cjs30();
    var service_error_classification_1 = require_dist_cjs36();
    var uuid_1 = require_dist();
    var config_1 = require_config4();
    var constants_1 = require_constants8();
    var defaultRetryQuota_1 = require_defaultRetryQuota2();
    var delayDecider_1 = require_delayDecider2();
    var retryDecider_1 = require_retryDecider2();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.retryDecider =
          (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0
            ? _a
            : retryDecider_1.defaultRetryDecider;
        this.delayDecider =
          (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0
            ? _b
            : delayDecider_1.defaultDelayDecider;
        this.retryQuota =
          (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0
            ? _c
            : (0, defaultRetryQuota_1.getDefaultRetryQuota)(constants_1.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = config_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[constants_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[constants_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options === null || options === void 0 ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options === null || options === void 0 ? void 0 : options.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = asSdkError(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delay = this.delayDecider(
                (0, service_error_classification_1.isThrottlingError)(err)
                  ? constants_1.THROTTLING_RETRY_DELAY_BASE
                  : constants_1.DEFAULT_RETRY_DELAY_BASE,
                attempts
              );
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    exports.StandardRetryStrategy = StandardRetryStrategy;
    var asSdkError = (error) => {
      if (error instanceof Error) return error;
      if (error instanceof Object) return Object.assign(new Error(), error);
      if (typeof error === 'string') return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    };
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config4();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter2();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy2();
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options !== null && options !== void 0 ? options : {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter =
          rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          },
        });
      }
    };
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js
var require_configurations6 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS =
      exports.CONFIG_RETRY_MODE =
      exports.ENV_RETRY_MODE =
      exports.resolveRetryConfig =
      exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS =
      exports.CONFIG_MAX_ATTEMPTS =
      exports.ENV_MAX_ATTEMPTS =
        void 0;
    var util_middleware_1 = require_dist_cjs6();
    var AdaptiveRetryStrategy_1 = require_AdaptiveRetryStrategy2();
    var config_1 = require_config4();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy2();
    exports.ENV_MAX_ATTEMPTS = 'AWS_MAX_ATTEMPTS';
    exports.CONFIG_MAX_ATTEMPTS = 'max_attempts';
    exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => {
        const value = env2[exports.ENV_MAX_ATTEMPTS];
        if (!value) return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${exports.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[exports.CONFIG_MAX_ATTEMPTS];
        if (!value) return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${exports.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: config_1.DEFAULT_MAX_ATTEMPTS,
    };
    var resolveRetryConfig = (input) => {
      var _a;
      const maxAttempts = (0, util_middleware_1.normalizeProvider)(
        (_a = input.maxAttempts) !== null && _a !== void 0 ? _a : config_1.DEFAULT_MAX_ATTEMPTS
      );
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (input.retryStrategy) {
            return input.retryStrategy;
          }
          const retryMode = await (0, util_middleware_1.normalizeProvider)(input.retryMode)();
          if (retryMode === config_1.RETRY_MODES.ADAPTIVE) {
            return new AdaptiveRetryStrategy_1.AdaptiveRetryStrategy(maxAttempts);
          }
          return new StandardRetryStrategy_1.StandardRetryStrategy(maxAttempts);
        },
      };
    };
    exports.resolveRetryConfig = resolveRetryConfig;
    exports.ENV_RETRY_MODE = 'AWS_RETRY_MODE';
    exports.CONFIG_RETRY_MODE = 'retry_mode';
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[exports.ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[exports.CONFIG_RETRY_MODE],
      default: config_1.DEFAULT_RETRY_MODE,
    };
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js
var require_omitRetryHeadersMiddleware2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getOmitRetryHeadersPlugin =
      exports.omitRetryHeadersMiddlewareOptions =
      exports.omitRetryHeadersMiddleware =
        void 0;
    var protocol_http_1 = require_dist_cjs30();
    var constants_1 = require_constants8();
    var omitRetryHeadersMiddleware = () => (next) => async (args) => {
      const { request } = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        delete request.headers[constants_1.INVOCATION_ID_HEADER];
        delete request.headers[constants_1.REQUEST_HEADER];
      }
      return next(args);
    };
    exports.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
    exports.omitRetryHeadersMiddlewareOptions = {
      name: 'omitRetryHeadersMiddleware',
      tags: ['RETRY', 'HEADERS', 'OMIT_RETRY_HEADERS'],
      relation: 'before',
      toMiddleware: 'awsAuthMiddleware',
      override: true,
    };
    var getOmitRetryHeadersPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.omitRetryHeadersMiddleware)(), exports.omitRetryHeadersMiddlewareOptions);
      },
    });
    exports.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js
var require_retryMiddleware2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRetryPlugin = exports.retryMiddlewareOptions = exports.retryMiddleware = void 0;
    var retryMiddleware = (options) => (next, context) => async (args) => {
      const retryStrategy = await options.retryStrategy();
      if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)
        context.userAgent = [...(context.userAgent || []), ['cfg/retry-mode', retryStrategy.mode]];
      return retryStrategy.retry(next, args);
    };
    exports.retryMiddleware = retryMiddleware;
    exports.retryMiddlewareOptions = {
      name: 'retryMiddleware',
      tags: ['RETRY'],
      step: 'finalizeRequest',
      priority: 'high',
      override: true,
    };
    var getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.retryMiddleware)(options), exports.retryMiddlewareOptions);
      },
    });
    exports.getRetryPlugin = getRetryPlugin;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/types.js
var require_types2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_AdaptiveRetryStrategy2(), exports);
    tslib_1.__exportStar(require_DefaultRateLimiter2(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy2(), exports);
    tslib_1.__exportStar(require_config4(), exports);
    tslib_1.__exportStar(require_configurations6(), exports);
    tslib_1.__exportStar(require_delayDecider2(), exports);
    tslib_1.__exportStar(require_omitRetryHeadersMiddleware2(), exports);
    tslib_1.__exportStar(require_retryDecider2(), exports);
    tslib_1.__exportStar(require_retryMiddleware2(), exports);
    tslib_1.__exportStar(require_types2(), exports);
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/tslib/tslib.js
var require_tslib10 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/tslib/tslib.js'(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function (factory) {
      var root =
        typeof global === 'object' ? global : typeof self === 'object' ? self : typeof this === 'object' ? this : {};
      if (typeof define === 'function' && define.amd) {
        define('tslib', ['exports'], function (exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === 'object' && typeof module2.exports === 'object') {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === 'function') {
            Object.defineProperty(exports2, '__esModule', { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function (id, v) {
          return (exports2[id] = previous ? previous(id, v) : v);
        };
      }
    })(function (exporter) {
      var extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      __extends = function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
      __assign =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function (decorators, target, key, desc) {
        var c = arguments.length,
          r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
          d;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function (thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g;
        return (
          (g = { next: verb(0), throw: verb(1), return: verb(2) }),
          typeof Symbol === 'function' &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError('Generator is already executing.');
          while (_)
            try {
              if (
                ((f = 1),
                y &&
                  (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function (m, o) {
        for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
      };
      __createBinding = Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          };
      __values = function (o) {
        var s = typeof Symbol === 'function' && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === 'number')
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            },
          };
        throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      };
      __read = function (o, n) {
        var m = typeof Symbol === 'function' && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i['return'])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
        return r;
      };
      __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function (v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      };
      __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = {}),
          verb('next'),
          verb('throw'),
          verb('return'),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        function verb(n) {
          if (g[n])
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume('next', value);
        }
        function reject(value) {
          resume('throw', value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function (o) {
        var i, p;
        return (
          (i = {}),
          verb('next'),
          verb('throw', function (e) {
            throw e;
          }),
          verb('return'),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p) ? { value: __await(o[n](v)), done: n === 'return' } : f ? f(v) : v;
              }
            : f;
        }
      };
      __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, 'raw', { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          };
      __importStar = function (mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      __importDefault = function (mod2) {
        return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
      };
      __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot read private member from an object whose class did not declare it');
        return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot write private member to an object whose class did not declare it');
        return kind === 'a' ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== 'object' && typeof receiver !== 'function'))
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === 'function' ? receiver === state : state.has(receiver);
      };
      exporter('__extends', __extends);
      exporter('__assign', __assign);
      exporter('__rest', __rest);
      exporter('__decorate', __decorate);
      exporter('__param', __param);
      exporter('__metadata', __metadata);
      exporter('__awaiter', __awaiter);
      exporter('__generator', __generator);
      exporter('__exportStar', __exportStar);
      exporter('__createBinding', __createBinding);
      exporter('__values', __values);
      exporter('__read', __read);
      exporter('__spread', __spread);
      exporter('__spreadArrays', __spreadArrays);
      exporter('__spreadArray', __spreadArray);
      exporter('__await', __await);
      exporter('__asyncGenerator', __asyncGenerator);
      exporter('__asyncDelegator', __asyncDelegator);
      exporter('__asyncValues', __asyncValues);
      exporter('__makeTemplateObject', __makeTemplateObject);
      exporter('__importStar', __importStar);
      exporter('__importDefault', __importDefault);
      exporter('__classPrivateFieldGet', __classPrivateFieldGet);
      exporter('__classPrivateFieldSet', __classPrivateFieldSet);
      exporter('__classPrivateFieldIn', __classPrivateFieldIn);
    });
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js
var require_ProviderError3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ProviderError = void 0;
    var ProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = 'ProviderError';
        Object.setPrototypeOf(this, ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports.ProviderError = ProviderError;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError3();
    var CredentialsProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = 'CredentialsProviderError';
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
      }
    };
    exports.CredentialsProviderError = CredentialsProviderError;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js
var require_chain3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.chain = void 0;
    var ProviderError_1 = require_ProviderError3();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(new ProviderError_1.ProviderError('No providers in chain'));
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports.chain = chain;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js
var require_fromStatic3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports.fromStatic = fromStatic;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js
var require_memoize3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports.memoize = memoize;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/property-provider/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/property-provider/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib10();
    tslib_1.__exportStar(require_CredentialsProviderError3(), exports);
    tslib_1.__exportStar(require_ProviderError3(), exports);
    tslib_1.__exportStar(require_chain3(), exports);
    tslib_1.__exportStar(require_fromStatic3(), exports);
    tslib_1.__exportStar(require_memoize3(), exports);
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toHex = exports.fromHex = void 0;
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error('Hex encoded strings must have an even number length');
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    exports.fromHex = fromHex;
    function toHex(bytes) {
      let out = '';
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    exports.toHex = toHex;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js
var require_constants9 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.MAX_PRESIGNED_TTL =
      exports.KEY_TYPE_IDENTIFIER =
      exports.MAX_CACHE_SIZE =
      exports.UNSIGNED_PAYLOAD =
      exports.EVENT_ALGORITHM_IDENTIFIER =
      exports.ALGORITHM_IDENTIFIER_V4A =
      exports.ALGORITHM_IDENTIFIER =
      exports.UNSIGNABLE_PATTERNS =
      exports.SEC_HEADER_PATTERN =
      exports.PROXY_HEADER_PATTERN =
      exports.ALWAYS_UNSIGNABLE_HEADERS =
      exports.HOST_HEADER =
      exports.TOKEN_HEADER =
      exports.SHA256_HEADER =
      exports.SIGNATURE_HEADER =
      exports.GENERATED_HEADERS =
      exports.DATE_HEADER =
      exports.AMZ_DATE_HEADER =
      exports.AUTH_HEADER =
      exports.REGION_SET_PARAM =
      exports.TOKEN_QUERY_PARAM =
      exports.SIGNATURE_QUERY_PARAM =
      exports.EXPIRES_QUERY_PARAM =
      exports.SIGNED_HEADERS_QUERY_PARAM =
      exports.AMZ_DATE_QUERY_PARAM =
      exports.CREDENTIAL_QUERY_PARAM =
      exports.ALGORITHM_QUERY_PARAM =
        void 0;
    exports.ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm';
    exports.CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential';
    exports.AMZ_DATE_QUERY_PARAM = 'X-Amz-Date';
    exports.SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders';
    exports.EXPIRES_QUERY_PARAM = 'X-Amz-Expires';
    exports.SIGNATURE_QUERY_PARAM = 'X-Amz-Signature';
    exports.TOKEN_QUERY_PARAM = 'X-Amz-Security-Token';
    exports.REGION_SET_PARAM = 'X-Amz-Region-Set';
    exports.AUTH_HEADER = 'authorization';
    exports.AMZ_DATE_HEADER = exports.AMZ_DATE_QUERY_PARAM.toLowerCase();
    exports.DATE_HEADER = 'date';
    exports.GENERATED_HEADERS = [exports.AUTH_HEADER, exports.AMZ_DATE_HEADER, exports.DATE_HEADER];
    exports.SIGNATURE_HEADER = exports.SIGNATURE_QUERY_PARAM.toLowerCase();
    exports.SHA256_HEADER = 'x-amz-content-sha256';
    exports.TOKEN_HEADER = exports.TOKEN_QUERY_PARAM.toLowerCase();
    exports.HOST_HEADER = 'host';
    exports.ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      'cache-control': true,
      connection: true,
      expect: true,
      from: true,
      'keep-alive': true,
      'max-forwards': true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      'transfer-encoding': true,
      upgrade: true,
      'user-agent': true,
      'x-amzn-trace-id': true,
    };
    exports.PROXY_HEADER_PATTERN = /^proxy-/;
    exports.SEC_HEADER_PATTERN = /^sec-/;
    exports.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    exports.ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256';
    exports.ALGORITHM_IDENTIFIER_V4A = 'AWS4-ECDSA-P256-SHA256';
    exports.EVENT_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256-PAYLOAD';
    exports.UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD';
    exports.MAX_CACHE_SIZE = 50;
    exports.KEY_TYPE_IDENTIFIER = 'aws4_request';
    exports.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js
var require_credentialDerivation3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.clearCredentialCache = exports.getSigningKey = exports.createScope = void 0;
    var util_hex_encoding_1 = require_dist_cjs39();
    var constants_1 = require_constants9();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = (shortDate, region, service) =>
      `${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;
    exports.createScope = createScope;
    var getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${(0, util_hex_encoding_1.toHex)(credsHash)}:${
        credentials.sessionToken
      }`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, constants_1.KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return (signingKeyCache[cacheKey] = key);
    };
    exports.getSigningKey = getSigningKey;
    var clearCredentialCache = () => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    };
    exports.clearCredentialCache = clearCredentialCache;
    var hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update(data);
      return hash.digest();
    };
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js
var require_getCanonicalHeaders3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCanonicalHeaders = void 0;
    var constants_1 = require_constants9();
    var getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (
          canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS ||
          (unsignableHeaders === null || unsignableHeaders === void 0
            ? void 0
            : unsignableHeaders.has(canonicalHeaderName)) ||
          constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||
          constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)
        ) {
          if (!signableHeaders || (signableHeaders && !signableHeaders.has(canonicalHeaderName))) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, ' ');
      }
      return canonical;
    };
    exports.getCanonicalHeaders = getCanonicalHeaders;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js
var require_escape_uri3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.escapeUri = void 0;
    var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports.escapeUri = escapeUri;
    var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js
var require_escape_uri_path3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri3();
    var escapeUriPath = (uri) => uri.split('/').map(escape_uri_1.escapeUri).join('/');
    exports.escapeUriPath = escapeUriPath;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib10();
    tslib_1.__exportStar(require_escape_uri3(), exports);
    tslib_1.__exportStar(require_escape_uri_path3(), exports);
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js
var require_getCanonicalQuery3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCanonicalQuery = void 0;
    var util_uri_escape_1 = require_dist_cjs40();
    var constants_1 = require_constants9();
    var getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === 'string') {
          serialized[key] = `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value
            .slice(0)
            .sort()
            .reduce(
              (encoded, value2) =>
                encoded.concat([
                  `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value2)}`,
                ]),
              []
            )
            .join('&');
        }
      }
      return keys
        .map((key) => serialized[key])
        .filter((serialized2) => serialized2)
        .join('&');
    };
    exports.getCanonicalQuery = getCanonicalQuery;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js
var require_getPayloadHash3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getPayloadHash = void 0;
    var is_array_buffer_1 = require_dist_cjs21();
    var util_hex_encoding_1 = require_dist_cjs39();
    var constants_1 = require_constants9();
    var getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';
      } else if (typeof body === 'string' || ArrayBuffer.isView(body) || (0, is_array_buffer_1.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update(body);
        return (0, util_hex_encoding_1.toHex)(await hashCtor.digest());
      }
      return constants_1.UNSIGNED_PAYLOAD;
    };
    exports.getPayloadHash = getPayloadHash;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js
var require_headerUtil3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.deleteHeader = exports.getHeaderValue = exports.hasHeader = void 0;
    var hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports.hasHeader = hasHeader;
    var getHeaderValue = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return headers[headerName];
        }
      }
      return void 0;
    };
    exports.getHeaderValue = getHeaderValue;
    var deleteHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          delete headers[headerName];
        }
      }
    };
    exports.deleteHeader = deleteHeader;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js
var require_cloneRequest3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.cloneQuery = exports.cloneRequest = void 0;
    var cloneRequest = ({ headers, query, ...rest }) => ({
      ...rest,
      headers: { ...headers },
      query: query ? (0, exports.cloneQuery)(query) : void 0,
    });
    exports.cloneRequest = cloneRequest;
    var cloneQuery = (query) =>
      Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param,
        };
      }, {});
    exports.cloneQuery = cloneQuery;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js
var require_moveHeadersToQuery3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.moveHeadersToQuery = void 0;
    var cloneRequest_1 = require_cloneRequest3();
    var moveHeadersToQuery = (request, options = {}) => {
      var _a;
      const { headers, query = {} } =
        typeof request.clone === 'function' ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (
          lname.slice(0, 6) === 'x-amz-' &&
          !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))
        ) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query,
      };
    };
    exports.moveHeadersToQuery = moveHeadersToQuery;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js
var require_prepareRequest3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.prepareRequest = void 0;
    var cloneRequest_1 = require_cloneRequest3();
    var constants_1 = require_constants9();
    var prepareRequest = (request) => {
      request = typeof request.clone === 'function' ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const headerName of Object.keys(request.headers)) {
        if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    };
    exports.prepareRequest = prepareRequest;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js
var require_utilDate3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toDate = exports.iso8601 = void 0;
    var iso8601 = (time) =>
      (0, exports.toDate)(time)
        .toISOString()
        .replace(/\.\d{3}Z$/, 'Z');
    exports.iso8601 = iso8601;
    var toDate = (time) => {
      if (typeof time === 'number') {
        return new Date(time * 1e3);
      }
      if (typeof time === 'string') {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
    exports.toDate = toDate;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js
var require_SignatureV43 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SignatureV4 = void 0;
    var util_hex_encoding_1 = require_dist_cjs39();
    var util_middleware_1 = require_dist_cjs6();
    var constants_1 = require_constants9();
    var credentialDerivation_1 = require_credentialDerivation3();
    var getCanonicalHeaders_1 = require_getCanonicalHeaders3();
    var getCanonicalQuery_1 = require_getCanonicalQuery3();
    var getPayloadHash_1 = require_getPayloadHash3();
    var headerUtil_1 = require_headerUtil3();
    var moveHeadersToQuery_1 = require_moveHeadersToQuery3();
    var prepareRequest_1 = require_prepareRequest3();
    var utilDate_1 = require_utilDate3();
    var SignatureV4 = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true;
        this.regionProvider = (0, util_middleware_1.normalizeProvider)(region);
        this.credentialProvider = (0, util_middleware_1.normalizeProvider)(credentials);
      }
      async presign(originalRequest, options = {}) {
        const {
          signingDate = new Date(),
          expiresIn = 3600,
          unsignableHeaders,
          unhoistableHeaders,
          signableHeaders,
          signingRegion,
          signingService,
        } = options;
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
          return Promise.reject(
            'Signature version 4 presigned URLs must have an expiration date less than one week in the future'
          );
        }
        const scope = (0, credentialDerivation_1.createScope)(
          shortDate,
          region,
          signingService !== null && signingService !== void 0 ? signingService : this.service
        );
        const request = (0, moveHeadersToQuery_1.moveHeadersToQuery)(
          (0, prepareRequest_1.prepareRequest)(originalRequest),
          { unhoistableHeaders }
        );
        if (credentials.sessionToken) {
          request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;
        request.query[constants_1.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(
          request,
          unsignableHeaders,
          signableHeaders
        );
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(
          longDate,
          scope,
          this.getSigningKey(credentials, region, shortDate, signingService),
          this.createCanonicalRequest(
            request,
            canonicalHeaders,
            await (0, getPayloadHash_1.getPayloadHash)(originalRequest, this.sha256)
          )
        );
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === 'string') {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent(
        { headers, payload },
        { signingDate = new Date(), priorSignature, signingRegion, signingService }
      ) {
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(
          shortDate,
          region,
          signingService !== null && signingService !== void 0 ? signingService : this.service
        );
        const hashedPayload = await (0, getPayloadHash_1.getPayloadHash)({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, util_hex_encoding_1.toHex)(await hash.digest());
        const stringToSign = [
          constants_1.EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload,
        ].join('\n');
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update(stringToSign);
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      async signRequest(
        requestToSign,
        { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}
      ) {
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const request = (0, prepareRequest_1.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(
          shortDate,
          region,
          signingService !== null && signingService !== void 0 ? signingService : this.service
        );
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0, getPayloadHash_1.getPayloadHash)(request, this.sha256);
        if (!(0, headerUtil_1.hasHeader)(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(
          request,
          unsignableHeaders,
          signableHeaders
        );
        const signature = await this.getSignature(
          longDate,
          scope,
          this.getSigningKey(credentials, region, shortDate, signingService),
          this.createCanonicalRequest(request, canonicalHeaders, payloadHash)
        );
        request.headers[constants_1.AUTH_HEADER] = `${constants_1.ALGORITHM_IDENTIFIER} Credential=${
          credentials.accessKeyId
        }/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, getCanonicalQuery_1.getCanonicalQuery)(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join('\n')}

${sortedHeaders.join(';')}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update(canonicalRequest);
        const hashedRequest = await hash.digest();
        return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, util_hex_encoding_1.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split('/')) {
            if ((pathSegment === null || pathSegment === void 0 ? void 0 : pathSegment.length) === 0) continue;
            if (pathSegment === '.') continue;
            if (pathSegment === '..') {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${
            (path === null || path === void 0 ? void 0 : path.startsWith('/')) ? '/' : ''
          }${normalizedPathSegments.join('/')}${
            normalizedPathSegments.length > 0 && (path === null || path === void 0 ? void 0 : path.endsWith('/'))
              ? '/'
              : ''
          }`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, '/');
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update(stringToSign);
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return (0, credentialDerivation_1.getSigningKey)(
          this.sha256,
          credentials,
          shortDate,
          region,
          service || this.service
        );
      }
    };
    exports.SignatureV4 = SignatureV4;
    var formatDate = (now) => {
      const longDate = (0, utilDate_1.iso8601)(now).replace(/[\-:]/g, '');
      return {
        longDate,
        shortDate: longDate.slice(0, 8),
      };
    };
    var getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(';');
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/signature-v4/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.prepareRequest =
      exports.moveHeadersToQuery =
      exports.getPayloadHash =
      exports.getCanonicalQuery =
      exports.getCanonicalHeaders =
        void 0;
    var tslib_1 = require_tslib10();
    tslib_1.__exportStar(require_SignatureV43(), exports);
    var getCanonicalHeaders_1 = require_getCanonicalHeaders3();
    Object.defineProperty(exports, 'getCanonicalHeaders', {
      enumerable: true,
      get: function () {
        return getCanonicalHeaders_1.getCanonicalHeaders;
      },
    });
    var getCanonicalQuery_1 = require_getCanonicalQuery3();
    Object.defineProperty(exports, 'getCanonicalQuery', {
      enumerable: true,
      get: function () {
        return getCanonicalQuery_1.getCanonicalQuery;
      },
    });
    var getPayloadHash_1 = require_getPayloadHash3();
    Object.defineProperty(exports, 'getPayloadHash', {
      enumerable: true,
      get: function () {
        return getPayloadHash_1.getPayloadHash;
      },
    });
    var moveHeadersToQuery_1 = require_moveHeadersToQuery3();
    Object.defineProperty(exports, 'moveHeadersToQuery', {
      enumerable: true,
      get: function () {
        return moveHeadersToQuery_1.moveHeadersToQuery;
      },
    });
    var prepareRequest_1 = require_prepareRequest3();
    Object.defineProperty(exports, 'prepareRequest', {
      enumerable: true,
      get: function () {
        return prepareRequest_1.prepareRequest;
      },
    });
    tslib_1.__exportStar(require_credentialDerivation3(), exports);
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js
var require_configurations7 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveSigV4AuthConfig = exports.resolveAwsAuthConfig = void 0;
    var property_provider_1 = require_dist_cjs38();
    var signature_v4_1 = require_dist_cjs41();
    var CREDENTIAL_EXPIRE_WINDOW = 3e5;
    var resolveAwsAuthConfig = (input) => {
      const normalizedCreds = input.credentials
        ? normalizeCredentialProvider(input.credentials)
        : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = normalizeProvider(input.signer);
      } else {
        signer = () =>
          normalizeProvider(input.region)()
            .then(async (region) => [
              (await input.regionInfoProvider(region, {
                useFipsEndpoint: await input.useFipsEndpoint(),
                useDualstackEndpoint: await input.useDualstackEndpoint(),
              })) || {},
              region,
            ])
            .then(([regionInfo, region]) => {
              const { signingRegion, signingService } = regionInfo;
              input.signingRegion = input.signingRegion || signingRegion || region;
              input.signingName = input.signingName || signingService || input.serviceId;
              const params = {
                ...input,
                credentials: normalizedCreds,
                region: input.signingRegion,
                service: input.signingName,
                sha256,
                uriEscapePath: signingEscapePath,
              };
              const signerConstructor = input.signerConstructor || signature_v4_1.SignatureV4;
              return new signerConstructor(params);
            });
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer,
      };
    };
    exports.resolveAwsAuthConfig = resolveAwsAuthConfig;
    var resolveSigV4AuthConfig = (input) => {
      const normalizedCreds = input.credentials
        ? normalizeCredentialProvider(input.credentials)
        : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = normalizeProvider(input.signer);
      } else {
        signer = normalizeProvider(
          new signature_v4_1.SignatureV4({
            credentials: normalizedCreds,
            region: input.region,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath,
          })
        );
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer,
      };
    };
    exports.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
    var normalizeProvider = (input) => {
      if (typeof input === 'object') {
        const promisified = Promise.resolve(input);
        return () => promisified;
      }
      return input;
    };
    var normalizeCredentialProvider = (credentials) => {
      if (typeof credentials === 'function') {
        return (0, property_provider_1.memoize)(
          credentials,
          (credentials2) =>
            credentials2.expiration !== void 0 &&
            credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW,
          (credentials2) => credentials2.expiration !== void 0
        );
      }
      return normalizeProvider(credentials);
    };
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler5 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest5 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HttpRequest = void 0;
    var HttpRequest = class {
      constructor(options) {
        this.method = options.method || 'GET';
        this.hostname = options.hostname || 'localhost';
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol
          ? options.protocol.slice(-1) !== ':'
            ? `${options.protocol}:`
            : options.protocol
          : 'https:';
        this.path = options.path ? (options.path.charAt(0) !== '/' ? `/${options.path}` : options.path) : '/';
      }
      static isInstance(request) {
        if (!request) return false;
        const req = request;
        return (
          'method' in req &&
          'protocol' in req &&
          'hostname' in req &&
          'path' in req &&
          typeof req['query'] === 'object' &&
          typeof req['headers'] === 'object'
        );
      }
      clone() {
        const cloned = new HttpRequest({
          ...this,
          headers: { ...this.headers },
        });
        if (cloned.query) cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param,
        };
      }, {});
    }
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse5 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response) return false;
        const resp = response;
        return typeof resp.statusCode === 'number' && typeof resp.headers === 'object';
      }
    };
    exports.HttpResponse = HttpResponse;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname5 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports.isValidHostname = isValidHostname;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/index.js
var require_dist_cjs42 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/protocol-http/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib10();
    tslib_1.__exportStar(require_httpHandler5(), exports);
    tslib_1.__exportStar(require_httpRequest5(), exports);
    tslib_1.__exportStar(require_httpResponse5(), exports);
    tslib_1.__exportStar(require_isValidHostname5(), exports);
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js
var require_getSkewCorrectedDate3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSkewCorrectedDate = void 0;
    var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
    exports.getSkewCorrectedDate = getSkewCorrectedDate;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js
var require_isClockSkewed3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isClockSkewed = void 0;
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate3();
    var isClockSkewed = (clockTime, systemClockOffset) =>
      Math.abs((0, getSkewCorrectedDate_1.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 3e5;
    exports.isClockSkewed = isClockSkewed;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js
var require_getUpdatedSystemClockOffset3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getUpdatedSystemClockOffset = void 0;
    var isClockSkewed_1 = require_isClockSkewed3();
    var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if ((0, isClockSkewed_1.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
    exports.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js
var require_middleware3 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSigV4AuthPlugin =
      exports.getAwsAuthPlugin =
      exports.awsAuthMiddlewareOptions =
      exports.awsAuthMiddleware =
        void 0;
    var protocol_http_1 = require_dist_cjs42();
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate3();
    var getUpdatedSystemClockOffset_1 = require_getUpdatedSystemClockOffset3();
    var awsAuthMiddleware = (options) => (next, context) =>
      async function (args) {
        if (!protocol_http_1.HttpRequest.isInstance(args.request)) return next(args);
        const signer = await options.signer();
        const output = await next({
          ...args,
          request: await signer.sign(args.request, {
            signingDate: (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(options.systemClockOffset),
            signingRegion: context['signing_region'],
            signingService: context['signing_service'],
          }),
        }).catch((error) => {
          var _a;
          const serverTime = (_a = error.ServerTime) !== null && _a !== void 0 ? _a : getDateHeader(error.$response);
          if (serverTime) {
            options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(
              serverTime,
              options.systemClockOffset
            );
          }
          throw error;
        });
        const dateHeader = getDateHeader(output.response);
        if (dateHeader) {
          options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(
            dateHeader,
            options.systemClockOffset
          );
        }
        return output;
      };
    exports.awsAuthMiddleware = awsAuthMiddleware;
    var getDateHeader = (response) => {
      var _a, _b, _c;
      return protocol_http_1.HttpResponse.isInstance(response)
        ? (_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0
          ? _b
          : (_c = response.headers) === null || _c === void 0
          ? void 0
          : _c.Date
        : void 0;
    };
    exports.awsAuthMiddlewareOptions = {
      name: 'awsAuthMiddleware',
      tags: ['SIGNATURE', 'AWSAUTH'],
      relation: 'after',
      toMiddleware: 'retryMiddleware',
      override: true,
    };
    var getAwsAuthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.awsAuthMiddleware)(options), exports.awsAuthMiddlewareOptions);
      },
    });
    exports.getAwsAuthPlugin = getAwsAuthPlugin;
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js
var require_dist_cjs43 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib10();
    tslib_1.__exportStar(require_configurations7(), exports);
    tslib_1.__exportStar(require_middleware3(), exports);
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js
var require_dist_cjs44 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveStsAuthConfig = void 0;
    var middleware_signing_1 = require_dist_cjs43();
    var resolveStsAuthConfig = (input, { stsClientCtor }) =>
      (0, middleware_signing_1.resolveAwsAuthConfig)({
        ...input,
        stsClientCtor,
      });
    exports.resolveStsAuthConfig = resolveStsAuthConfig;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js
var require_configurations8 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return {
        ...input,
        customUserAgent: typeof input.customUserAgent === 'string' ? [[input.customUserAgent]] : input.customUserAgent,
      };
    }
    exports.resolveUserAgentConfig = resolveUserAgentConfig;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js
var require_constants10 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UA_ESCAPE_REGEX = exports.SPACE = exports.X_AMZ_USER_AGENT = exports.USER_AGENT = void 0;
    exports.USER_AGENT = 'user-agent';
    exports.X_AMZ_USER_AGENT = 'x-amz-user-agent';
    exports.SPACE = ' ';
    exports.UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js
var require_user_agent_middleware2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getUserAgentPlugin = exports.getUserAgentMiddlewareOptions = exports.userAgentMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs30();
    var constants_1 = require_constants10();
    var userAgentMiddleware = (options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request)) return next(args);
      const { headers } = request;
      const userAgent =
        ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0
          ? void 0
          : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent =
        ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0
          ? void 0
          : _b.map(escapeUserAgent)) || [];
      const sdkUserAgentValue = [...defaultUserAgent, ...userAgent, ...customUserAgent].join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith('aws-sdk-')),
        ...customUserAgent,
      ].join(constants_1.SPACE);
      if (options.runtime !== 'browser') {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT]
            ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}`
            : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request,
      });
    };
    exports.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = ([name, version]) => {
      const prefixSeparatorIndex = name.indexOf('/');
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === 'api') {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version]
        .filter((item) => item && item.length > 0)
        .map((item) => (item === null || item === void 0 ? void 0 : item.replace(constants_1.UA_ESCAPE_REGEX, '_')))
        .join('/');
    };
    exports.getUserAgentMiddlewareOptions = {
      name: 'getUserAgentMiddleware',
      step: 'build',
      priority: 'low',
      tags: ['SET_USER_AGENT', 'USER_AGENT'],
      override: true,
    };
    var getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.userAgentMiddleware)(config), exports.getUserAgentMiddlewareOptions);
      },
    });
    exports.getUserAgentPlugin = getUserAgentPlugin;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs45 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_configurations8(), exports);
    tslib_1.__exportStar(require_user_agent_middleware2(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/package.json
var require_package2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/package.json'(exports, module2) {
    module2.exports = {
      name: '@aws-sdk/client-sts',
      description: 'AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native',
      version: '3.141.0',
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        'build:cjs': 'tsc -p tsconfig.cjs.json',
        'build:docs': 'typedoc',
        'build:es': 'tsc -p tsconfig.es.json',
        'build:types': 'tsc -p tsconfig.types.json',
        'build:types:downlevel': 'downlevel-dts dist-types dist-types/ts3.4',
        clean: 'rimraf ./dist-* && rimraf *.tsbuildinfo',
      },
      main: './dist-cjs/index.js',
      types: './dist-types/index.d.ts',
      module: './dist-es/index.js',
      sideEffects: false,
      dependencies: {
        '@aws-crypto/sha256-browser': '2.0.0',
        '@aws-crypto/sha256-js': '2.0.0',
        '@aws-sdk/config-resolver': '3.130.0',
        '@aws-sdk/credential-provider-node': '3.141.0',
        '@aws-sdk/fetch-http-handler': '3.131.0',
        '@aws-sdk/hash-node': '3.127.0',
        '@aws-sdk/invalid-dependency': '3.127.0',
        '@aws-sdk/middleware-content-length': '3.127.0',
        '@aws-sdk/middleware-host-header': '3.127.0',
        '@aws-sdk/middleware-logger': '3.127.0',
        '@aws-sdk/middleware-recursion-detection': '3.127.0',
        '@aws-sdk/middleware-retry': '3.127.0',
        '@aws-sdk/middleware-sdk-sts': '3.130.0',
        '@aws-sdk/middleware-serde': '3.127.0',
        '@aws-sdk/middleware-signing': '3.130.0',
        '@aws-sdk/middleware-stack': '3.127.0',
        '@aws-sdk/middleware-user-agent': '3.127.0',
        '@aws-sdk/node-config-provider': '3.127.0',
        '@aws-sdk/node-http-handler': '3.127.0',
        '@aws-sdk/protocol-http': '3.127.0',
        '@aws-sdk/smithy-client': '3.137.0',
        '@aws-sdk/types': '3.127.0',
        '@aws-sdk/url-parser': '3.127.0',
        '@aws-sdk/util-base64-browser': '3.109.0',
        '@aws-sdk/util-base64-node': '3.55.0',
        '@aws-sdk/util-body-length-browser': '3.55.0',
        '@aws-sdk/util-body-length-node': '3.55.0',
        '@aws-sdk/util-defaults-mode-browser': '3.137.0',
        '@aws-sdk/util-defaults-mode-node': '3.137.0',
        '@aws-sdk/util-user-agent-browser': '3.127.0',
        '@aws-sdk/util-user-agent-node': '3.127.0',
        '@aws-sdk/util-utf8-browser': '3.109.0',
        '@aws-sdk/util-utf8-node': '3.109.0',
        entities: '2.2.0',
        'fast-xml-parser': '3.19.0',
        tslib: '^2.3.1',
      },
      devDependencies: {
        '@aws-sdk/service-client-documentation-generator': '3.58.0',
        '@tsconfig/recommended': '1.0.1',
        '@types/node': '^12.7.5',
        concurrently: '7.0.0',
        'downlevel-dts': '0.7.0',
        rimraf: '3.0.2',
        typedoc: '0.19.2',
        typescript: '~4.6.2',
      },
      engines: {
        node: '>=12.0.0',
      },
      typesVersions: {
        '<4.0': {
          'dist-types/*': ['dist-types/ts3.4/*'],
        },
      },
      files: ['dist-*'],
      author: {
        name: 'AWS SDK for JavaScript Team',
        url: 'https://aws.amazon.com/javascript/',
      },
      license: 'Apache-2.0',
      browser: {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.browser',
      },
      'react-native': {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.native',
      },
      homepage: 'https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts',
      repository: {
        type: 'git',
        url: 'https://github.com/aws/aws-sdk-js-v3.git',
        directory: 'clients/client-sts',
      },
    };
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js
var require_defaultStsRoleAssumers = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.decorateDefaultCredentialProvider =
      exports.getDefaultRoleAssumerWithWebIdentity =
      exports.getDefaultRoleAssumer =
        void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var ASSUME_ROLE_DEFAULT_REGION = 'us-east-1';
    var decorateDefaultRegion = (region) => {
      if (typeof region !== 'function') {
        return region === void 0 ? ASSUME_ROLE_DEFAULT_REGION : region;
      }
      return async () => {
        try {
          return await region();
        } catch (e) {
          return ASSUME_ROLE_DEFAULT_REGION;
        }
      };
    };
    var getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...(requestHandler ? { requestHandler } : {}),
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration,
        };
      };
    };
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...(requestHandler ? { requestHandler } : {}),
          });
        }
        const { Credentials } = await stsClient.send(
          new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params)
        );
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration,
        };
      };
    };
    exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) =>
      provider({
        roleAssumer: (0, exports.getDefaultRoleAssumer)(input, input.stsClientCtor),
        roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input, input.stsClientCtor),
        ...input,
      });
    exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js
var require_fromEnv = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromEnv = exports.ENV_EXPIRATION = exports.ENV_SESSION = exports.ENV_SECRET = exports.ENV_KEY = void 0;
    var property_provider_1 = require_dist_cjs26();
    exports.ENV_KEY = 'AWS_ACCESS_KEY_ID';
    exports.ENV_SECRET = 'AWS_SECRET_ACCESS_KEY';
    exports.ENV_SESSION = 'AWS_SESSION_TOKEN';
    exports.ENV_EXPIRATION = 'AWS_CREDENTIAL_EXPIRATION';
    var fromEnv = () => async () => {
      const accessKeyId = process.env[exports.ENV_KEY];
      const secretAccessKey = process.env[exports.ENV_SECRET];
      const sessionToken = process.env[exports.ENV_SESSION];
      const expiry = process.env[exports.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return {
          accessKeyId,
          secretAccessKey,
          ...(sessionToken && { sessionToken }),
          ...(expiry && { expiration: new Date(expiry) }),
        };
      }
      throw new property_provider_1.CredentialsProviderError('Unable to find environment variable credentials.');
    };
    exports.fromEnv = fromEnv;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs46 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_fromEnv(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getHomeDir = void 0;
    var os_1 = require('os');
    var path_1 = require('path');
    var getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME) return HOME;
      if (USERPROFILE) return USERPROFILE;
      if (HOMEPATH) return `${HOMEDRIVE}${HOMEPATH}`;
      return (0, os_1.homedir)();
    };
    exports.getHomeDir = getHomeDir;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js
var require_getProfileName = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getProfileName = exports.DEFAULT_PROFILE = exports.ENV_PROFILE = void 0;
    exports.ENV_PROFILE = 'AWS_PROFILE';
    exports.DEFAULT_PROFILE = 'default';
    var getProfileName = (init) => init.profile || process.env[exports.ENV_PROFILE] || exports.DEFAULT_PROFILE;
    exports.getProfileName = getProfileName;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSSOTokenFilepath = void 0;
    var crypto_1 = require('crypto');
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath = (ssoStartUrl) => {
      const hasher = (0, crypto_1.createHash)('sha1');
      const cacheName = hasher.update(ssoStartUrl).digest('hex');
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'sso', 'cache', `${cacheName}.json`);
    };
    exports.getSSOTokenFilepath = getSSOTokenFilepath;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSSOTokenFromFile = void 0;
    var fs_1 = require('fs');
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (ssoStartUrl) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(ssoStartUrl);
      const ssoTokenText = await readFile(ssoTokenFilepath, 'utf8');
      return JSON.parse(ssoTokenText);
    };
    exports.getSSOTokenFromFile = getSSOTokenFromFile;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js
var require_getConfigFilepath = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getConfigFilepath = exports.ENV_CONFIG_PATH = void 0;
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CONFIG_PATH = 'AWS_CONFIG_FILE';
    var getConfigFilepath = () =>
      process.env[exports.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'config');
    exports.getConfigFilepath = getConfigFilepath;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js
var require_getCredentialsFilepath = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCredentialsFilepath = exports.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CREDENTIALS_PATH = 'AWS_SHARED_CREDENTIALS_FILE';
    var getCredentialsFilepath = () =>
      process.env[exports.ENV_CREDENTIALS_PATH] ||
      (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'credentials');
    exports.getCredentialsFilepath = getCredentialsFilepath;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js
var require_getProfileData = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getProfileData = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var getProfileData = (data) =>
      Object.entries(data)
        .filter(([key]) => profileKeyRegex.test(key))
        .reduce((acc, [key, value]) => ({ ...acc, [profileKeyRegex.exec(key)[2]]: value }), {
          ...(data.default && { default: data.default }),
        });
    exports.getProfileData = getProfileData;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js
var require_parseIni = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseIni = void 0;
    var profileNameBlockList = ['__proto__', 'profile __proto__'];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === '[' && line[line.length - 1] === ']';
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf('=');
          const start = 0;
          const end = line.length - 1;
          const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim(),
            ];
            map[currentSection] = map[currentSection] || {};
            map[currentSection][name] = value;
          }
        }
      }
      return map;
    };
    exports.parseIni = parseIni;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.slurpFile = void 0;
    var fs_1 = require('fs');
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path) => {
      if (!filePromisesHash[path]) {
        filePromisesHash[path] = readFile(path, 'utf8');
      }
      return filePromisesHash[path];
    };
    exports.slurpFile = slurpFile;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js
var require_loadSharedConfigFiles = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath();
    var getProfileData_1 = require_getProfileData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const {
        filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(),
        configFilepath = (0, getConfigFilepath_1.getConfigFilepath)(),
      } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath)
          .then(parseIni_1.parseIni)
          .then(getProfileData_1.getProfileData)
          .catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath).then(parseIni_1.parseIni).catch(swallowError),
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1],
      };
    };
    exports.loadSharedConfigFiles = loadSharedConfigFiles;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js
var require_parseKnownFiles = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return {
        ...parsedFiles.configFile,
        ...parsedFiles.credentialsFile,
      };
    };
    exports.parseKnownFiles = parseKnownFiles;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js
var require_types3 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs47 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_getHomeDir(), exports);
    tslib_1.__exportStar(require_getProfileName(), exports);
    tslib_1.__exportStar(require_getSSOTokenFilepath(), exports);
    tslib_1.__exportStar(require_getSSOTokenFromFile(), exports);
    tslib_1.__exportStar(require_loadSharedConfigFiles(), exports);
    tslib_1.__exportStar(require_parseKnownFiles(), exports);
    tslib_1.__exportStar(require_types3(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js
var require_httpRequest6 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs26();
    var buffer_1 = require('buffer');
    var http_1 = require('http');
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, http_1.request)({
          method: 'GET',
          ...options,
          hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\[(.+)\]$/, '$1'),
        });
        req.on('error', (err) => {
          reject(
            Object.assign(new property_provider_1.ProviderError('Unable to connect to instance metadata service'), err)
          );
          req.destroy();
        });
        req.on('timeout', () => {
          reject(new property_provider_1.ProviderError('TimeoutError from instance metadata service'));
          req.destroy();
        });
        req.on('response', (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(
              Object.assign(
                new property_provider_1.ProviderError('Error response received from instance metadata service'),
                { statusCode }
              )
            );
            req.destroy();
          }
          const chunks = [];
          res.on('data', (chunk) => {
            chunks.push(chunk);
          });
          res.on('end', () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    exports.httpRequest = httpRequest;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js
var require_ImdsCredentials = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromImdsCredentials = exports.isImdsCredentials = void 0;
    var isImdsCredentials = (arg) =>
      Boolean(arg) &&
      typeof arg === 'object' &&
      typeof arg.AccessKeyId === 'string' &&
      typeof arg.SecretAccessKey === 'string' &&
      typeof arg.Token === 'string' &&
      typeof arg.Expiration === 'string';
    exports.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration),
    });
    exports.fromImdsCredentials = fromImdsCredentials;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js
var require_RemoteProviderInit = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.providerConfigFromInit = exports.DEFAULT_MAX_RETRIES = exports.DEFAULT_TIMEOUT = void 0;
    exports.DEFAULT_TIMEOUT = 1e3;
    exports.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = ({ maxRetries = exports.DEFAULT_MAX_RETRIES, timeout = exports.DEFAULT_TIMEOUT }) => ({
      maxRetries,
      timeout,
    });
    exports.providerConfigFromInit = providerConfigFromInit;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js
var require_retry = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.retry = void 0;
    var retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
    exports.retry = retry;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js
var require_fromContainerMetadata = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromContainerMetadata =
      exports.ENV_CMDS_AUTH_TOKEN =
      exports.ENV_CMDS_RELATIVE_URI =
      exports.ENV_CMDS_FULL_URI =
        void 0;
    var property_provider_1 = require_dist_cjs26();
    var url_1 = require('url');
    var httpRequest_1 = require_httpRequest6();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    exports.ENV_CMDS_FULL_URI = 'AWS_CONTAINER_CREDENTIALS_FULL_URI';
    exports.ENV_CMDS_RELATIVE_URI = 'AWS_CONTAINER_CREDENTIALS_RELATIVE_URI';
    exports.ENV_CMDS_AUTH_TOKEN = 'AWS_CONTAINER_AUTHORIZATION_TOKEN';
    var fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      return () =>
        (0, retry_1.retry)(async () => {
          const requestOptions = await getCmdsUri();
          const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
          if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
            throw new property_provider_1.CredentialsProviderError(
              'Invalid response received from instance metadata service.'
            );
          }
          return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
        }, maxRetries);
    };
    exports.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = async (timeout, options) => {
      if (process.env[exports.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[exports.ENV_CMDS_AUTH_TOKEN],
        };
      }
      const buffer = await (0, httpRequest_1.httpRequest)({
        ...options,
        timeout,
      });
      return buffer.toString();
    };
    var CMDS_IP = '169.254.170.2';
    var GREENGRASS_HOSTS = {
      localhost: true,
      '127.0.0.1': true,
    };
    var GREENGRASS_PROTOCOLS = {
      'http:': true,
      'https:': true,
    };
    var getCmdsUri = async () => {
      if (process.env[exports.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports.ENV_CMDS_RELATIVE_URI],
        };
      }
      if (process.env[exports.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(
            `${parsed.hostname} is not a valid container metadata service hostname`,
            false
          );
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(
            `${parsed.protocol} is not a valid container metadata service protocol`,
            false
          );
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0,
        };
      }
      throw new property_provider_1.CredentialsProviderError(
        `The container metadata credential provider cannot be used unless the ${exports.ENV_CMDS_RELATIVE_URI} or ${exports.ENV_CMDS_FULL_URI} environment variable is set`,
        false
      );
    };
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js
var require_fromEnv2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs26();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(
          e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`
        );
      }
    };
    exports.fromEnv = fromEnv;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js
var require_fromSharedConfigFiles = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs26();
    var shared_ini_file_loader_1 = require_dist_cjs47();
    var fromSharedConfigFiles =
      (configSelector, { preferredFile = 'config', ...init } = {}) =>
      async () => {
        const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
        const { configFile, credentialsFile } = await (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init);
        const profileFromCredentials = credentialsFile[profile] || {};
        const profileFromConfig = configFile[profile] || {};
        const mergedProfile =
          preferredFile === 'config'
            ? { ...profileFromCredentials, ...profileFromConfig }
            : { ...profileFromConfig, ...profileFromCredentials };
        try {
          const configValue = configSelector(mergedProfile);
          if (configValue === void 0) {
            throw new Error();
          }
          return configValue;
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(
            e.message ||
              `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`
          );
        }
      };
    exports.fromSharedConfigFiles = fromSharedConfigFiles;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js
var require_fromStatic4 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs26();
    var isFunction = (func) => typeof func === 'function';
    var fromStatic = (defaultValue) =>
      isFunction(defaultValue) ? async () => await defaultValue() : (0, property_provider_1.fromStatic)(defaultValue);
    exports.fromStatic = fromStatic;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js
var require_configLoader = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs26();
    var fromEnv_1 = require_fromEnv2();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles();
    var fromStatic_1 = require_fromStatic4();
    var loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) =>
      (0, property_provider_1.memoize)(
        (0, property_provider_1.chain)(
          (0, fromEnv_1.fromEnv)(environmentVariableSelector),
          (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(configFileSelector, configuration),
          (0, fromStatic_1.fromStatic)(defaultValue)
        )
      );
    exports.loadConfig = loadConfig;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js
var require_dist_cjs48 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_configLoader(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js
var require_dist_cjs49 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, '');
      if (querystring) {
        for (const pair of querystring.split('&')) {
          let [key, value = null] = pair.split('=');
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports.parseQueryString = parseQueryString;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/url-parser/dist-cjs/index.js
var require_dist_cjs50 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/url-parser/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs49();
    var parseUrl = (url) => {
      const { hostname, pathname, port, protocol, search } = new URL(url);
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query,
      };
    };
    exports.parseUrl = parseUrl;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js
var require_Endpoint2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Endpoint = void 0;
    var Endpoint;
    (function (Endpoint2) {
      Endpoint2['IPv4'] = 'http://169.254.169.254';
      Endpoint2['IPv6'] = 'http://[fd00:ec2::254]';
    })((Endpoint = exports.Endpoint || (exports.Endpoint = {})));
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js
var require_EndpointConfigOptions = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ENDPOINT_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_NAME = exports.ENV_ENDPOINT_NAME = void 0;
    exports.ENV_ENDPOINT_NAME = 'AWS_EC2_METADATA_SERVICE_ENDPOINT';
    exports.CONFIG_ENDPOINT_NAME = 'ec2_metadata_service_endpoint';
    exports.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[exports.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_NAME],
      default: void 0,
    };
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js
var require_EndpointMode = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.EndpointMode = void 0;
    var EndpointMode;
    (function (EndpointMode2) {
      EndpointMode2['IPv4'] = 'IPv4';
      EndpointMode2['IPv6'] = 'IPv6';
    })((EndpointMode = exports.EndpointMode || (exports.EndpointMode = {})));
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js
var require_EndpointModeConfigOptions = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_MODE_NAME = exports.ENV_ENDPOINT_MODE_NAME = void 0;
    var EndpointMode_1 = require_EndpointMode();
    exports.ENV_ENDPOINT_MODE_NAME = 'AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE';
    exports.CONFIG_ENDPOINT_MODE_NAME = 'ec2_metadata_service_endpoint_mode';
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[exports.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4,
    };
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js
var require_getInstanceMetadataEndpoint = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs48();
    var url_parser_1 = require_dist_cjs50();
    var Endpoint_1 = require_Endpoint2();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions();
    var EndpointMode_1 = require_EndpointMode();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions();
    var getInstanceMetadataEndpoint = async () =>
      (0, url_parser_1.parseUrl)((await getFromEndpointConfig()) || (await getFromEndpointModeConfig()));
    exports.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = async () =>
      (0, node_config_provider_1.loadConfig)(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();
    var getFromEndpointModeConfig = async () => {
      const endpointMode = await (0, node_config_provider_1.loadConfig)(
        EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS
      )();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(
            `Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode_1.EndpointMode)}`
          );
      }
    };
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js
var require_getExtendedInstanceMetadataCredentials = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = 'https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html';
    var getExtendedInstanceMetadataCredentials = (credentials, logger) => {
      var _a;
      const refreshInterval =
        STATIC_STABILITY_REFRESH_INTERVAL_SECONDS +
        Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn(
        'Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: ' +
          STATIC_STABILITY_DOC_URL
      );
      const originalExpiration =
        (_a = credentials.originalExpiration) !== null && _a !== void 0 ? _a : credentials.expiration;
      return {
        ...credentials,
        ...(originalExpiration ? { originalExpiration } : {}),
        expiration: newExpiration,
      };
    };
    exports.getExtendedInstanceMetadataCredentials = getExtendedInstanceMetadataCredentials;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js
var require_staticStabilityProvider = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 = require_getExtendedInstanceMetadataCredentials();
    var staticStabilityProvider = (provider, options = {}) => {
      const logger = (options === null || options === void 0 ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(
              credentials,
              logger
            );
          }
        } catch (e) {
          if (pastCredentials) {
            logger.warn('Credential renew failed: ', e);
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(
              pastCredentials,
              logger
            );
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
    exports.staticStabilityProvider = staticStabilityProvider;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js
var require_fromInstanceMetadata = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs26();
    var httpRequest_1 = require_httpRequest6();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    var staticStabilityProvider_1 = require_staticStabilityProvider();
    var IMDS_PATH = '/latest/meta-data/iam/security-credentials/';
    var IMDS_TOKEN_PATH = '/latest/api/token';
    var fromInstanceMetadata = (init = {}) =>
      (0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), { logger: init.logger });
    exports.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      const getCredentials = async (maxRetries2, options) => {
        const profile = (
          await (0, retry_1.retry)(async () => {
            let profile2;
            try {
              profile2 = await getProfile(options);
            } catch (err) {
              if (err.statusCode === 401) {
                disableFetchToken = false;
              }
              throw err;
            }
            return profile2;
          }, maxRetries2)
        ).trim();
        return (0, retry_1.retry)(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error) {
            if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: 'EC2 Metadata token request returned error',
              });
            } else if (error.message === 'TimeoutError' || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              'x-aws-ec2-metadata-token': token,
            },
            timeout,
          });
        }
      };
    };
    var getMetadataToken = async (options) =>
      (0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_TOKEN_PATH,
        method: 'PUT',
        headers: {
          'x-aws-ec2-metadata-token-ttl-seconds': '21600',
        },
      });
    var getProfile = async (options) =>
      (await (0, httpRequest_1.httpRequest)({ ...options, path: IMDS_PATH })).toString();
    var getCredentialsFromProfile = async (profile, options) => {
      const credsResponse = JSON.parse(
        (
          await (0, httpRequest_1.httpRequest)({
            ...options,
            path: IMDS_PATH + profile,
          })
        ).toString()
      );
      if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError(
          'Invalid response received from instance metadata service.'
        );
      }
      return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
    };
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js
var require_types4 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs51 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getInstanceMetadataEndpoint = exports.httpRequest = void 0;
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_fromContainerMetadata(), exports);
    tslib_1.__exportStar(require_fromInstanceMetadata(), exports);
    tslib_1.__exportStar(require_RemoteProviderInit(), exports);
    tslib_1.__exportStar(require_types4(), exports);
    var httpRequest_1 = require_httpRequest6();
    Object.defineProperty(exports, 'httpRequest', {
      enumerable: true,
      get: function () {
        return httpRequest_1.httpRequest;
      },
    });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    Object.defineProperty(exports, 'getInstanceMetadataEndpoint', {
      enumerable: true,
      get: function () {
        return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
      },
    });
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js
var require_resolveCredentialSource = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveCredentialSource = void 0;
    var credential_provider_env_1 = require_dist_cjs46();
    var credential_provider_imds_1 = require_dist_cjs51();
    var property_provider_1 = require_dist_cjs26();
    var resolveCredentialSource = (credentialSource, profileName) => {
      const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv,
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new property_provider_1.CredentialsProviderError(
          `Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`
        );
      }
    };
    exports.resolveCredentialSource = resolveCredentialSource;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js
var require_resolveAssumeRoleCredentials = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveAssumeRoleCredentials = exports.isAssumeRoleProfile = void 0;
    var property_provider_1 = require_dist_cjs26();
    var shared_ini_file_loader_1 = require_dist_cjs47();
    var resolveCredentialSource_1 = require_resolveCredentialSource();
    var resolveProfileData_1 = require_resolveProfileData();
    var isAssumeRoleProfile = (arg) =>
      Boolean(arg) &&
      typeof arg === 'object' &&
      typeof arg.role_arn === 'string' &&
      ['undefined', 'string'].indexOf(typeof arg.role_session_name) > -1 &&
      ['undefined', 'string'].indexOf(typeof arg.external_id) > -1 &&
      ['undefined', 'string'].indexOf(typeof arg.mfa_serial) > -1 &&
      (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));
    exports.isAssumeRoleProfile = isAssumeRoleProfile;
    var isAssumeRoleWithSourceProfile = (arg) =>
      typeof arg.source_profile === 'string' && typeof arg.credential_source === 'undefined';
    var isAssumeRoleWithProviderProfile = (arg) =>
      typeof arg.credential_source === 'string' && typeof arg.source_profile === 'undefined';
    var resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(
          `Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`,
          false
        );
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(
          `Detected a cycle attempting to resolve credentials for profile ${(0,
          shared_ini_file_loader_1.getProfileName)(options)}. Profiles visited: ` +
            Object.keys(visitedProfiles).join(', '),
          false
        );
      }
      const sourceCredsProvider = source_profile
        ? (0, resolveProfileData_1.resolveProfileData)(source_profile, profiles, options, {
            ...visitedProfiles,
            [source_profile]: true,
          })
        : (0, resolveCredentialSource_1.resolveCredentialSource)(data.credential_source, profileName)();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id,
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.CredentialsProviderError(
            `Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`,
            false
          );
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
    exports.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/tslib/tslib.js
var require_tslib11 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/tslib/tslib.js'(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function (factory) {
      var root =
        typeof global === 'object' ? global : typeof self === 'object' ? self : typeof this === 'object' ? this : {};
      if (typeof define === 'function' && define.amd) {
        define('tslib', ['exports'], function (exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === 'object' && typeof module2.exports === 'object') {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === 'function') {
            Object.defineProperty(exports2, '__esModule', { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function (id, v) {
          return (exports2[id] = previous ? previous(id, v) : v);
        };
      }
    })(function (exporter) {
      var extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      __extends = function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
      __assign =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function (decorators, target, key, desc) {
        var c = arguments.length,
          r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
          d;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function (thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g;
        return (
          (g = { next: verb(0), throw: verb(1), return: verb(2) }),
          typeof Symbol === 'function' &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError('Generator is already executing.');
          while (_)
            try {
              if (
                ((f = 1),
                y &&
                  (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function (m, o) {
        for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
      };
      __createBinding = Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          };
      __values = function (o) {
        var s = typeof Symbol === 'function' && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === 'number')
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            },
          };
        throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      };
      __read = function (o, n) {
        var m = typeof Symbol === 'function' && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i['return'])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
        return r;
      };
      __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function (v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      };
      __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = {}),
          verb('next'),
          verb('throw'),
          verb('return'),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        function verb(n) {
          if (g[n])
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume('next', value);
        }
        function reject(value) {
          resume('throw', value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function (o) {
        var i, p;
        return (
          (i = {}),
          verb('next'),
          verb('throw', function (e) {
            throw e;
          }),
          verb('return'),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p) ? { value: __await(o[n](v)), done: n === 'return' } : f ? f(v) : v;
              }
            : f;
        }
      };
      __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, 'raw', { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          };
      __importStar = function (mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      __importDefault = function (mod2) {
        return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
      };
      __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot read private member from an object whose class did not declare it');
        return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot write private member to an object whose class did not declare it');
        return kind === 'a' ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== 'object' && typeof receiver !== 'function'))
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === 'function' ? receiver === state : state.has(receiver);
      };
      exporter('__extends', __extends);
      exporter('__assign', __assign);
      exporter('__rest', __rest);
      exporter('__decorate', __decorate);
      exporter('__param', __param);
      exporter('__metadata', __metadata);
      exporter('__awaiter', __awaiter);
      exporter('__generator', __generator);
      exporter('__exportStar', __exportStar);
      exporter('__createBinding', __createBinding);
      exporter('__values', __values);
      exporter('__read', __read);
      exporter('__spread', __spread);
      exporter('__spreadArrays', __spreadArrays);
      exporter('__spreadArray', __spreadArray);
      exporter('__await', __await);
      exporter('__asyncGenerator', __asyncGenerator);
      exporter('__asyncDelegator', __asyncDelegator);
      exporter('__asyncValues', __asyncValues);
      exporter('__makeTemplateObject', __makeTemplateObject);
      exporter('__importStar', __importStar);
      exporter('__importDefault', __importDefault);
      exporter('__classPrivateFieldGet', __classPrivateFieldGet);
      exporter('__classPrivateFieldSet', __classPrivateFieldSet);
      exporter('__classPrivateFieldIn', __classPrivateFieldIn);
    });
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js
var require_ProviderError4 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ProviderError = void 0;
    var ProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = 'ProviderError';
        Object.setPrototypeOf(this, ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports.ProviderError = ProviderError;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError4 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError4();
    var CredentialsProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = 'CredentialsProviderError';
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
      }
    };
    exports.CredentialsProviderError = CredentialsProviderError;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js
var require_chain4 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.chain = void 0;
    var ProviderError_1 = require_ProviderError4();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(new ProviderError_1.ProviderError('No providers in chain'));
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports.chain = chain;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js
var require_fromStatic5 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports.fromStatic = fromStatic;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js
var require_memoize4 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports.memoize = memoize;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/property-provider/dist-cjs/index.js
var require_dist_cjs52 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/property-provider/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib11();
    tslib_1.__exportStar(require_CredentialsProviderError4(), exports);
    tslib_1.__exportStar(require_ProviderError4(), exports);
    tslib_1.__exportStar(require_chain4(), exports);
    tslib_1.__exportStar(require_fromStatic5(), exports);
    tslib_1.__exportStar(require_memoize4(), exports);
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir2 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getHomeDir = void 0;
    var os_1 = require('os');
    var path_1 = require('path');
    var getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME) return HOME;
      if (USERPROFILE) return USERPROFILE;
      if (HOMEPATH) return `${HOMEDRIVE}${HOMEPATH}`;
      return (0, os_1.homedir)();
    };
    exports.getHomeDir = getHomeDir;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js
var require_getProfileName2 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getProfileName = exports.DEFAULT_PROFILE = exports.ENV_PROFILE = void 0;
    exports.ENV_PROFILE = 'AWS_PROFILE';
    exports.DEFAULT_PROFILE = 'default';
    var getProfileName = (init) => init.profile || process.env[exports.ENV_PROFILE] || exports.DEFAULT_PROFILE;
    exports.getProfileName = getProfileName;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath2 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSSOTokenFilepath = void 0;
    var crypto_1 = require('crypto');
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir2();
    var getSSOTokenFilepath = (ssoStartUrl) => {
      const hasher = (0, crypto_1.createHash)('sha1');
      const cacheName = hasher.update(ssoStartUrl).digest('hex');
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'sso', 'cache', `${cacheName}.json`);
    };
    exports.getSSOTokenFilepath = getSSOTokenFilepath;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile2 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSSOTokenFromFile = void 0;
    var fs_1 = require('fs');
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath2();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (ssoStartUrl) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(ssoStartUrl);
      const ssoTokenText = await readFile(ssoTokenFilepath, 'utf8');
      return JSON.parse(ssoTokenText);
    };
    exports.getSSOTokenFromFile = getSSOTokenFromFile;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js
var require_getConfigFilepath2 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getConfigFilepath = exports.ENV_CONFIG_PATH = void 0;
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir2();
    exports.ENV_CONFIG_PATH = 'AWS_CONFIG_FILE';
    var getConfigFilepath = () =>
      process.env[exports.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'config');
    exports.getConfigFilepath = getConfigFilepath;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js
var require_getCredentialsFilepath2 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCredentialsFilepath = exports.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir2();
    exports.ENV_CREDENTIALS_PATH = 'AWS_SHARED_CREDENTIALS_FILE';
    var getCredentialsFilepath = () =>
      process.env[exports.ENV_CREDENTIALS_PATH] ||
      (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'credentials');
    exports.getCredentialsFilepath = getCredentialsFilepath;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js
var require_getProfileData2 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getProfileData = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var getProfileData = (data) =>
      Object.entries(data)
        .filter(([key]) => profileKeyRegex.test(key))
        .reduce((acc, [key, value]) => ({ ...acc, [profileKeyRegex.exec(key)[2]]: value }), {
          ...(data.default && { default: data.default }),
        });
    exports.getProfileData = getProfileData;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js
var require_parseIni2 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseIni = void 0;
    var profileNameBlockList = ['__proto__', 'profile __proto__'];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === '[' && line[line.length - 1] === ']';
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf('=');
          const start = 0;
          const end = line.length - 1;
          const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim(),
            ];
            map[currentSection] = map[currentSection] || {};
            map[currentSection][name] = value;
          }
        }
      }
      return map;
    };
    exports.parseIni = parseIni;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile2 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.slurpFile = void 0;
    var fs_1 = require('fs');
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path) => {
      if (!filePromisesHash[path]) {
        filePromisesHash[path] = readFile(path, 'utf8');
      }
      return filePromisesHash[path];
    };
    exports.slurpFile = slurpFile;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js
var require_loadSharedConfigFiles2 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath2();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath2();
    var getProfileData_1 = require_getProfileData2();
    var parseIni_1 = require_parseIni2();
    var slurpFile_1 = require_slurpFile2();
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const {
        filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(),
        configFilepath = (0, getConfigFilepath_1.getConfigFilepath)(),
      } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath)
          .then(parseIni_1.parseIni)
          .then(getProfileData_1.getProfileData)
          .catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath).then(parseIni_1.parseIni).catch(swallowError),
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1],
      };
    };
    exports.loadSharedConfigFiles = loadSharedConfigFiles;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js
var require_parseKnownFiles2 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles2();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return {
        ...parsedFiles.configFile,
        ...parsedFiles.credentialsFile,
      };
    };
    exports.parseKnownFiles = parseKnownFiles;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js
var require_types5 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs53 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib11();
    tslib_1.__exportStar(require_getHomeDir2(), exports);
    tslib_1.__exportStar(require_getProfileName2(), exports);
    tslib_1.__exportStar(require_getSSOTokenFilepath2(), exports);
    tslib_1.__exportStar(require_getSSOTokenFromFile2(), exports);
    tslib_1.__exportStar(require_loadSharedConfigFiles2(), exports);
    tslib_1.__exportStar(require_parseKnownFiles2(), exports);
    tslib_1.__exportStar(require_types5(), exports);
  },
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js
var require_isSsoProfile = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isSsoProfile = void 0;
    var isSsoProfile = (arg) =>
      arg &&
      (typeof arg.sso_start_url === 'string' ||
        typeof arg.sso_account_id === 'string' ||
        typeof arg.sso_region === 'string' ||
        typeof arg.sso_role_name === 'string');
    exports.isSsoProfile = isSsoProfile;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/tslib/tslib.js
var require_tslib12 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/tslib/tslib.js'(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function (factory) {
      var root =
        typeof global === 'object' ? global : typeof self === 'object' ? self : typeof this === 'object' ? this : {};
      if (typeof define === 'function' && define.amd) {
        define('tslib', ['exports'], function (exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === 'object' && typeof module2.exports === 'object') {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === 'function') {
            Object.defineProperty(exports2, '__esModule', { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function (id, v) {
          return (exports2[id] = previous ? previous(id, v) : v);
        };
      }
    })(function (exporter) {
      var extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      __extends = function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
      __assign =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function (decorators, target, key, desc) {
        var c = arguments.length,
          r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
          d;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function (thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g;
        return (
          (g = { next: verb(0), throw: verb(1), return: verb(2) }),
          typeof Symbol === 'function' &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError('Generator is already executing.');
          while (_)
            try {
              if (
                ((f = 1),
                y &&
                  (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function (m, o) {
        for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
      };
      __createBinding = Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          };
      __values = function (o) {
        var s = typeof Symbol === 'function' && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === 'number')
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            },
          };
        throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      };
      __read = function (o, n) {
        var m = typeof Symbol === 'function' && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i['return'])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
        return r;
      };
      __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function (v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      };
      __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = {}),
          verb('next'),
          verb('throw'),
          verb('return'),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        function verb(n) {
          if (g[n])
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume('next', value);
        }
        function reject(value) {
          resume('throw', value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function (o) {
        var i, p;
        return (
          (i = {}),
          verb('next'),
          verb('throw', function (e) {
            throw e;
          }),
          verb('return'),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p) ? { value: __await(o[n](v)), done: n === 'return' } : f ? f(v) : v;
              }
            : f;
        }
      };
      __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, 'raw', { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          };
      __importStar = function (mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      __importDefault = function (mod2) {
        return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
      };
      __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot read private member from an object whose class did not declare it');
        return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot write private member to an object whose class did not declare it');
        return kind === 'a' ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== 'object' && typeof receiver !== 'function'))
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === 'function' ? receiver === state : state.has(receiver);
      };
      exporter('__extends', __extends);
      exporter('__assign', __assign);
      exporter('__rest', __rest);
      exporter('__decorate', __decorate);
      exporter('__param', __param);
      exporter('__metadata', __metadata);
      exporter('__awaiter', __awaiter);
      exporter('__generator', __generator);
      exporter('__exportStar', __exportStar);
      exporter('__createBinding', __createBinding);
      exporter('__values', __values);
      exporter('__read', __read);
      exporter('__spread', __spread);
      exporter('__spreadArrays', __spreadArrays);
      exporter('__spreadArray', __spreadArray);
      exporter('__await', __await);
      exporter('__asyncGenerator', __asyncGenerator);
      exporter('__asyncDelegator', __asyncDelegator);
      exporter('__asyncValues', __asyncValues);
      exporter('__makeTemplateObject', __makeTemplateObject);
      exporter('__importStar', __importStar);
      exporter('__importDefault', __importDefault);
      exporter('__classPrivateFieldGet', __classPrivateFieldGet);
      exporter('__classPrivateFieldSet', __classPrivateFieldSet);
      exporter('__classPrivateFieldIn', __classPrivateFieldIn);
    });
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js
var require_deserializerMiddleware3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.deserializerMiddleware = void 0;
    var deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed,
        };
      } catch (error) {
        Object.defineProperty(error, '$response', {
          value: response,
        });
        throw error;
      }
    };
    exports.deserializerMiddleware = deserializerMiddleware;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js
var require_serializerMiddleware3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.serializerMiddleware = void 0;
    var serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
      const request = await serializer(args.input, options);
      return next({
        ...args,
        request,
      });
    };
    exports.serializerMiddleware = serializerMiddleware;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js
var require_serdePlugin3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSerdePlugin = exports.serializerMiddlewareOption = exports.deserializerMiddlewareOption = void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware3();
    var serializerMiddleware_1 = require_serializerMiddleware3();
    exports.deserializerMiddlewareOption = {
      name: 'deserializerMiddleware',
      step: 'deserialize',
      tags: ['DESERIALIZER'],
      override: true,
    };
    exports.serializerMiddlewareOption = {
      name: 'serializerMiddleware',
      step: 'serialize',
      tags: ['SERIALIZER'],
      override: true,
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add(
            (0, deserializerMiddleware_1.deserializerMiddleware)(config, deserializer),
            exports.deserializerMiddlewareOption
          );
          commandStack.add(
            (0, serializerMiddleware_1.serializerMiddleware)(config, serializer),
            exports.serializerMiddlewareOption
          );
        },
      };
    }
    exports.getSerdePlugin = getSerdePlugin;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js
var require_dist_cjs54 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_deserializerMiddleware3(), exports);
    tslib_1.__exportStar(require_serdePlugin3(), exports);
    tslib_1.__exportStar(require_serializerMiddleware3(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js
var require_SSOServiceException = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSOServiceException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var SSOServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSOServiceException.prototype);
      }
    };
    exports.SSOServiceException = SSOServiceException;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js
var require_models_03 = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.LogoutRequestFilterSensitiveLog =
      exports.ListAccountsResponseFilterSensitiveLog =
      exports.ListAccountsRequestFilterSensitiveLog =
      exports.ListAccountRolesResponseFilterSensitiveLog =
      exports.RoleInfoFilterSensitiveLog =
      exports.ListAccountRolesRequestFilterSensitiveLog =
      exports.GetRoleCredentialsResponseFilterSensitiveLog =
      exports.RoleCredentialsFilterSensitiveLog =
      exports.GetRoleCredentialsRequestFilterSensitiveLog =
      exports.AccountInfoFilterSensitiveLog =
      exports.UnauthorizedException =
      exports.TooManyRequestsException =
      exports.ResourceNotFoundException =
      exports.InvalidRequestException =
        void 0;
    var smithy_client_1 = require_dist_cjs3();
    var SSOServiceException_1 = require_SSOServiceException();
    var InvalidRequestException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: 'InvalidRequestException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidRequestException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
      }
    };
    exports.InvalidRequestException = InvalidRequestException;
    var ResourceNotFoundException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: 'ResourceNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ResourceNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
      }
    };
    exports.ResourceNotFoundException = ResourceNotFoundException;
    var TooManyRequestsException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: 'TooManyRequestsException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TooManyRequestsException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
      }
    };
    exports.TooManyRequestsException = TooManyRequestsException;
    var UnauthorizedException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: 'UnauthorizedException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'UnauthorizedException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
      }
    };
    exports.UnauthorizedException = UnauthorizedException;
    var AccountInfoFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.AccountInfoFilterSensitiveLog = AccountInfoFilterSensitiveLog;
    var GetRoleCredentialsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }),
    });
    exports.GetRoleCredentialsRequestFilterSensitiveLog = GetRoleCredentialsRequestFilterSensitiveLog;
    var RoleCredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.secretAccessKey && { secretAccessKey: smithy_client_1.SENSITIVE_STRING }),
      ...(obj.sessionToken && { sessionToken: smithy_client_1.SENSITIVE_STRING }),
    });
    exports.RoleCredentialsFilterSensitiveLog = RoleCredentialsFilterSensitiveLog;
    var GetRoleCredentialsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.roleCredentials && {
        roleCredentials: (0, exports.RoleCredentialsFilterSensitiveLog)(obj.roleCredentials),
      }),
    });
    exports.GetRoleCredentialsResponseFilterSensitiveLog = GetRoleCredentialsResponseFilterSensitiveLog;
    var ListAccountRolesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }),
    });
    exports.ListAccountRolesRequestFilterSensitiveLog = ListAccountRolesRequestFilterSensitiveLog;
    var RoleInfoFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.RoleInfoFilterSensitiveLog = RoleInfoFilterSensitiveLog;
    var ListAccountRolesResponseFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ListAccountRolesResponseFilterSensitiveLog = ListAccountRolesResponseFilterSensitiveLog;
    var ListAccountsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }),
    });
    exports.ListAccountsRequestFilterSensitiveLog = ListAccountsRequestFilterSensitiveLog;
    var ListAccountsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
    });
    exports.ListAccountsResponseFilterSensitiveLog = ListAccountsResponseFilterSensitiveLog;
    var LogoutRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }),
    });
    exports.LogoutRequestFilterSensitiveLog = LogoutRequestFilterSensitiveLog;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler6 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest7 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HttpRequest = void 0;
    var HttpRequest = class {
      constructor(options) {
        this.method = options.method || 'GET';
        this.hostname = options.hostname || 'localhost';
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol
          ? options.protocol.slice(-1) !== ':'
            ? `${options.protocol}:`
            : options.protocol
          : 'https:';
        this.path = options.path ? (options.path.charAt(0) !== '/' ? `/${options.path}` : options.path) : '/';
      }
      static isInstance(request) {
        if (!request) return false;
        const req = request;
        return (
          'method' in req &&
          'protocol' in req &&
          'hostname' in req &&
          'path' in req &&
          typeof req['query'] === 'object' &&
          typeof req['headers'] === 'object'
        );
      }
      clone() {
        const cloned = new HttpRequest({
          ...this,
          headers: { ...this.headers },
        });
        if (cloned.query) cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param,
        };
      }, {});
    }
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse6 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response) return false;
        const resp = response;
        return typeof resp.statusCode === 'number' && typeof resp.headers === 'object';
      }
    };
    exports.HttpResponse = HttpResponse;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname6 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports.isValidHostname = isValidHostname;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/protocol-http/dist-cjs/index.js
var require_dist_cjs55 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/protocol-http/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_httpHandler6(), exports);
    tslib_1.__exportStar(require_httpRequest7(), exports);
    tslib_1.__exportStar(require_httpResponse6(), exports);
    tslib_1.__exportStar(require_isValidHostname6(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson1 = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.deserializeAws_restJson1LogoutCommand =
      exports.deserializeAws_restJson1ListAccountsCommand =
      exports.deserializeAws_restJson1ListAccountRolesCommand =
      exports.deserializeAws_restJson1GetRoleCredentialsCommand =
      exports.serializeAws_restJson1LogoutCommand =
      exports.serializeAws_restJson1ListAccountsCommand =
      exports.serializeAws_restJson1ListAccountRolesCommand =
      exports.serializeAws_restJson1GetRoleCredentialsCommand =
        void 0;
    var protocol_http_1 = require_dist_cjs55();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var SSOServiceException_1 = require_SSOServiceException();
    var serializeAws_restJson1GetRoleCredentialsCommand = async (input, context) => {
      const { hostname, protocol = 'https', port, path: basePath } = await context.endpoint();
      const headers = {
        ...(isSerializableHeaderValue(input.accessToken) && { 'x-amz-sso_bearer_token': input.accessToken }),
      };
      const resolvedPath = `${
        (basePath === null || basePath === void 0 ? void 0 : basePath.endsWith('/'))
          ? basePath.slice(0, -1)
          : basePath || ''
      }/federation/credentials`;
      const query = {
        ...(input.roleName !== void 0 && { role_name: input.roleName }),
        ...(input.accountId !== void 0 && { account_id: input.accountId }),
      };
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: 'GET',
        headers,
        path: resolvedPath,
        query,
        body,
      });
    };
    exports.serializeAws_restJson1GetRoleCredentialsCommand = serializeAws_restJson1GetRoleCredentialsCommand;
    var serializeAws_restJson1ListAccountRolesCommand = async (input, context) => {
      const { hostname, protocol = 'https', port, path: basePath } = await context.endpoint();
      const headers = {
        ...(isSerializableHeaderValue(input.accessToken) && { 'x-amz-sso_bearer_token': input.accessToken }),
      };
      const resolvedPath = `${
        (basePath === null || basePath === void 0 ? void 0 : basePath.endsWith('/'))
          ? basePath.slice(0, -1)
          : basePath || ''
      }/assignment/roles`;
      const query = {
        ...(input.nextToken !== void 0 && { next_token: input.nextToken }),
        ...(input.maxResults !== void 0 && { max_result: input.maxResults.toString() }),
        ...(input.accountId !== void 0 && { account_id: input.accountId }),
      };
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: 'GET',
        headers,
        path: resolvedPath,
        query,
        body,
      });
    };
    exports.serializeAws_restJson1ListAccountRolesCommand = serializeAws_restJson1ListAccountRolesCommand;
    var serializeAws_restJson1ListAccountsCommand = async (input, context) => {
      const { hostname, protocol = 'https', port, path: basePath } = await context.endpoint();
      const headers = {
        ...(isSerializableHeaderValue(input.accessToken) && { 'x-amz-sso_bearer_token': input.accessToken }),
      };
      const resolvedPath = `${
        (basePath === null || basePath === void 0 ? void 0 : basePath.endsWith('/'))
          ? basePath.slice(0, -1)
          : basePath || ''
      }/assignment/accounts`;
      const query = {
        ...(input.nextToken !== void 0 && { next_token: input.nextToken }),
        ...(input.maxResults !== void 0 && { max_result: input.maxResults.toString() }),
      };
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: 'GET',
        headers,
        path: resolvedPath,
        query,
        body,
      });
    };
    exports.serializeAws_restJson1ListAccountsCommand = serializeAws_restJson1ListAccountsCommand;
    var serializeAws_restJson1LogoutCommand = async (input, context) => {
      const { hostname, protocol = 'https', port, path: basePath } = await context.endpoint();
      const headers = {
        ...(isSerializableHeaderValue(input.accessToken) && { 'x-amz-sso_bearer_token': input.accessToken }),
      };
      const resolvedPath = `${
        (basePath === null || basePath === void 0 ? void 0 : basePath.endsWith('/'))
          ? basePath.slice(0, -1)
          : basePath || ''
      }/logout`;
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: 'POST',
        headers,
        path: resolvedPath,
        body,
      });
    };
    exports.serializeAws_restJson1LogoutCommand = serializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRoleCredentialsCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output),
        roleCredentials: void 0,
      };
      const data = (0, smithy_client_1.expectNonNull)(
        (0, smithy_client_1.expectObject)(await parseBody(output.body, context)),
        'body'
      );
      if (data.roleCredentials !== void 0 && data.roleCredentials !== null) {
        contents.roleCredentials = deserializeAws_restJson1RoleCredentials(data.roleCredentials, context);
      }
      return Promise.resolve(contents);
    };
    exports.deserializeAws_restJson1GetRoleCredentialsCommand = deserializeAws_restJson1GetRoleCredentialsCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InvalidRequestException':
        case 'com.amazonaws.sso#InvalidRequestException':
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.sso#ResourceNotFoundException':
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case 'TooManyRequestsException':
        case 'com.amazonaws.sso#TooManyRequestsException':
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case 'UnauthorizedException':
        case 'com.amazonaws.sso#UnauthorizedException':
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_restJson1ListAccountRolesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountRolesCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output),
        nextToken: void 0,
        roleList: void 0,
      };
      const data = (0, smithy_client_1.expectNonNull)(
        (0, smithy_client_1.expectObject)(await parseBody(output.body, context)),
        'body'
      );
      if (data.nextToken !== void 0 && data.nextToken !== null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      if (data.roleList !== void 0 && data.roleList !== null) {
        contents.roleList = deserializeAws_restJson1RoleListType(data.roleList, context);
      }
      return Promise.resolve(contents);
    };
    exports.deserializeAws_restJson1ListAccountRolesCommand = deserializeAws_restJson1ListAccountRolesCommand;
    var deserializeAws_restJson1ListAccountRolesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InvalidRequestException':
        case 'com.amazonaws.sso#InvalidRequestException':
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.sso#ResourceNotFoundException':
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case 'TooManyRequestsException':
        case 'com.amazonaws.sso#TooManyRequestsException':
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case 'UnauthorizedException':
        case 'com.amazonaws.sso#UnauthorizedException':
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_restJson1ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountsCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output),
        accountList: void 0,
        nextToken: void 0,
      };
      const data = (0, smithy_client_1.expectNonNull)(
        (0, smithy_client_1.expectObject)(await parseBody(output.body, context)),
        'body'
      );
      if (data.accountList !== void 0 && data.accountList !== null) {
        contents.accountList = deserializeAws_restJson1AccountListType(data.accountList, context);
      }
      if (data.nextToken !== void 0 && data.nextToken !== null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      return Promise.resolve(contents);
    };
    exports.deserializeAws_restJson1ListAccountsCommand = deserializeAws_restJson1ListAccountsCommand;
    var deserializeAws_restJson1ListAccountsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InvalidRequestException':
        case 'com.amazonaws.sso#InvalidRequestException':
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.sso#ResourceNotFoundException':
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case 'TooManyRequestsException':
        case 'com.amazonaws.sso#TooManyRequestsException':
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case 'UnauthorizedException':
        case 'com.amazonaws.sso#UnauthorizedException':
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_restJson1LogoutCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1LogoutCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output),
      };
      await collectBody(output.body, context);
      return Promise.resolve(contents);
    };
    exports.deserializeAws_restJson1LogoutCommand = deserializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1LogoutCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
      };
      let response;
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InvalidRequestException':
        case 'com.amazonaws.sso#InvalidRequestException':
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case 'TooManyRequestsException':
        case 'com.amazonaws.sso#TooManyRequestsException':
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case 'UnauthorizedException':
        case 'com.amazonaws.sso#UnauthorizedException':
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          const $metadata = deserializeMetadata(output);
          const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode || statusCode || 'UnknowError',
            $fault: 'client',
            $metadata,
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnauthorizedExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1AccountInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        accountName: (0, smithy_client_1.expectString)(output.accountName),
        emailAddress: (0, smithy_client_1.expectString)(output.emailAddress),
      };
    };
    var deserializeAws_restJson1AccountListType = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_restJson1AccountInfo(entry, context);
        });
      return retVal;
    };
    var deserializeAws_restJson1RoleCredentials = (output, context) => {
      return {
        accessKeyId: (0, smithy_client_1.expectString)(output.accessKeyId),
        expiration: (0, smithy_client_1.expectLong)(output.expiration),
        secretAccessKey: (0, smithy_client_1.expectString)(output.secretAccessKey),
        sessionToken: (0, smithy_client_1.expectString)(output.sessionToken),
      };
    };
    var deserializeAws_restJson1RoleInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        roleName: (0, smithy_client_1.expectString)(output.roleName),
      };
    };
    var deserializeAws_restJson1RoleListType = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          if (entry === null) {
            return null;
          }
          return deserializeAws_restJson1RoleInfo(entry, context);
        });
      return retVal;
    };
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId:
          (_a = output.headers['x-amzn-requestid']) !== null && _a !== void 0
            ? _a
            : output.headers['x-amzn-request-id'],
        extendedRequestId: output.headers['x-amz-id-2'],
        cfId: output.headers['x-amz-cf-id'],
      };
    };
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) =>
      collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) =>
      value !== void 0 &&
      value !== null &&
      value !== '' &&
      (!Object.getOwnPropertyNames(value).includes('length') || value.length != 0) &&
      (!Object.getOwnPropertyNames(value).includes('size') || value.size != 0);
    var parseBody = (streamBody, context) =>
      collectBodyString(streamBody, context).then((encoded) => {
        if (encoded.length) {
          return JSON.parse(encoded);
        }
        return {};
      });
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === 'number') {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(':') >= 0) {
          cleanValue = cleanValue.split(':')[0];
        }
        if (cleanValue.indexOf('#') >= 0) {
          cleanValue = cleanValue.split('#')[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, 'x-amzn-errortype');
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data['__type'] !== void 0) {
        return sanitizeErrorCode(data['__type']);
      }
    };
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js
var require_GetRoleCredentialsCommand = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetRoleCredentialsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs54();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetRoleCredentialsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'SSOClient';
        const commandName = 'GetRoleCredentialsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRoleCredentialsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRoleCredentialsResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetRoleCredentialsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetRoleCredentialsCommand)(output, context);
      }
    };
    exports.GetRoleCredentialsCommand = GetRoleCredentialsCommand;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js
var require_ListAccountRolesCommand = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListAccountRolesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs54();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountRolesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'SSOClient';
        const commandName = 'ListAccountRolesCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountRolesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountRolesResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountRolesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountRolesCommand)(output, context);
      }
    };
    exports.ListAccountRolesCommand = ListAccountRolesCommand;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js
var require_ListAccountsCommand = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListAccountsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs54();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'SSOClient';
        const commandName = 'ListAccountsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountsResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountsCommand)(output, context);
      }
    };
    exports.ListAccountsCommand = ListAccountsCommand;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js
var require_LogoutCommand = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.LogoutCommand = void 0;
    var middleware_serde_1 = require_dist_cjs54();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var LogoutCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'SSOClient';
        const commandName = 'LogoutCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.LogoutRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1LogoutCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1LogoutCommand)(output, context);
      }
    };
    exports.LogoutCommand = LogoutCommand;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var require_NodeUseDualstackEndpointConfigOptions3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS =
      exports.DEFAULT_USE_DUALSTACK_ENDPOINT =
      exports.CONFIG_USE_DUALSTACK_ENDPOINT =
      exports.ENV_USE_DUALSTACK_ENDPOINT =
        void 0;
    var util_config_provider_1 = require_dist_cjs5();
    exports.ENV_USE_DUALSTACK_ENDPOINT = 'AWS_USE_DUALSTACK_ENDPOINT';
    exports.CONFIG_USE_DUALSTACK_ENDPOINT = 'use_dualstack_endpoint';
    exports.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) =>
        (0, util_config_provider_1.booleanSelector)(
          env2,
          exports.ENV_USE_DUALSTACK_ENDPOINT,
          util_config_provider_1.SelectorType.ENV
        ),
      configFileSelector: (profile) =>
        (0, util_config_provider_1.booleanSelector)(
          profile,
          exports.CONFIG_USE_DUALSTACK_ENDPOINT,
          util_config_provider_1.SelectorType.CONFIG
        ),
      default: false,
    };
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var require_NodeUseFipsEndpointConfigOptions3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS =
      exports.DEFAULT_USE_FIPS_ENDPOINT =
      exports.CONFIG_USE_FIPS_ENDPOINT =
      exports.ENV_USE_FIPS_ENDPOINT =
        void 0;
    var util_config_provider_1 = require_dist_cjs5();
    exports.ENV_USE_FIPS_ENDPOINT = 'AWS_USE_FIPS_ENDPOINT';
    exports.CONFIG_USE_FIPS_ENDPOINT = 'use_fips_endpoint';
    exports.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) =>
        (0, util_config_provider_1.booleanSelector)(
          env2,
          exports.ENV_USE_FIPS_ENDPOINT,
          util_config_provider_1.SelectorType.ENV
        ),
      configFileSelector: (profile) =>
        (0, util_config_provider_1.booleanSelector)(
          profile,
          exports.CONFIG_USE_FIPS_ENDPOINT,
          util_config_provider_1.SelectorType.CONFIG
        ),
      default: false,
    };
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js
var require_resolveCustomEndpointsConfig3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveCustomEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var resolveCustomEndpointsConfig = (input) => {
      var _a;
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(
          typeof endpoint === 'string' ? urlParser(endpoint) : endpoint
        ),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)(input.useDualstackEndpoint),
      };
    };
    exports.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js
var require_getEndpointFromRegion3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error('Invalid region in client config');
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } =
        (_a = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) !== null &&
        _a !== void 0
          ? _a
          : {};
      if (!hostname) {
        throw new Error('Cannot resolve hostname from client config');
      }
      return input.urlParser(`${tls ? 'https:' : 'http:'}//${hostname}`);
    };
    exports.getEndpointFromRegion = getEndpointFromRegion;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js
var require_resolveEndpointsConfig3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var getEndpointFromRegion_1 = require_getEndpointFromRegion3();
    var resolveEndpointsConfig = (input) => {
      var _a;
      const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)(input.useDualstackEndpoint);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: endpoint
          ? (0, util_middleware_1.normalizeProvider)(typeof endpoint === 'string' ? urlParser(endpoint) : endpoint)
          : () =>
              (0, getEndpointFromRegion_1.getEndpointFromRegion)({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: endpoint ? true : false,
        useDualstackEndpoint,
      };
    };
    exports.resolveEndpointsConfig = resolveEndpointsConfig;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js
var require_endpointsConfig3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_NodeUseDualstackEndpointConfigOptions3(), exports);
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions3(), exports);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig3(), exports);
    tslib_1.__exportStar(require_resolveEndpointsConfig3(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js
var require_config5 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_REGION_CONFIG_FILE_OPTIONS =
      exports.NODE_REGION_CONFIG_OPTIONS =
      exports.REGION_INI_NAME =
      exports.REGION_ENV_NAME =
        void 0;
    exports.REGION_ENV_NAME = 'AWS_REGION';
    exports.REGION_INI_NAME = 'region';
    exports.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[exports.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports.REGION_INI_NAME],
      default: () => {
        throw new Error('Region is missing');
      },
    };
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: 'credentials',
    };
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js
var require_isFipsRegion3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isFipsRegion = void 0;
    var isFipsRegion = (region) =>
      typeof region === 'string' && (region.startsWith('fips-') || region.endsWith('-fips'));
    exports.isFipsRegion = isFipsRegion;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js
var require_getRealRegion3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion3();
    var getRealRegion = (region) =>
      (0, isFipsRegion_1.isFipsRegion)(region)
        ? ['fips-aws-global', 'aws-fips'].includes(region)
          ? 'us-east-1'
          : region.replace(/fips-(dkr-|prod-)?|-fips/, '')
        : region;
    exports.getRealRegion = getRealRegion;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js
var require_resolveRegionConfig3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion3();
    var isFipsRegion_1 = require_isFipsRegion3();
    var resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error('Region is missing');
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === 'string') {
            return (0, getRealRegion_1.getRealRegion)(region);
          }
          const providedRegion = await region();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === 'string' ? region : await region();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint === 'boolean' ? Promise.resolve(useFipsEndpoint) : useFipsEndpoint();
        },
      };
    };
    exports.resolveRegionConfig = resolveRegionConfig;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js
var require_regionConfig3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_config5(), exports);
    tslib_1.__exportStar(require_resolveRegionConfig3(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js
var require_PartitionHash3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js
var require_RegionHash3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js
var require_getHostnameFromVariants3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(
        ({ tags }) => useFipsEndpoint === tags.includes('fips') && useDualstackEndpoint === tags.includes('dualstack')
      )) === null || _a === void 0
        ? void 0
        : _a.hostname;
    };
    exports.getHostnameFromVariants = getHostnameFromVariants;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js
var require_getResolvedHostname3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getResolvedHostname = void 0;
    var getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) =>
      regionHostname
        ? regionHostname
        : partitionHostname
        ? partitionHostname.replace('{region}', resolvedRegion)
        : void 0;
    exports.getResolvedHostname = getResolvedHostname;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js
var require_getResolvedPartition3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getResolvedPartition = void 0;
    var getResolvedPartition = (region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region))) !==
        null && _a !== void 0
        ? _a
        : 'aws';
    };
    exports.getResolvedPartition = getResolvedPartition;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js
var require_getResolvedSigningRegion3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace('\\\\', '\\').replace(/^\^/g, '\\.').replace(/\$$/g, '\\.');
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    };
    exports.getResolvedSigningRegion = getResolvedSigningRegion;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js
var require_getRegionInfo3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants3();
    var getResolvedHostname_1 = require_getResolvedHostname3();
    var getResolvedPartition_1 = require_getResolvedPartition3();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion3();
    var getRegionInfo = (
      region,
      { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash }
    ) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = (0, getResolvedPartition_1.getResolvedPartition)(region, { partitionHash });
      const resolvedRegion =
        region in regionHash
          ? region
          : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null &&
            _b !== void 0
          ? _b
          : region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)(
        (_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants,
        hostnameOptions
      );
      const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)(
        (_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants,
        hostnameOptions
      );
      const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, {
        regionHostname,
        partitionHostname,
      });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint,
      });
      return {
        partition,
        signingService,
        hostname,
        ...(signingRegion && { signingRegion }),
        ...(((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {
          signingService: regionHash[resolvedRegion].signingService,
        }),
      };
    };
    exports.getRegionInfo = getRegionInfo;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js
var require_regionInfo3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_PartitionHash3(), exports);
    tslib_1.__exportStar(require_RegionHash3(), exports);
    tslib_1.__exportStar(require_getRegionInfo3(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/index.js
var require_dist_cjs56 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/config-resolver/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_endpointsConfig3(), exports);
    tslib_1.__exportStar(require_regionConfig3(), exports);
    tslib_1.__exportStar(require_regionInfo3(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js
var require_dist_cjs57 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getContentLengthPlugin = exports.contentLengthMiddlewareOptions = exports.contentLengthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs55();
    var CONTENT_LENGTH_HEADER = 'content-length';
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (
            body &&
            Object.keys(headers)
              .map((str) => str.toLowerCase())
              .indexOf(CONTENT_LENGTH_HEADER) === -1
          ) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length),
              };
            } catch (error) {}
          }
        }
        return next({
          ...args,
          request,
        });
      };
    }
    exports.contentLengthMiddleware = contentLengthMiddleware;
    exports.contentLengthMiddlewareOptions = {
      step: 'build',
      tags: ['SET_CONTENT_LENGTH', 'CONTENT_LENGTH'],
      name: 'contentLengthMiddleware',
      override: true,
    };
    var getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports.contentLengthMiddlewareOptions);
      },
    });
    exports.getContentLengthPlugin = getContentLengthPlugin;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs58 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getHostHeaderPlugin =
      exports.hostHeaderMiddlewareOptions =
      exports.hostHeaderMiddleware =
      exports.resolveHostHeaderConfig =
        void 0;
    var protocol_http_1 = require_dist_cjs55();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    exports.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request)) return next(args);
      const { request } = args;
      const { handlerProtocol = '' } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf('h2') >= 0 && !request.headers[':authority']) {
        delete request.headers['host'];
        request.headers[':authority'] = '';
      } else if (!request.headers['host']) {
        request.headers['host'] = request.hostname;
      }
      return next(args);
    };
    exports.hostHeaderMiddleware = hostHeaderMiddleware;
    exports.hostHeaderMiddlewareOptions = {
      name: 'hostHeaderMiddleware',
      step: 'build',
      priority: 'low',
      tags: ['HOST'],
      override: true,
    };
    var getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.hostHeaderMiddleware)(options), exports.hostHeaderMiddlewareOptions);
      },
    });
    exports.getHostHeaderPlugin = getHostHeaderPlugin;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js
var require_loggerMiddleware3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getLoggerPlugin = exports.loggerMiddlewareOptions = exports.loggerMiddleware = void 0;
    var loggerMiddleware = () => (next, context) => async (args) => {
      const { clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog } = context;
      const response = await next(args);
      if (!logger) {
        return response;
      }
      if (typeof logger.info === 'function') {
        const { $metadata, ...outputWithoutMetadata } = response.output;
        logger.info({
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata,
        });
      }
      return response;
    };
    exports.loggerMiddleware = loggerMiddleware;
    exports.loggerMiddlewareOptions = {
      name: 'loggerMiddleware',
      tags: ['LOGGER'],
      step: 'initialize',
      override: true,
    };
    var getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.loggerMiddleware)(), exports.loggerMiddlewareOptions);
      },
    });
    exports.getLoggerPlugin = getLoggerPlugin;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs59 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_loggerMiddleware3(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/config.js
var require_config6 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/config.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DEFAULT_RETRY_MODE = exports.DEFAULT_MAX_ATTEMPTS = exports.RETRY_MODES = void 0;
    var RETRY_MODES;
    (function (RETRY_MODES2) {
      RETRY_MODES2['STANDARD'] = 'standard';
      RETRY_MODES2['ADAPTIVE'] = 'adaptive';
    })((RETRY_MODES = exports.RETRY_MODES || (exports.RETRY_MODES = {})));
    exports.DEFAULT_MAX_ATTEMPTS = 3;
    exports.DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js
var require_constants11 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TRANSIENT_ERROR_STATUS_CODES =
      exports.TRANSIENT_ERROR_CODES =
      exports.THROTTLING_ERROR_CODES =
      exports.CLOCK_SKEW_ERROR_CODES =
        void 0;
    exports.CLOCK_SKEW_ERROR_CODES = [
      'AuthFailure',
      'InvalidSignatureException',
      'RequestExpired',
      'RequestInTheFuture',
      'RequestTimeTooSkewed',
      'SignatureDoesNotMatch',
    ];
    exports.THROTTLING_ERROR_CODES = [
      'BandwidthLimitExceeded',
      'EC2ThrottledException',
      'LimitExceededException',
      'PriorRequestNotComplete',
      'ProvisionedThroughputExceededException',
      'RequestLimitExceeded',
      'RequestThrottled',
      'RequestThrottledException',
      'SlowDown',
      'ThrottledException',
      'Throttling',
      'ThrottlingException',
      'TooManyRequestsException',
      'TransactionInProgressException',
    ];
    exports.TRANSIENT_ERROR_CODES = ['AbortError', 'TimeoutError', 'RequestTimeout', 'RequestTimeoutException'];
    exports.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js
var require_dist_cjs60 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isTransientError =
      exports.isThrottlingError =
      exports.isClockSkewError =
      exports.isRetryableByTrait =
        void 0;
    var constants_1 = require_constants11();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return (
        ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 ||
        constants_1.THROTTLING_ERROR_CODES.includes(error.name) ||
        ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true
      );
    };
    exports.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return (
        constants_1.TRANSIENT_ERROR_CODES.includes(error.name) ||
        constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(
          ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0
        )
      );
    };
    exports.isTransientError = isTransientError;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/DefaultRateLimiter.js
var require_DefaultRateLimiter3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/DefaultRateLimiter.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs60();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta =
          (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
        this.minCapacity =
          (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0
            ? _b
            : 1;
        this.minFillRate =
          (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0
            ? _c
            : 0.5;
        this.scaleConstant =
          (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0
            ? _d
            : 0.4;
        this.smooth =
          (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = ((amount - this.currentCapacity) / this.fillRate) * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow((this.lastMaxRate * (1 - this.beta)) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(
          this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate
        );
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    exports.DefaultRateLimiter = DefaultRateLimiter;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/constants.js
var require_constants12 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.REQUEST_HEADER =
      exports.INVOCATION_ID_HEADER =
      exports.NO_RETRY_INCREMENT =
      exports.TIMEOUT_RETRY_COST =
      exports.RETRY_COST =
      exports.INITIAL_RETRY_TOKENS =
      exports.THROTTLING_RETRY_DELAY_BASE =
      exports.MAXIMUM_RETRY_DELAY =
      exports.DEFAULT_RETRY_DELAY_BASE =
        void 0;
    exports.DEFAULT_RETRY_DELAY_BASE = 100;
    exports.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports.THROTTLING_RETRY_DELAY_BASE = 500;
    exports.INITIAL_RETRY_TOKENS = 500;
    exports.RETRY_COST = 5;
    exports.TIMEOUT_RETRY_COST = 10;
    exports.NO_RETRY_INCREMENT = 1;
    exports.INVOCATION_ID_HEADER = 'amz-sdk-invocation-id';
    exports.REQUEST_HEADER = 'amz-sdk-request';
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js
var require_defaultRetryQuota3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getDefaultRetryQuota = void 0;
    var constants_1 = require_constants12();
    var getDefaultRetryQuota = (initialRetryTokens, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement =
        (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0
          ? _a
          : constants_1.NO_RETRY_INCREMENT;
      const retryCost =
        (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0
          ? _b
          : constants_1.RETRY_COST;
      const timeoutRetryCost =
        (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0
          ? _c
          : constants_1.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = (error) => (error.name === 'TimeoutError' ? timeoutRetryCost : retryCost);
      const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
      const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
          throw new Error('No retry token available');
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity +=
          capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens,
      });
    };
    exports.getDefaultRetryQuota = getDefaultRetryQuota;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js
var require_delayDecider3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultDelayDecider = void 0;
    var constants_1 = require_constants12();
    var defaultDelayDecider = (delayBase, attempts) =>
      Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    exports.defaultDelayDecider = defaultDelayDecider;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js
var require_retryDecider3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultRetryDecider = void 0;
    var service_error_classification_1 = require_dist_cjs60();
    var defaultRetryDecider = (error) => {
      if (!error) {
        return false;
      }
      return (
        (0, service_error_classification_1.isRetryableByTrait)(error) ||
        (0, service_error_classification_1.isClockSkewError)(error) ||
        (0, service_error_classification_1.isThrottlingError)(error) ||
        (0, service_error_classification_1.isTransientError)(error)
      );
    };
    exports.defaultRetryDecider = defaultRetryDecider;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.StandardRetryStrategy = void 0;
    var protocol_http_1 = require_dist_cjs55();
    var service_error_classification_1 = require_dist_cjs60();
    var uuid_1 = require_dist();
    var config_1 = require_config6();
    var constants_1 = require_constants12();
    var defaultRetryQuota_1 = require_defaultRetryQuota3();
    var delayDecider_1 = require_delayDecider3();
    var retryDecider_1 = require_retryDecider3();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.retryDecider =
          (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0
            ? _a
            : retryDecider_1.defaultRetryDecider;
        this.delayDecider =
          (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0
            ? _b
            : delayDecider_1.defaultDelayDecider;
        this.retryQuota =
          (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0
            ? _c
            : (0, defaultRetryQuota_1.getDefaultRetryQuota)(constants_1.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = config_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[constants_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[constants_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options === null || options === void 0 ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options === null || options === void 0 ? void 0 : options.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = asSdkError(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delay = this.delayDecider(
                (0, service_error_classification_1.isThrottlingError)(err)
                  ? constants_1.THROTTLING_RETRY_DELAY_BASE
                  : constants_1.DEFAULT_RETRY_DELAY_BASE,
                attempts
              );
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    exports.StandardRetryStrategy = StandardRetryStrategy;
    var asSdkError = (error) => {
      if (error instanceof Error) return error;
      if (error instanceof Object) return Object.assign(new Error(), error);
      if (typeof error === 'string') return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    };
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config6();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter3();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy3();
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options !== null && options !== void 0 ? options : {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter =
          rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          },
        });
      }
    };
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js
var require_configurations9 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS =
      exports.CONFIG_RETRY_MODE =
      exports.ENV_RETRY_MODE =
      exports.resolveRetryConfig =
      exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS =
      exports.CONFIG_MAX_ATTEMPTS =
      exports.ENV_MAX_ATTEMPTS =
        void 0;
    var util_middleware_1 = require_dist_cjs6();
    var AdaptiveRetryStrategy_1 = require_AdaptiveRetryStrategy3();
    var config_1 = require_config6();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy3();
    exports.ENV_MAX_ATTEMPTS = 'AWS_MAX_ATTEMPTS';
    exports.CONFIG_MAX_ATTEMPTS = 'max_attempts';
    exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => {
        const value = env2[exports.ENV_MAX_ATTEMPTS];
        if (!value) return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${exports.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[exports.CONFIG_MAX_ATTEMPTS];
        if (!value) return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${exports.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: config_1.DEFAULT_MAX_ATTEMPTS,
    };
    var resolveRetryConfig = (input) => {
      var _a;
      const maxAttempts = (0, util_middleware_1.normalizeProvider)(
        (_a = input.maxAttempts) !== null && _a !== void 0 ? _a : config_1.DEFAULT_MAX_ATTEMPTS
      );
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (input.retryStrategy) {
            return input.retryStrategy;
          }
          const retryMode = await (0, util_middleware_1.normalizeProvider)(input.retryMode)();
          if (retryMode === config_1.RETRY_MODES.ADAPTIVE) {
            return new AdaptiveRetryStrategy_1.AdaptiveRetryStrategy(maxAttempts);
          }
          return new StandardRetryStrategy_1.StandardRetryStrategy(maxAttempts);
        },
      };
    };
    exports.resolveRetryConfig = resolveRetryConfig;
    exports.ENV_RETRY_MODE = 'AWS_RETRY_MODE';
    exports.CONFIG_RETRY_MODE = 'retry_mode';
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[exports.ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[exports.CONFIG_RETRY_MODE],
      default: config_1.DEFAULT_RETRY_MODE,
    };
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js
var require_omitRetryHeadersMiddleware3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getOmitRetryHeadersPlugin =
      exports.omitRetryHeadersMiddlewareOptions =
      exports.omitRetryHeadersMiddleware =
        void 0;
    var protocol_http_1 = require_dist_cjs55();
    var constants_1 = require_constants12();
    var omitRetryHeadersMiddleware = () => (next) => async (args) => {
      const { request } = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        delete request.headers[constants_1.INVOCATION_ID_HEADER];
        delete request.headers[constants_1.REQUEST_HEADER];
      }
      return next(args);
    };
    exports.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
    exports.omitRetryHeadersMiddlewareOptions = {
      name: 'omitRetryHeadersMiddleware',
      tags: ['RETRY', 'HEADERS', 'OMIT_RETRY_HEADERS'],
      relation: 'before',
      toMiddleware: 'awsAuthMiddleware',
      override: true,
    };
    var getOmitRetryHeadersPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.omitRetryHeadersMiddleware)(), exports.omitRetryHeadersMiddlewareOptions);
      },
    });
    exports.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js
var require_retryMiddleware3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRetryPlugin = exports.retryMiddlewareOptions = exports.retryMiddleware = void 0;
    var retryMiddleware = (options) => (next, context) => async (args) => {
      const retryStrategy = await options.retryStrategy();
      if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)
        context.userAgent = [...(context.userAgent || []), ['cfg/retry-mode', retryStrategy.mode]];
      return retryStrategy.retry(next, args);
    };
    exports.retryMiddleware = retryMiddleware;
    exports.retryMiddlewareOptions = {
      name: 'retryMiddleware',
      tags: ['RETRY'],
      step: 'finalizeRequest',
      priority: 'high',
      override: true,
    };
    var getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.retryMiddleware)(options), exports.retryMiddlewareOptions);
      },
    });
    exports.getRetryPlugin = getRetryPlugin;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/types.js
var require_types6 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js
var require_dist_cjs61 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_AdaptiveRetryStrategy3(), exports);
    tslib_1.__exportStar(require_DefaultRateLimiter3(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy3(), exports);
    tslib_1.__exportStar(require_config6(), exports);
    tslib_1.__exportStar(require_configurations9(), exports);
    tslib_1.__exportStar(require_delayDecider3(), exports);
    tslib_1.__exportStar(require_omitRetryHeadersMiddleware3(), exports);
    tslib_1.__exportStar(require_retryDecider3(), exports);
    tslib_1.__exportStar(require_retryMiddleware3(), exports);
    tslib_1.__exportStar(require_types6(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js
var require_configurations10 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return {
        ...input,
        customUserAgent: typeof input.customUserAgent === 'string' ? [[input.customUserAgent]] : input.customUserAgent,
      };
    }
    exports.resolveUserAgentConfig = resolveUserAgentConfig;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js
var require_constants13 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UA_ESCAPE_REGEX = exports.SPACE = exports.X_AMZ_USER_AGENT = exports.USER_AGENT = void 0;
    exports.USER_AGENT = 'user-agent';
    exports.X_AMZ_USER_AGENT = 'x-amz-user-agent';
    exports.SPACE = ' ';
    exports.UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js
var require_user_agent_middleware3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getUserAgentPlugin = exports.getUserAgentMiddlewareOptions = exports.userAgentMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs55();
    var constants_1 = require_constants13();
    var userAgentMiddleware = (options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request)) return next(args);
      const { headers } = request;
      const userAgent =
        ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0
          ? void 0
          : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent =
        ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0
          ? void 0
          : _b.map(escapeUserAgent)) || [];
      const sdkUserAgentValue = [...defaultUserAgent, ...userAgent, ...customUserAgent].join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith('aws-sdk-')),
        ...customUserAgent,
      ].join(constants_1.SPACE);
      if (options.runtime !== 'browser') {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT]
            ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}`
            : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request,
      });
    };
    exports.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = ([name, version]) => {
      const prefixSeparatorIndex = name.indexOf('/');
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === 'api') {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version]
        .filter((item) => item && item.length > 0)
        .map((item) => (item === null || item === void 0 ? void 0 : item.replace(constants_1.UA_ESCAPE_REGEX, '_')))
        .join('/');
    };
    exports.getUserAgentMiddlewareOptions = {
      name: 'getUserAgentMiddleware',
      step: 'build',
      priority: 'low',
      tags: ['SET_USER_AGENT', 'USER_AGENT'],
      override: true,
    };
    var getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.userAgentMiddleware)(config), exports.getUserAgentMiddlewareOptions);
      },
    });
    exports.getUserAgentPlugin = getUserAgentPlugin;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs62 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_configurations10(), exports);
    tslib_1.__exportStar(require_user_agent_middleware3(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/package.json
var require_package3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/package.json'(exports, module2) {
    module2.exports = {
      name: '@aws-sdk/client-sso',
      description: 'AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native',
      version: '3.141.0',
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        'build:cjs': 'tsc -p tsconfig.cjs.json',
        'build:docs': 'typedoc',
        'build:es': 'tsc -p tsconfig.es.json',
        'build:types': 'tsc -p tsconfig.types.json',
        'build:types:downlevel': 'downlevel-dts dist-types dist-types/ts3.4',
        clean: 'rimraf ./dist-* && rimraf *.tsbuildinfo',
      },
      main: './dist-cjs/index.js',
      types: './dist-types/index.d.ts',
      module: './dist-es/index.js',
      sideEffects: false,
      dependencies: {
        '@aws-crypto/sha256-browser': '2.0.0',
        '@aws-crypto/sha256-js': '2.0.0',
        '@aws-sdk/config-resolver': '3.130.0',
        '@aws-sdk/fetch-http-handler': '3.131.0',
        '@aws-sdk/hash-node': '3.127.0',
        '@aws-sdk/invalid-dependency': '3.127.0',
        '@aws-sdk/middleware-content-length': '3.127.0',
        '@aws-sdk/middleware-host-header': '3.127.0',
        '@aws-sdk/middleware-logger': '3.127.0',
        '@aws-sdk/middleware-recursion-detection': '3.127.0',
        '@aws-sdk/middleware-retry': '3.127.0',
        '@aws-sdk/middleware-serde': '3.127.0',
        '@aws-sdk/middleware-stack': '3.127.0',
        '@aws-sdk/middleware-user-agent': '3.127.0',
        '@aws-sdk/node-config-provider': '3.127.0',
        '@aws-sdk/node-http-handler': '3.127.0',
        '@aws-sdk/protocol-http': '3.127.0',
        '@aws-sdk/smithy-client': '3.137.0',
        '@aws-sdk/types': '3.127.0',
        '@aws-sdk/url-parser': '3.127.0',
        '@aws-sdk/util-base64-browser': '3.109.0',
        '@aws-sdk/util-base64-node': '3.55.0',
        '@aws-sdk/util-body-length-browser': '3.55.0',
        '@aws-sdk/util-body-length-node': '3.55.0',
        '@aws-sdk/util-defaults-mode-browser': '3.137.0',
        '@aws-sdk/util-defaults-mode-node': '3.137.0',
        '@aws-sdk/util-user-agent-browser': '3.127.0',
        '@aws-sdk/util-user-agent-node': '3.127.0',
        '@aws-sdk/util-utf8-browser': '3.109.0',
        '@aws-sdk/util-utf8-node': '3.109.0',
        tslib: '^2.3.1',
      },
      devDependencies: {
        '@aws-sdk/service-client-documentation-generator': '3.58.0',
        '@tsconfig/recommended': '1.0.1',
        '@types/node': '^12.7.5',
        concurrently: '7.0.0',
        'downlevel-dts': '0.7.0',
        rimraf: '3.0.2',
        typedoc: '0.19.2',
        typescript: '~4.6.2',
      },
      engines: {
        node: '>=12.0.0',
      },
      typesVersions: {
        '<4.0': {
          'dist-types/*': ['dist-types/ts3.4/*'],
        },
      },
      files: ['dist-*'],
      author: {
        name: 'AWS SDK for JavaScript Team',
        url: 'https://aws.amazon.com/javascript/',
      },
      license: 'Apache-2.0',
      browser: {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.browser',
      },
      'react-native': {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.native',
      },
      homepage: 'https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso',
      repository: {
        type: 'git',
        url: 'https://github.com/aws/aws-sdk-js-v3.git',
        directory: 'clients/client-sso',
      },
    };
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js
var require_dist_cjs63 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromString = exports.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs21();
    var buffer_1 = require('buffer');
    var fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return buffer_1.Buffer.from(input, offset, length);
    };
    exports.fromArrayBuffer = fromArrayBuffer;
    var fromString = (input, encoding) => {
      if (typeof input !== 'string') {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
    };
    exports.fromString = fromString;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/hash-node/dist-cjs/index.js
var require_dist_cjs64 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/hash-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs63();
    var buffer_1 = require('buffer');
    var crypto_1 = require('crypto');
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.hash = secret
          ? (0, crypto_1.createHmac)(algorithmIdentifier, castSourceData(secret))
          : (0, crypto_1.createHash)(algorithmIdentifier);
      }
      update(toHash, encoding) {
        this.hash.update(castSourceData(toHash, encoding));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
    };
    exports.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === 'string') {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
    }
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js
var require_ProviderError5 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ProviderError = void 0;
    var ProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = 'ProviderError';
        Object.setPrototypeOf(this, ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports.ProviderError = ProviderError;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError5 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError5();
    var CredentialsProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = 'CredentialsProviderError';
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
      }
    };
    exports.CredentialsProviderError = CredentialsProviderError;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js
var require_chain5 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.chain = void 0;
    var ProviderError_1 = require_ProviderError5();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(new ProviderError_1.ProviderError('No providers in chain'));
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports.chain = chain;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js
var require_fromStatic6 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports.fromStatic = fromStatic;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js
var require_memoize5 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports.memoize = memoize;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/property-provider/dist-cjs/index.js
var require_dist_cjs65 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/property-provider/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_CredentialsProviderError5(), exports);
    tslib_1.__exportStar(require_ProviderError5(), exports);
    tslib_1.__exportStar(require_chain5(), exports);
    tslib_1.__exportStar(require_fromStatic6(), exports);
    tslib_1.__exportStar(require_memoize5(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js
var require_fromEnv3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs65();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(
          e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`
        );
      }
    };
    exports.fromEnv = fromEnv;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getHomeDir = void 0;
    var os_1 = require('os');
    var path_1 = require('path');
    var getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME) return HOME;
      if (USERPROFILE) return USERPROFILE;
      if (HOMEPATH) return `${HOMEDRIVE}${HOMEPATH}`;
      return (0, os_1.homedir)();
    };
    exports.getHomeDir = getHomeDir;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js
var require_getProfileName3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getProfileName = exports.DEFAULT_PROFILE = exports.ENV_PROFILE = void 0;
    exports.ENV_PROFILE = 'AWS_PROFILE';
    exports.DEFAULT_PROFILE = 'default';
    var getProfileName = (init) => init.profile || process.env[exports.ENV_PROFILE] || exports.DEFAULT_PROFILE;
    exports.getProfileName = getProfileName;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSSOTokenFilepath = void 0;
    var crypto_1 = require('crypto');
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir3();
    var getSSOTokenFilepath = (ssoStartUrl) => {
      const hasher = (0, crypto_1.createHash)('sha1');
      const cacheName = hasher.update(ssoStartUrl).digest('hex');
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'sso', 'cache', `${cacheName}.json`);
    };
    exports.getSSOTokenFilepath = getSSOTokenFilepath;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSSOTokenFromFile = void 0;
    var fs_1 = require('fs');
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath3();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (ssoStartUrl) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(ssoStartUrl);
      const ssoTokenText = await readFile(ssoTokenFilepath, 'utf8');
      return JSON.parse(ssoTokenText);
    };
    exports.getSSOTokenFromFile = getSSOTokenFromFile;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js
var require_getConfigFilepath3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getConfigFilepath = exports.ENV_CONFIG_PATH = void 0;
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir3();
    exports.ENV_CONFIG_PATH = 'AWS_CONFIG_FILE';
    var getConfigFilepath = () =>
      process.env[exports.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'config');
    exports.getConfigFilepath = getConfigFilepath;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js
var require_getCredentialsFilepath3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCredentialsFilepath = exports.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir3();
    exports.ENV_CREDENTIALS_PATH = 'AWS_SHARED_CREDENTIALS_FILE';
    var getCredentialsFilepath = () =>
      process.env[exports.ENV_CREDENTIALS_PATH] ||
      (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'credentials');
    exports.getCredentialsFilepath = getCredentialsFilepath;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js
var require_getProfileData3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getProfileData = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var getProfileData = (data) =>
      Object.entries(data)
        .filter(([key]) => profileKeyRegex.test(key))
        .reduce((acc, [key, value]) => ({ ...acc, [profileKeyRegex.exec(key)[2]]: value }), {
          ...(data.default && { default: data.default }),
        });
    exports.getProfileData = getProfileData;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js
var require_parseIni3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseIni = void 0;
    var profileNameBlockList = ['__proto__', 'profile __proto__'];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === '[' && line[line.length - 1] === ']';
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf('=');
          const start = 0;
          const end = line.length - 1;
          const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim(),
            ];
            map[currentSection] = map[currentSection] || {};
            map[currentSection][name] = value;
          }
        }
      }
      return map;
    };
    exports.parseIni = parseIni;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.slurpFile = void 0;
    var fs_1 = require('fs');
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path) => {
      if (!filePromisesHash[path]) {
        filePromisesHash[path] = readFile(path, 'utf8');
      }
      return filePromisesHash[path];
    };
    exports.slurpFile = slurpFile;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js
var require_loadSharedConfigFiles3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath3();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath3();
    var getProfileData_1 = require_getProfileData3();
    var parseIni_1 = require_parseIni3();
    var slurpFile_1 = require_slurpFile3();
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const {
        filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(),
        configFilepath = (0, getConfigFilepath_1.getConfigFilepath)(),
      } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath)
          .then(parseIni_1.parseIni)
          .then(getProfileData_1.getProfileData)
          .catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath).then(parseIni_1.parseIni).catch(swallowError),
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1],
      };
    };
    exports.loadSharedConfigFiles = loadSharedConfigFiles;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js
var require_parseKnownFiles3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles3();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return {
        ...parsedFiles.configFile,
        ...parsedFiles.credentialsFile,
      };
    };
    exports.parseKnownFiles = parseKnownFiles;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js
var require_types7 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs66 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_getHomeDir3(), exports);
    tslib_1.__exportStar(require_getProfileName3(), exports);
    tslib_1.__exportStar(require_getSSOTokenFilepath3(), exports);
    tslib_1.__exportStar(require_getSSOTokenFromFile3(), exports);
    tslib_1.__exportStar(require_loadSharedConfigFiles3(), exports);
    tslib_1.__exportStar(require_parseKnownFiles3(), exports);
    tslib_1.__exportStar(require_types7(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js
var require_fromSharedConfigFiles2 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs65();
    var shared_ini_file_loader_1 = require_dist_cjs66();
    var fromSharedConfigFiles =
      (configSelector, { preferredFile = 'config', ...init } = {}) =>
      async () => {
        const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
        const { configFile, credentialsFile } = await (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init);
        const profileFromCredentials = credentialsFile[profile] || {};
        const profileFromConfig = configFile[profile] || {};
        const mergedProfile =
          preferredFile === 'config'
            ? { ...profileFromCredentials, ...profileFromConfig }
            : { ...profileFromConfig, ...profileFromCredentials };
        try {
          const configValue = configSelector(mergedProfile);
          if (configValue === void 0) {
            throw new Error();
          }
          return configValue;
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(
            e.message ||
              `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`
          );
        }
      };
    exports.fromSharedConfigFiles = fromSharedConfigFiles;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js
var require_fromStatic7 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs65();
    var isFunction = (func) => typeof func === 'function';
    var fromStatic = (defaultValue) =>
      isFunction(defaultValue) ? async () => await defaultValue() : (0, property_provider_1.fromStatic)(defaultValue);
    exports.fromStatic = fromStatic;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js
var require_configLoader2 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs65();
    var fromEnv_1 = require_fromEnv3();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles2();
    var fromStatic_1 = require_fromStatic7();
    var loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) =>
      (0, property_provider_1.memoize)(
        (0, property_provider_1.chain)(
          (0, fromEnv_1.fromEnv)(environmentVariableSelector),
          (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(configFileSelector, configuration),
          (0, fromStatic_1.fromStatic)(defaultValue)
        )
      );
    exports.loadConfig = loadConfig;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js
var require_dist_cjs67 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_configLoader2(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js
var require_escape_uri4 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.escapeUri = void 0;
    var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports.escapeUri = escapeUri;
    var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js
var require_escape_uri_path4 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri4();
    var escapeUriPath = (uri) => uri.split('/').map(escape_uri_1.escapeUri).join('/');
    exports.escapeUriPath = escapeUriPath;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js
var require_dist_cjs68 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_escape_uri4(), exports);
    tslib_1.__exportStar(require_escape_uri_path4(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js
var require_dist_cjs69 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs68();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, util_uri_escape_1.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === 'string') {
            qsEntry += `=${(0, util_uri_escape_1.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join('&');
    }
    exports.buildQueryString = buildQueryString;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js
var require_constants14 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports.NODEJS_TIMEOUT_ERROR_CODES = ['ECONNRESET', 'EPIPE', 'ETIMEDOUT'];
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js
var require_get_transformed_headers = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getTransformedHeaders = void 0;
    var getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(',') : headerValues;
      }
      return transformedHeaders;
    };
    exports.getTransformedHeaders = getTransformedHeaders;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js
var require_set_connection_timeout = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.setConnectionTimeout = void 0;
    var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      request.on('socket', (socket) => {
        if (socket.connecting) {
          const timeoutId = setTimeout(() => {
            request.destroy();
            reject(
              Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
                name: 'TimeoutError',
              })
            );
          }, timeoutInMs);
          socket.on('connect', () => {
            clearTimeout(timeoutId);
          });
        }
      });
    };
    exports.setConnectionTimeout = setConnectionTimeout;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js
var require_set_socket_timeout = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.setSocketTimeout = void 0;
    var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: 'TimeoutError' }));
      });
    };
    exports.setSocketTimeout = setSocketTimeout;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js
var require_write_request_body = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.writeRequestBody = void 0;
    var stream_1 = require('stream');
    function writeRequestBody(httpRequest, request) {
      const expect = request.headers['Expect'] || request.headers['expect'];
      if (expect === '100-continue') {
        httpRequest.on('continue', () => {
          writeBody(httpRequest, request.body);
        });
      } else {
        writeBody(httpRequest, request.body);
      }
    }
    exports.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest);
      } else if (body) {
        httpRequest.end(Buffer.from(body));
      } else {
        httpRequest.end();
      }
    }
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js
var require_node_http_handler = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NodeHttpHandler = void 0;
    var protocol_http_1 = require_dist_cjs55();
    var querystring_builder_1 = require_dist_cjs69();
    var http_1 = require('http');
    var https_1 = require('https');
    var constants_1 = require_constants14();
    var get_transformed_headers_1 = require_get_transformed_headers();
    var set_connection_timeout_1 = require_set_connection_timeout();
    var set_socket_timeout_1 = require_set_socket_timeout();
    var write_request_body_1 = require_write_request_body();
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: 'http/1.1' };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === 'function') {
            options()
              .then((_options) => {
                resolve(this.resolveDefaultConfig(_options));
              })
              .catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent: httpsAgent || new https_1.Agent({ keepAlive, maxSockets }),
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0
          ? void 0
          : _b.destroy();
        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0
          ? void 0
          : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((resolve, reject) => {
          if (!this.config) {
            throw new Error('Node HTTP request handler config is not resolved');
          }
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error('Request aborted');
            abortError.name = 'AbortError';
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === 'https:';
          const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path: queryString ? `${request.path}?${queryString}` : request.path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent,
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),
              body: res,
            });
            resolve({ response: httpResponse });
          });
          req.on('error', (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: 'TimeoutError' }));
            } else {
              reject(err);
            }
          });
          (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);
          (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.socketTimeout);
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error('Request aborted');
              abortError.name = 'AbortError';
              reject(abortError);
            };
          }
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
    };
    exports.NodeHttpHandler = NodeHttpHandler;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js
var require_node_http2_handler = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs55();
    var querystring_builder_1 = require_dist_cjs69();
    var http2_1 = require('http2');
    var get_transformed_headers_1 = require_get_transformed_headers();
    var write_request_body_1 = require_write_request_body();
    var NodeHttp2Handler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: 'h2' };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === 'function') {
            options()
              .then((opts) => {
                resolve(opts || {});
              })
              .catch(reject);
          } else {
            resolve(options || {});
          }
        });
        this.sessionCache = /* @__PURE__ */ new Map();
      }
      destroy() {
        for (const sessions of this.sessionCache.values()) {
          sessions.forEach((session) => this.destroySession(session));
        }
        this.sessionCache.clear();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((resolve, rejectOriginal) => {
          let fulfilled = false;
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error('Request aborted');
            abortError.name = 'AbortError';
            rejectOriginal(abortError);
            return;
          }
          const { hostname, method, port, protocol, path, query } = request;
          const authority = `${protocol}//${hostname}${port ? `:${port}` : ''}`;
          const session = this.getSession(authority, disableConcurrentStreams || false);
          const reject = (err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            rejectOriginal(err);
          };
          const queryString = (0, querystring_builder_1.buildQueryString)(query || {});
          const req = session.request({
            ...request.headers,
            [http2_1.constants.HTTP2_HEADER_PATH]: queryString ? `${path}?${queryString}` : path,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method,
          });
          session.ref();
          req.on('response', (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[':status'] || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),
              body: req,
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.deleteSessionFromCache(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = 'TimeoutError';
              reject(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error('Request aborted');
              abortError.name = 'AbortError';
              reject(abortError);
            };
          }
          req.on('frameError', (type, code, id) => {
            reject(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on('error', reject);
          req.on('aborted', () => {
            reject(
              new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`)
            );
          });
          req.on('close', () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              reject(new Error('Unexpected error: http2 request did not get a response'));
            }
          });
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
      getSession(authority, disableConcurrentStreams) {
        var _a;
        const sessionCache = this.sessionCache;
        const existingSessions = sessionCache.get(authority) || [];
        if (existingSessions.length > 0 && !disableConcurrentStreams) return existingSessions[0];
        const newSession = (0, http2_1.connect)(authority);
        newSession.unref();
        const destroySessionCb = () => {
          this.destroySession(newSession);
          this.deleteSessionFromCache(authority, newSession);
        };
        newSession.on('goaway', destroySessionCb);
        newSession.on('error', destroySessionCb);
        newSession.on('frameError', destroySessionCb);
        newSession.on('close', () => this.deleteSessionFromCache(authority, newSession));
        if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.sessionTimeout) {
          newSession.setTimeout(this.config.sessionTimeout, destroySessionCb);
        }
        existingSessions.push(newSession);
        sessionCache.set(authority, existingSessions);
        return newSession;
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
      deleteSessionFromCache(authority, session) {
        const existingSessions = this.sessionCache.get(authority) || [];
        if (!existingSessions.includes(session)) {
          return;
        }
        this.sessionCache.set(
          authority,
          existingSessions.filter((s) => s !== session)
        );
      }
    };
    exports.NodeHttp2Handler = NodeHttp2Handler;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js
var require_collector = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Collector = void 0;
    var stream_1 = require('stream');
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    exports.Collector = Collector;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js
var require_stream_collector = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.streamCollector = void 0;
    var collector_1 = require_collector();
    var streamCollector = (stream) =>
      new Promise((resolve, reject) => {
        const collector = new collector_1.Collector();
        stream.pipe(collector);
        stream.on('error', (err) => {
          collector.end();
          reject(err);
        });
        collector.on('error', reject);
        collector.on('finish', function () {
          const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
          resolve(bytes);
        });
      });
    exports.streamCollector = streamCollector;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js
var require_dist_cjs70 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_node_http_handler(), exports);
    tslib_1.__exportStar(require_node_http2_handler(), exports);
    tslib_1.__exportStar(require_stream_collector(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-base64-node/dist-cjs/index.js
var require_dist_cjs71 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-base64-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toBase64 = exports.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs63();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    function fromBase64(input) {
      if ((input.length * 3) % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, 'base64');
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    }
    exports.fromBase64 = fromBase64;
    function toBase64(input) {
      return (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString(
        'base64'
      );
    }
    exports.toBase64 = toBase64;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js
var require_calculateBodyLength = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.calculateBodyLength = void 0;
    var fs_1 = require('fs');
    var calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === 'string') {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === 'number') {
        return body.byteLength;
      } else if (typeof body.size === 'number') {
        return body.size;
      } else if (typeof body.path === 'string' || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
      } else if (typeof body.fd === 'number') {
        return (0, fs_1.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
    exports.calculateBodyLength = calculateBodyLength;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js
var require_dist_cjs72 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_calculateBodyLength(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js
var require_is_crt_available = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js'(
    exports,
    module2
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isCrtAvailable = void 0;
    var isCrtAvailable = () => {
      try {
        if (typeof require === 'function' && typeof module2 !== 'undefined' && module2.require && require('aws-crt')) {
          return ['md/crt-avail'];
        }
        return null;
      } catch (e) {
        return null;
      }
    };
    exports.isCrtAvailable = isCrtAvailable;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs73 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultUserAgent = exports.UA_APP_ID_INI_NAME = exports.UA_APP_ID_ENV_NAME = void 0;
    var node_config_provider_1 = require_dist_cjs67();
    var os_1 = require('os');
    var process_1 = require('process');
    var is_crt_available_1 = require_is_crt_available();
    exports.UA_APP_ID_ENV_NAME = 'AWS_SDK_UA_APP_ID';
    exports.UA_APP_ID_INI_NAME = 'sdk-ua-app-id';
    var defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ['aws-sdk-js', clientVersion],
        [`os/${(0, os_1.platform)()}`, (0, os_1.release)()],
        ['lang/js'],
        ['md/nodejs', `${process_1.versions.node}`],
      ];
      const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env2) => env2[exports.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports.UA_APP_ID_INI_NAME],
        default: void 0,
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    };
    exports.defaultUserAgent = defaultUserAgent;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js
var require_dist_cjs74 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toUtf8 = exports.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs63();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, 'utf8');
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
    exports.fromUtf8 = fromUtf8;
    var toUtf8 = (input) =>
      (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString('utf8');
    exports.toUtf8 = toUtf8;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js
var require_dist_cjs75 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, '');
      if (querystring) {
        for (const pair of querystring.split('&')) {
          let [key, value = null] = pair.split('=');
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports.parseQueryString = parseQueryString;
  },
});

// node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/url-parser/dist-cjs/index.js
var require_dist_cjs76 = __commonJS({
  'node_modules/@aws-sdk/client-sso/node_modules/@aws-sdk/url-parser/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs75();
    var parseUrl = (url) => {
      const { hostname, pathname, port, protocol, search } = new URL(url);
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query,
      };
    };
    exports.parseUrl = parseUrl;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoints.js
var require_endpoints = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/endpoints.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultRegionInfoProvider = void 0;
    var config_resolver_1 = require_dist_cjs56();
    var regionHash = {
      'ap-east-1': {
        variants: [
          {
            hostname: 'portal.sso.ap-east-1.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'ap-east-1',
      },
      'ap-northeast-1': {
        variants: [
          {
            hostname: 'portal.sso.ap-northeast-1.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'ap-northeast-1',
      },
      'ap-northeast-2': {
        variants: [
          {
            hostname: 'portal.sso.ap-northeast-2.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'ap-northeast-2',
      },
      'ap-northeast-3': {
        variants: [
          {
            hostname: 'portal.sso.ap-northeast-3.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'ap-northeast-3',
      },
      'ap-south-1': {
        variants: [
          {
            hostname: 'portal.sso.ap-south-1.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'ap-south-1',
      },
      'ap-southeast-1': {
        variants: [
          {
            hostname: 'portal.sso.ap-southeast-1.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'ap-southeast-1',
      },
      'ap-southeast-2': {
        variants: [
          {
            hostname: 'portal.sso.ap-southeast-2.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'ap-southeast-2',
      },
      'ca-central-1': {
        variants: [
          {
            hostname: 'portal.sso.ca-central-1.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'ca-central-1',
      },
      'eu-central-1': {
        variants: [
          {
            hostname: 'portal.sso.eu-central-1.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'eu-central-1',
      },
      'eu-north-1': {
        variants: [
          {
            hostname: 'portal.sso.eu-north-1.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'eu-north-1',
      },
      'eu-south-1': {
        variants: [
          {
            hostname: 'portal.sso.eu-south-1.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'eu-south-1',
      },
      'eu-west-1': {
        variants: [
          {
            hostname: 'portal.sso.eu-west-1.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'eu-west-1',
      },
      'eu-west-2': {
        variants: [
          {
            hostname: 'portal.sso.eu-west-2.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'eu-west-2',
      },
      'eu-west-3': {
        variants: [
          {
            hostname: 'portal.sso.eu-west-3.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'eu-west-3',
      },
      'me-south-1': {
        variants: [
          {
            hostname: 'portal.sso.me-south-1.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'me-south-1',
      },
      'sa-east-1': {
        variants: [
          {
            hostname: 'portal.sso.sa-east-1.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'sa-east-1',
      },
      'us-east-1': {
        variants: [
          {
            hostname: 'portal.sso.us-east-1.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'us-east-1',
      },
      'us-east-2': {
        variants: [
          {
            hostname: 'portal.sso.us-east-2.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'us-east-2',
      },
      'us-gov-east-1': {
        variants: [
          {
            hostname: 'portal.sso.us-gov-east-1.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'us-gov-east-1',
      },
      'us-gov-west-1': {
        variants: [
          {
            hostname: 'portal.sso.us-gov-west-1.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'us-gov-west-1',
      },
      'us-west-2': {
        variants: [
          {
            hostname: 'portal.sso.us-west-2.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'us-west-2',
      },
    };
    var partitionHash = {
      aws: {
        regions: [
          'af-south-1',
          'ap-east-1',
          'ap-northeast-1',
          'ap-northeast-2',
          'ap-northeast-3',
          'ap-south-1',
          'ap-southeast-1',
          'ap-southeast-2',
          'ap-southeast-3',
          'ca-central-1',
          'eu-central-1',
          'eu-north-1',
          'eu-south-1',
          'eu-west-1',
          'eu-west-2',
          'eu-west-3',
          'me-south-1',
          'sa-east-1',
          'us-east-1',
          'us-east-2',
          'us-west-1',
          'us-west-2',
        ],
        regionRegex: '^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$',
        variants: [
          {
            hostname: 'portal.sso.{region}.amazonaws.com',
            tags: [],
          },
          {
            hostname: 'portal.sso-fips.{region}.amazonaws.com',
            tags: ['fips'],
          },
          {
            hostname: 'portal.sso-fips.{region}.api.aws',
            tags: ['dualstack', 'fips'],
          },
          {
            hostname: 'portal.sso.{region}.api.aws',
            tags: ['dualstack'],
          },
        ],
      },
      'aws-cn': {
        regions: ['cn-north-1', 'cn-northwest-1'],
        regionRegex: '^cn\\-\\w+\\-\\d+$',
        variants: [
          {
            hostname: 'portal.sso.{region}.amazonaws.com.cn',
            tags: [],
          },
          {
            hostname: 'portal.sso-fips.{region}.amazonaws.com.cn',
            tags: ['fips'],
          },
          {
            hostname: 'portal.sso-fips.{region}.api.amazonwebservices.com.cn',
            tags: ['dualstack', 'fips'],
          },
          {
            hostname: 'portal.sso.{region}.api.amazonwebservices.com.cn',
            tags: ['dualstack'],
          },
        ],
      },
      'aws-iso': {
        regions: ['us-iso-east-1', 'us-iso-west-1'],
        regionRegex: '^us\\-iso\\-\\w+\\-\\d+$',
        variants: [
          {
            hostname: 'portal.sso.{region}.c2s.ic.gov',
            tags: [],
          },
          {
            hostname: 'portal.sso-fips.{region}.c2s.ic.gov',
            tags: ['fips'],
          },
        ],
      },
      'aws-iso-b': {
        regions: ['us-isob-east-1'],
        regionRegex: '^us\\-isob\\-\\w+\\-\\d+$',
        variants: [
          {
            hostname: 'portal.sso.{region}.sc2s.sgov.gov',
            tags: [],
          },
          {
            hostname: 'portal.sso-fips.{region}.sc2s.sgov.gov',
            tags: ['fips'],
          },
        ],
      },
      'aws-us-gov': {
        regions: ['us-gov-east-1', 'us-gov-west-1'],
        regionRegex: '^us\\-gov\\-\\w+\\-\\d+$',
        variants: [
          {
            hostname: 'portal.sso.{region}.amazonaws.com',
            tags: [],
          },
          {
            hostname: 'portal.sso-fips.{region}.amazonaws.com',
            tags: ['fips'],
          },
          {
            hostname: 'portal.sso-fips.{region}.api.aws',
            tags: ['dualstack', 'fips'],
          },
          {
            hostname: 'portal.sso.{region}.api.aws',
            tags: ['dualstack'],
          },
        ],
      },
    };
    var defaultRegionInfoProvider = async (region, options) =>
      (0, config_resolver_1.getRegionInfo)(region, {
        ...options,
        signingService: 'awsssoportal',
        regionHash,
        partitionHash,
      });
    exports.defaultRegionInfoProvider = defaultRegionInfoProvider;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs76();
    var endpoints_1 = require_endpoints();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e;
      return {
        apiVersion: '2019-06-10',
        disableHostPrefix:
          (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0
            ? _a
            : false,
        logger:
          (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider:
          (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0
            ? _c
            : endpoints_1.defaultRegionInfoProvider,
        serviceId:
          (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0
            ? _d
            : 'SSO',
        urlParser:
          (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0
            ? _e
            : url_parser_1.parseUrl,
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/tslib/tslib.js
var require_tslib13 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/tslib/tslib.js'(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function (factory) {
      var root =
        typeof global === 'object' ? global : typeof self === 'object' ? self : typeof this === 'object' ? this : {};
      if (typeof define === 'function' && define.amd) {
        define('tslib', ['exports'], function (exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === 'object' && typeof module2.exports === 'object') {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === 'function') {
            Object.defineProperty(exports2, '__esModule', { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function (id, v) {
          return (exports2[id] = previous ? previous(id, v) : v);
        };
      }
    })(function (exporter) {
      var extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      __extends = function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
      __assign =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function (decorators, target, key, desc) {
        var c = arguments.length,
          r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
          d;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function (thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g;
        return (
          (g = { next: verb(0), throw: verb(1), return: verb(2) }),
          typeof Symbol === 'function' &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError('Generator is already executing.');
          while (_)
            try {
              if (
                ((f = 1),
                y &&
                  (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function (m, o) {
        for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
      };
      __createBinding = Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          };
      __values = function (o) {
        var s = typeof Symbol === 'function' && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === 'number')
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            },
          };
        throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      };
      __read = function (o, n) {
        var m = typeof Symbol === 'function' && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i['return'])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
        return r;
      };
      __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function (v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      };
      __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = {}),
          verb('next'),
          verb('throw'),
          verb('return'),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        function verb(n) {
          if (g[n])
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume('next', value);
        }
        function reject(value) {
          resume('throw', value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function (o) {
        var i, p;
        return (
          (i = {}),
          verb('next'),
          verb('throw', function (e) {
            throw e;
          }),
          verb('return'),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p) ? { value: __await(o[n](v)), done: n === 'return' } : f ? f(v) : v;
              }
            : f;
        }
      };
      __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, 'raw', { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          };
      __importStar = function (mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      __importDefault = function (mod2) {
        return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
      };
      __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot read private member from an object whose class did not declare it');
        return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot write private member to an object whose class did not declare it');
        return kind === 'a' ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== 'object' && typeof receiver !== 'function'))
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === 'function' ? receiver === state : state.has(receiver);
      };
      exporter('__extends', __extends);
      exporter('__assign', __assign);
      exporter('__rest', __rest);
      exporter('__decorate', __decorate);
      exporter('__param', __param);
      exporter('__metadata', __metadata);
      exporter('__awaiter', __awaiter);
      exporter('__generator', __generator);
      exporter('__exportStar', __exportStar);
      exporter('__createBinding', __createBinding);
      exporter('__values', __values);
      exporter('__read', __read);
      exporter('__spread', __spread);
      exporter('__spreadArrays', __spreadArrays);
      exporter('__spreadArray', __spreadArray);
      exporter('__await', __await);
      exporter('__asyncGenerator', __asyncGenerator);
      exporter('__asyncDelegator', __asyncDelegator);
      exporter('__asyncValues', __asyncValues);
      exporter('__makeTemplateObject', __makeTemplateObject);
      exporter('__importStar', __importStar);
      exporter('__importDefault', __importDefault);
      exporter('__classPrivateFieldGet', __classPrivateFieldGet);
      exporter('__classPrivateFieldSet', __classPrivateFieldSet);
      exporter('__classPrivateFieldIn', __classPrivateFieldIn);
    });
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var require_NodeUseDualstackEndpointConfigOptions4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS =
      exports.DEFAULT_USE_DUALSTACK_ENDPOINT =
      exports.CONFIG_USE_DUALSTACK_ENDPOINT =
      exports.ENV_USE_DUALSTACK_ENDPOINT =
        void 0;
    var util_config_provider_1 = require_dist_cjs5();
    exports.ENV_USE_DUALSTACK_ENDPOINT = 'AWS_USE_DUALSTACK_ENDPOINT';
    exports.CONFIG_USE_DUALSTACK_ENDPOINT = 'use_dualstack_endpoint';
    exports.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) =>
        (0, util_config_provider_1.booleanSelector)(
          env2,
          exports.ENV_USE_DUALSTACK_ENDPOINT,
          util_config_provider_1.SelectorType.ENV
        ),
      configFileSelector: (profile) =>
        (0, util_config_provider_1.booleanSelector)(
          profile,
          exports.CONFIG_USE_DUALSTACK_ENDPOINT,
          util_config_provider_1.SelectorType.CONFIG
        ),
      default: false,
    };
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var require_NodeUseFipsEndpointConfigOptions4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS =
      exports.DEFAULT_USE_FIPS_ENDPOINT =
      exports.CONFIG_USE_FIPS_ENDPOINT =
      exports.ENV_USE_FIPS_ENDPOINT =
        void 0;
    var util_config_provider_1 = require_dist_cjs5();
    exports.ENV_USE_FIPS_ENDPOINT = 'AWS_USE_FIPS_ENDPOINT';
    exports.CONFIG_USE_FIPS_ENDPOINT = 'use_fips_endpoint';
    exports.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) =>
        (0, util_config_provider_1.booleanSelector)(
          env2,
          exports.ENV_USE_FIPS_ENDPOINT,
          util_config_provider_1.SelectorType.ENV
        ),
      configFileSelector: (profile) =>
        (0, util_config_provider_1.booleanSelector)(
          profile,
          exports.CONFIG_USE_FIPS_ENDPOINT,
          util_config_provider_1.SelectorType.CONFIG
        ),
      default: false,
    };
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js
var require_resolveCustomEndpointsConfig4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveCustomEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var resolveCustomEndpointsConfig = (input) => {
      var _a;
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(
          typeof endpoint === 'string' ? urlParser(endpoint) : endpoint
        ),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)(input.useDualstackEndpoint),
      };
    };
    exports.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js
var require_getEndpointFromRegion4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error('Invalid region in client config');
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } =
        (_a = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) !== null &&
        _a !== void 0
          ? _a
          : {};
      if (!hostname) {
        throw new Error('Cannot resolve hostname from client config');
      }
      return input.urlParser(`${tls ? 'https:' : 'http:'}//${hostname}`);
    };
    exports.getEndpointFromRegion = getEndpointFromRegion;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js
var require_resolveEndpointsConfig4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var getEndpointFromRegion_1 = require_getEndpointFromRegion4();
    var resolveEndpointsConfig = (input) => {
      var _a;
      const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)(input.useDualstackEndpoint);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: endpoint
          ? (0, util_middleware_1.normalizeProvider)(typeof endpoint === 'string' ? urlParser(endpoint) : endpoint)
          : () =>
              (0, getEndpointFromRegion_1.getEndpointFromRegion)({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: endpoint ? true : false,
        useDualstackEndpoint,
      };
    };
    exports.resolveEndpointsConfig = resolveEndpointsConfig;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js
var require_endpointsConfig4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib13();
    tslib_1.__exportStar(require_NodeUseDualstackEndpointConfigOptions4(), exports);
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions4(), exports);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig4(), exports);
    tslib_1.__exportStar(require_resolveEndpointsConfig4(), exports);
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js
var require_config7 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_REGION_CONFIG_FILE_OPTIONS =
      exports.NODE_REGION_CONFIG_OPTIONS =
      exports.REGION_INI_NAME =
      exports.REGION_ENV_NAME =
        void 0;
    exports.REGION_ENV_NAME = 'AWS_REGION';
    exports.REGION_INI_NAME = 'region';
    exports.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[exports.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports.REGION_INI_NAME],
      default: () => {
        throw new Error('Region is missing');
      },
    };
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: 'credentials',
    };
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js
var require_isFipsRegion4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isFipsRegion = void 0;
    var isFipsRegion = (region) =>
      typeof region === 'string' && (region.startsWith('fips-') || region.endsWith('-fips'));
    exports.isFipsRegion = isFipsRegion;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js
var require_getRealRegion4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion4();
    var getRealRegion = (region) =>
      (0, isFipsRegion_1.isFipsRegion)(region)
        ? ['fips-aws-global', 'aws-fips'].includes(region)
          ? 'us-east-1'
          : region.replace(/fips-(dkr-|prod-)?|-fips/, '')
        : region;
    exports.getRealRegion = getRealRegion;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js
var require_resolveRegionConfig4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion4();
    var isFipsRegion_1 = require_isFipsRegion4();
    var resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error('Region is missing');
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === 'string') {
            return (0, getRealRegion_1.getRealRegion)(region);
          }
          const providedRegion = await region();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === 'string' ? region : await region();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint === 'boolean' ? Promise.resolve(useFipsEndpoint) : useFipsEndpoint();
        },
      };
    };
    exports.resolveRegionConfig = resolveRegionConfig;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js
var require_regionConfig4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib13();
    tslib_1.__exportStar(require_config7(), exports);
    tslib_1.__exportStar(require_resolveRegionConfig4(), exports);
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js
var require_PartitionHash4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js
var require_RegionHash4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js
var require_getHostnameFromVariants4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(
        ({ tags }) => useFipsEndpoint === tags.includes('fips') && useDualstackEndpoint === tags.includes('dualstack')
      )) === null || _a === void 0
        ? void 0
        : _a.hostname;
    };
    exports.getHostnameFromVariants = getHostnameFromVariants;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js
var require_getResolvedHostname4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getResolvedHostname = void 0;
    var getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) =>
      regionHostname
        ? regionHostname
        : partitionHostname
        ? partitionHostname.replace('{region}', resolvedRegion)
        : void 0;
    exports.getResolvedHostname = getResolvedHostname;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js
var require_getResolvedPartition4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getResolvedPartition = void 0;
    var getResolvedPartition = (region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region))) !==
        null && _a !== void 0
        ? _a
        : 'aws';
    };
    exports.getResolvedPartition = getResolvedPartition;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js
var require_getResolvedSigningRegion4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace('\\\\', '\\').replace(/^\^/g, '\\.').replace(/\$$/g, '\\.');
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    };
    exports.getResolvedSigningRegion = getResolvedSigningRegion;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js
var require_getRegionInfo4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants4();
    var getResolvedHostname_1 = require_getResolvedHostname4();
    var getResolvedPartition_1 = require_getResolvedPartition4();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion4();
    var getRegionInfo = (
      region,
      { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash }
    ) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = (0, getResolvedPartition_1.getResolvedPartition)(region, { partitionHash });
      const resolvedRegion =
        region in regionHash
          ? region
          : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null &&
            _b !== void 0
          ? _b
          : region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)(
        (_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants,
        hostnameOptions
      );
      const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)(
        (_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants,
        hostnameOptions
      );
      const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, {
        regionHostname,
        partitionHostname,
      });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint,
      });
      return {
        partition,
        signingService,
        hostname,
        ...(signingRegion && { signingRegion }),
        ...(((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {
          signingService: regionHash[resolvedRegion].signingService,
        }),
      };
    };
    exports.getRegionInfo = getRegionInfo;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js
var require_regionInfo4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib13();
    tslib_1.__exportStar(require_PartitionHash4(), exports);
    tslib_1.__exportStar(require_RegionHash4(), exports);
    tslib_1.__exportStar(require_getRegionInfo4(), exports);
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/index.js
var require_dist_cjs77 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/config-resolver/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib13();
    tslib_1.__exportStar(require_endpointsConfig4(), exports);
    tslib_1.__exportStar(require_regionConfig4(), exports);
    tslib_1.__exportStar(require_regionInfo4(), exports);
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js
var require_ProviderError6 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ProviderError = void 0;
    var ProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = 'ProviderError';
        Object.setPrototypeOf(this, ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports.ProviderError = ProviderError;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError6 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError6();
    var CredentialsProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = 'CredentialsProviderError';
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
      }
    };
    exports.CredentialsProviderError = CredentialsProviderError;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js
var require_chain6 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.chain = void 0;
    var ProviderError_1 = require_ProviderError6();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(new ProviderError_1.ProviderError('No providers in chain'));
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports.chain = chain;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js
var require_fromStatic8 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports.fromStatic = fromStatic;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js
var require_memoize6 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports.memoize = memoize;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/property-provider/dist-cjs/index.js
var require_dist_cjs78 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/property-provider/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib13();
    tslib_1.__exportStar(require_CredentialsProviderError6(), exports);
    tslib_1.__exportStar(require_ProviderError6(), exports);
    tslib_1.__exportStar(require_chain6(), exports);
    tslib_1.__exportStar(require_fromStatic8(), exports);
    tslib_1.__exportStar(require_memoize6(), exports);
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js
var require_httpRequest8 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs78();
    var buffer_1 = require('buffer');
    var http_1 = require('http');
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, http_1.request)({
          method: 'GET',
          ...options,
          hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\[(.+)\]$/, '$1'),
        });
        req.on('error', (err) => {
          reject(
            Object.assign(new property_provider_1.ProviderError('Unable to connect to instance metadata service'), err)
          );
          req.destroy();
        });
        req.on('timeout', () => {
          reject(new property_provider_1.ProviderError('TimeoutError from instance metadata service'));
          req.destroy();
        });
        req.on('response', (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(
              Object.assign(
                new property_provider_1.ProviderError('Error response received from instance metadata service'),
                { statusCode }
              )
            );
            req.destroy();
          }
          const chunks = [];
          res.on('data', (chunk) => {
            chunks.push(chunk);
          });
          res.on('end', () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    exports.httpRequest = httpRequest;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js
var require_ImdsCredentials2 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromImdsCredentials = exports.isImdsCredentials = void 0;
    var isImdsCredentials = (arg) =>
      Boolean(arg) &&
      typeof arg === 'object' &&
      typeof arg.AccessKeyId === 'string' &&
      typeof arg.SecretAccessKey === 'string' &&
      typeof arg.Token === 'string' &&
      typeof arg.Expiration === 'string';
    exports.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration),
    });
    exports.fromImdsCredentials = fromImdsCredentials;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js
var require_RemoteProviderInit2 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.providerConfigFromInit = exports.DEFAULT_MAX_RETRIES = exports.DEFAULT_TIMEOUT = void 0;
    exports.DEFAULT_TIMEOUT = 1e3;
    exports.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = ({ maxRetries = exports.DEFAULT_MAX_RETRIES, timeout = exports.DEFAULT_TIMEOUT }) => ({
      maxRetries,
      timeout,
    });
    exports.providerConfigFromInit = providerConfigFromInit;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js
var require_retry2 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.retry = void 0;
    var retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
    exports.retry = retry;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js
var require_fromContainerMetadata2 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromContainerMetadata =
      exports.ENV_CMDS_AUTH_TOKEN =
      exports.ENV_CMDS_RELATIVE_URI =
      exports.ENV_CMDS_FULL_URI =
        void 0;
    var property_provider_1 = require_dist_cjs78();
    var url_1 = require('url');
    var httpRequest_1 = require_httpRequest8();
    var ImdsCredentials_1 = require_ImdsCredentials2();
    var RemoteProviderInit_1 = require_RemoteProviderInit2();
    var retry_1 = require_retry2();
    exports.ENV_CMDS_FULL_URI = 'AWS_CONTAINER_CREDENTIALS_FULL_URI';
    exports.ENV_CMDS_RELATIVE_URI = 'AWS_CONTAINER_CREDENTIALS_RELATIVE_URI';
    exports.ENV_CMDS_AUTH_TOKEN = 'AWS_CONTAINER_AUTHORIZATION_TOKEN';
    var fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      return () =>
        (0, retry_1.retry)(async () => {
          const requestOptions = await getCmdsUri();
          const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
          if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
            throw new property_provider_1.CredentialsProviderError(
              'Invalid response received from instance metadata service.'
            );
          }
          return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
        }, maxRetries);
    };
    exports.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = async (timeout, options) => {
      if (process.env[exports.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[exports.ENV_CMDS_AUTH_TOKEN],
        };
      }
      const buffer = await (0, httpRequest_1.httpRequest)({
        ...options,
        timeout,
      });
      return buffer.toString();
    };
    var CMDS_IP = '169.254.170.2';
    var GREENGRASS_HOSTS = {
      localhost: true,
      '127.0.0.1': true,
    };
    var GREENGRASS_PROTOCOLS = {
      'http:': true,
      'https:': true,
    };
    var getCmdsUri = async () => {
      if (process.env[exports.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports.ENV_CMDS_RELATIVE_URI],
        };
      }
      if (process.env[exports.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(
            `${parsed.hostname} is not a valid container metadata service hostname`,
            false
          );
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(
            `${parsed.protocol} is not a valid container metadata service protocol`,
            false
          );
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0,
        };
      }
      throw new property_provider_1.CredentialsProviderError(
        `The container metadata credential provider cannot be used unless the ${exports.ENV_CMDS_RELATIVE_URI} or ${exports.ENV_CMDS_FULL_URI} environment variable is set`,
        false
      );
    };
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js
var require_fromEnv4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs78();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(
          e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`
        );
      }
    };
    exports.fromEnv = fromEnv;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getHomeDir = void 0;
    var os_1 = require('os');
    var path_1 = require('path');
    var getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME) return HOME;
      if (USERPROFILE) return USERPROFILE;
      if (HOMEPATH) return `${HOMEDRIVE}${HOMEPATH}`;
      return (0, os_1.homedir)();
    };
    exports.getHomeDir = getHomeDir;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js
var require_getProfileName4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getProfileName = exports.DEFAULT_PROFILE = exports.ENV_PROFILE = void 0;
    exports.ENV_PROFILE = 'AWS_PROFILE';
    exports.DEFAULT_PROFILE = 'default';
    var getProfileName = (init) => init.profile || process.env[exports.ENV_PROFILE] || exports.DEFAULT_PROFILE;
    exports.getProfileName = getProfileName;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSSOTokenFilepath = void 0;
    var crypto_1 = require('crypto');
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir4();
    var getSSOTokenFilepath = (ssoStartUrl) => {
      const hasher = (0, crypto_1.createHash)('sha1');
      const cacheName = hasher.update(ssoStartUrl).digest('hex');
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'sso', 'cache', `${cacheName}.json`);
    };
    exports.getSSOTokenFilepath = getSSOTokenFilepath;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSSOTokenFromFile = void 0;
    var fs_1 = require('fs');
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath4();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (ssoStartUrl) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(ssoStartUrl);
      const ssoTokenText = await readFile(ssoTokenFilepath, 'utf8');
      return JSON.parse(ssoTokenText);
    };
    exports.getSSOTokenFromFile = getSSOTokenFromFile;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js
var require_getConfigFilepath4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getConfigFilepath = exports.ENV_CONFIG_PATH = void 0;
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir4();
    exports.ENV_CONFIG_PATH = 'AWS_CONFIG_FILE';
    var getConfigFilepath = () =>
      process.env[exports.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'config');
    exports.getConfigFilepath = getConfigFilepath;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js
var require_getCredentialsFilepath4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCredentialsFilepath = exports.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir4();
    exports.ENV_CREDENTIALS_PATH = 'AWS_SHARED_CREDENTIALS_FILE';
    var getCredentialsFilepath = () =>
      process.env[exports.ENV_CREDENTIALS_PATH] ||
      (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'credentials');
    exports.getCredentialsFilepath = getCredentialsFilepath;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js
var require_getProfileData4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getProfileData = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var getProfileData = (data) =>
      Object.entries(data)
        .filter(([key]) => profileKeyRegex.test(key))
        .reduce((acc, [key, value]) => ({ ...acc, [profileKeyRegex.exec(key)[2]]: value }), {
          ...(data.default && { default: data.default }),
        });
    exports.getProfileData = getProfileData;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js
var require_parseIni4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseIni = void 0;
    var profileNameBlockList = ['__proto__', 'profile __proto__'];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === '[' && line[line.length - 1] === ']';
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf('=');
          const start = 0;
          const end = line.length - 1;
          const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim(),
            ];
            map[currentSection] = map[currentSection] || {};
            map[currentSection][name] = value;
          }
        }
      }
      return map;
    };
    exports.parseIni = parseIni;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.slurpFile = void 0;
    var fs_1 = require('fs');
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path) => {
      if (!filePromisesHash[path]) {
        filePromisesHash[path] = readFile(path, 'utf8');
      }
      return filePromisesHash[path];
    };
    exports.slurpFile = slurpFile;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js
var require_loadSharedConfigFiles4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath4();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath4();
    var getProfileData_1 = require_getProfileData4();
    var parseIni_1 = require_parseIni4();
    var slurpFile_1 = require_slurpFile4();
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const {
        filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(),
        configFilepath = (0, getConfigFilepath_1.getConfigFilepath)(),
      } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath)
          .then(parseIni_1.parseIni)
          .then(getProfileData_1.getProfileData)
          .catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath).then(parseIni_1.parseIni).catch(swallowError),
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1],
      };
    };
    exports.loadSharedConfigFiles = loadSharedConfigFiles;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js
var require_parseKnownFiles4 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles4();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return {
        ...parsedFiles.configFile,
        ...parsedFiles.credentialsFile,
      };
    };
    exports.parseKnownFiles = parseKnownFiles;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js
var require_types8 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs79 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib13();
    tslib_1.__exportStar(require_getHomeDir4(), exports);
    tslib_1.__exportStar(require_getProfileName4(), exports);
    tslib_1.__exportStar(require_getSSOTokenFilepath4(), exports);
    tslib_1.__exportStar(require_getSSOTokenFromFile4(), exports);
    tslib_1.__exportStar(require_loadSharedConfigFiles4(), exports);
    tslib_1.__exportStar(require_parseKnownFiles4(), exports);
    tslib_1.__exportStar(require_types8(), exports);
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js
var require_fromSharedConfigFiles3 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs78();
    var shared_ini_file_loader_1 = require_dist_cjs79();
    var fromSharedConfigFiles =
      (configSelector, { preferredFile = 'config', ...init } = {}) =>
      async () => {
        const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
        const { configFile, credentialsFile } = await (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init);
        const profileFromCredentials = credentialsFile[profile] || {};
        const profileFromConfig = configFile[profile] || {};
        const mergedProfile =
          preferredFile === 'config'
            ? { ...profileFromCredentials, ...profileFromConfig }
            : { ...profileFromConfig, ...profileFromCredentials };
        try {
          const configValue = configSelector(mergedProfile);
          if (configValue === void 0) {
            throw new Error();
          }
          return configValue;
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(
            e.message ||
              `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`
          );
        }
      };
    exports.fromSharedConfigFiles = fromSharedConfigFiles;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js
var require_fromStatic9 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs78();
    var isFunction = (func) => typeof func === 'function';
    var fromStatic = (defaultValue) =>
      isFunction(defaultValue) ? async () => await defaultValue() : (0, property_provider_1.fromStatic)(defaultValue);
    exports.fromStatic = fromStatic;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js
var require_configLoader3 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs78();
    var fromEnv_1 = require_fromEnv4();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles3();
    var fromStatic_1 = require_fromStatic9();
    var loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) =>
      (0, property_provider_1.memoize)(
        (0, property_provider_1.chain)(
          (0, fromEnv_1.fromEnv)(environmentVariableSelector),
          (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(configFileSelector, configuration),
          (0, fromStatic_1.fromStatic)(defaultValue)
        )
      );
    exports.loadConfig = loadConfig;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js
var require_dist_cjs80 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib13();
    tslib_1.__exportStar(require_configLoader3(), exports);
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js
var require_dist_cjs81 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, '');
      if (querystring) {
        for (const pair of querystring.split('&')) {
          let [key, value = null] = pair.split('=');
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports.parseQueryString = parseQueryString;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/url-parser/dist-cjs/index.js
var require_dist_cjs82 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/url-parser/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs81();
    var parseUrl = (url) => {
      const { hostname, pathname, port, protocol, search } = new URL(url);
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query,
      };
    };
    exports.parseUrl = parseUrl;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js
var require_Endpoint3 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Endpoint = void 0;
    var Endpoint;
    (function (Endpoint2) {
      Endpoint2['IPv4'] = 'http://169.254.169.254';
      Endpoint2['IPv6'] = 'http://[fd00:ec2::254]';
    })((Endpoint = exports.Endpoint || (exports.Endpoint = {})));
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js
var require_EndpointConfigOptions2 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ENDPOINT_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_NAME = exports.ENV_ENDPOINT_NAME = void 0;
    exports.ENV_ENDPOINT_NAME = 'AWS_EC2_METADATA_SERVICE_ENDPOINT';
    exports.CONFIG_ENDPOINT_NAME = 'ec2_metadata_service_endpoint';
    exports.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[exports.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_NAME],
      default: void 0,
    };
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js
var require_EndpointMode2 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.EndpointMode = void 0;
    var EndpointMode;
    (function (EndpointMode2) {
      EndpointMode2['IPv4'] = 'IPv4';
      EndpointMode2['IPv6'] = 'IPv6';
    })((EndpointMode = exports.EndpointMode || (exports.EndpointMode = {})));
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js
var require_EndpointModeConfigOptions2 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_MODE_NAME = exports.ENV_ENDPOINT_MODE_NAME = void 0;
    var EndpointMode_1 = require_EndpointMode2();
    exports.ENV_ENDPOINT_MODE_NAME = 'AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE';
    exports.CONFIG_ENDPOINT_MODE_NAME = 'ec2_metadata_service_endpoint_mode';
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[exports.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4,
    };
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js
var require_getInstanceMetadataEndpoint2 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs80();
    var url_parser_1 = require_dist_cjs82();
    var Endpoint_1 = require_Endpoint3();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions2();
    var EndpointMode_1 = require_EndpointMode2();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions2();
    var getInstanceMetadataEndpoint = async () =>
      (0, url_parser_1.parseUrl)((await getFromEndpointConfig()) || (await getFromEndpointModeConfig()));
    exports.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = async () =>
      (0, node_config_provider_1.loadConfig)(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();
    var getFromEndpointModeConfig = async () => {
      const endpointMode = await (0, node_config_provider_1.loadConfig)(
        EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS
      )();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(
            `Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode_1.EndpointMode)}`
          );
      }
    };
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js
var require_getExtendedInstanceMetadataCredentials2 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = 'https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html';
    var getExtendedInstanceMetadataCredentials = (credentials, logger) => {
      var _a;
      const refreshInterval =
        STATIC_STABILITY_REFRESH_INTERVAL_SECONDS +
        Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn(
        'Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: ' +
          STATIC_STABILITY_DOC_URL
      );
      const originalExpiration =
        (_a = credentials.originalExpiration) !== null && _a !== void 0 ? _a : credentials.expiration;
      return {
        ...credentials,
        ...(originalExpiration ? { originalExpiration } : {}),
        expiration: newExpiration,
      };
    };
    exports.getExtendedInstanceMetadataCredentials = getExtendedInstanceMetadataCredentials;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js
var require_staticStabilityProvider2 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 = require_getExtendedInstanceMetadataCredentials2();
    var staticStabilityProvider = (provider, options = {}) => {
      const logger = (options === null || options === void 0 ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(
              credentials,
              logger
            );
          }
        } catch (e) {
          if (pastCredentials) {
            logger.warn('Credential renew failed: ', e);
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(
              pastCredentials,
              logger
            );
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
    exports.staticStabilityProvider = staticStabilityProvider;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js
var require_fromInstanceMetadata2 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs78();
    var httpRequest_1 = require_httpRequest8();
    var ImdsCredentials_1 = require_ImdsCredentials2();
    var RemoteProviderInit_1 = require_RemoteProviderInit2();
    var retry_1 = require_retry2();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint2();
    var staticStabilityProvider_1 = require_staticStabilityProvider2();
    var IMDS_PATH = '/latest/meta-data/iam/security-credentials/';
    var IMDS_TOKEN_PATH = '/latest/api/token';
    var fromInstanceMetadata = (init = {}) =>
      (0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), { logger: init.logger });
    exports.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      const getCredentials = async (maxRetries2, options) => {
        const profile = (
          await (0, retry_1.retry)(async () => {
            let profile2;
            try {
              profile2 = await getProfile(options);
            } catch (err) {
              if (err.statusCode === 401) {
                disableFetchToken = false;
              }
              throw err;
            }
            return profile2;
          }, maxRetries2)
        ).trim();
        return (0, retry_1.retry)(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error) {
            if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: 'EC2 Metadata token request returned error',
              });
            } else if (error.message === 'TimeoutError' || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              'x-aws-ec2-metadata-token': token,
            },
            timeout,
          });
        }
      };
    };
    var getMetadataToken = async (options) =>
      (0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_TOKEN_PATH,
        method: 'PUT',
        headers: {
          'x-aws-ec2-metadata-token-ttl-seconds': '21600',
        },
      });
    var getProfile = async (options) =>
      (await (0, httpRequest_1.httpRequest)({ ...options, path: IMDS_PATH })).toString();
    var getCredentialsFromProfile = async (profile, options) => {
      const credsResponse = JSON.parse(
        (
          await (0, httpRequest_1.httpRequest)({
            ...options,
            path: IMDS_PATH + profile,
          })
        ).toString()
      );
      if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError(
          'Invalid response received from instance metadata service.'
        );
      }
      return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
    };
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js
var require_types9 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs83 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getInstanceMetadataEndpoint = exports.httpRequest = void 0;
    var tslib_1 = require_tslib13();
    tslib_1.__exportStar(require_fromContainerMetadata2(), exports);
    tslib_1.__exportStar(require_fromInstanceMetadata2(), exports);
    tslib_1.__exportStar(require_RemoteProviderInit2(), exports);
    tslib_1.__exportStar(require_types9(), exports);
    var httpRequest_1 = require_httpRequest8();
    Object.defineProperty(exports, 'httpRequest', {
      enumerable: true,
      get: function () {
        return httpRequest_1.httpRequest;
      },
    });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint2();
    Object.defineProperty(exports, 'getInstanceMetadataEndpoint', {
      enumerable: true,
      get: function () {
        return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
      },
    });
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js
var require_constants15 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.IMDS_REGION_PATH =
      exports.DEFAULTS_MODE_OPTIONS =
      exports.ENV_IMDS_DISABLED =
      exports.AWS_DEFAULT_REGION_ENV =
      exports.AWS_REGION_ENV =
      exports.AWS_EXECUTION_ENV =
        void 0;
    exports.AWS_EXECUTION_ENV = 'AWS_EXECUTION_ENV';
    exports.AWS_REGION_ENV = 'AWS_REGION';
    exports.AWS_DEFAULT_REGION_ENV = 'AWS_DEFAULT_REGION';
    exports.ENV_IMDS_DISABLED = 'AWS_EC2_METADATA_DISABLED';
    exports.DEFAULTS_MODE_OPTIONS = ['in-region', 'cross-region', 'mobile', 'standard', 'legacy'];
    exports.IMDS_REGION_PATH = '/latest/meta-data/placement/region';
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js
var require_defaultsModeConfig = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = void 0;
    var AWS_DEFAULTS_MODE_ENV = 'AWS_DEFAULTS_MODE';
    var AWS_DEFAULTS_MODE_CONFIG = 'defaults_mode';
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => {
        return env2[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: 'legacy',
    };
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js
var require_resolveDefaultsModeConfig = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveDefaultsModeConfig = void 0;
    var config_resolver_1 = require_dist_cjs77();
    var credential_provider_imds_1 = require_dist_cjs83();
    var node_config_provider_1 = require_dist_cjs80();
    var property_provider_1 = require_dist_cjs78();
    var constants_1 = require_constants15();
    var defaultsModeConfig_1 = require_defaultsModeConfig();
    var resolveDefaultsModeConfig = ({
      region = (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS),
      defaultsMode = (0, node_config_provider_1.loadConfig)(defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS),
    } = {}) =>
      (0, property_provider_1.memoize)(async () => {
        const mode = typeof defaultsMode === 'function' ? await defaultsMode() : defaultsMode;
        switch (mode === null || mode === void 0 ? void 0 : mode.toLowerCase()) {
          case 'auto':
            return resolveNodeDefaultsModeAuto(region);
          case 'in-region':
          case 'cross-region':
          case 'mobile':
          case 'standard':
          case 'legacy':
            return Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase());
          case void 0:
            return Promise.resolve('legacy');
          default:
            throw new Error(
              `Invalid parameter for "defaultsMode", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(
                ', '
              )}, got ${mode}`
            );
        }
      });
    exports.resolveDefaultsModeConfig = resolveDefaultsModeConfig;
    var resolveNodeDefaultsModeAuto = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === 'function' ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return 'standard';
        }
        if (resolvedRegion === inferredRegion) {
          return 'in-region';
        } else {
          return 'cross-region';
        }
      }
      return 'standard';
    };
    var inferPhysicalRegion = async () => {
      var _a;
      if (
        process.env[constants_1.AWS_EXECUTION_ENV] &&
        (process.env[constants_1.AWS_REGION_ENV] || process.env[constants_1.AWS_DEFAULT_REGION_ENV])
      ) {
        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null && _a !== void 0
          ? _a
          : process.env[constants_1.AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[constants_1.ENV_IMDS_DISABLED]) {
        try {
          const endpoint = await (0, credential_provider_imds_1.getInstanceMetadataEndpoint)();
          return (
            await (0, credential_provider_imds_1.httpRequest)({ ...endpoint, path: constants_1.IMDS_REGION_PATH })
          ).toString();
        } catch (e) {}
      }
    };
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs84 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib13();
    tslib_1.__exportStar(require_resolveDefaultsModeConfig(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib12();
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var config_resolver_1 = require_dist_cjs56();
    var hash_node_1 = require_dist_cjs64();
    var middleware_retry_1 = require_dist_cjs61();
    var node_config_provider_1 = require_dist_cjs67();
    var node_http_handler_1 = require_dist_cjs70();
    var util_base64_node_1 = require_dist_cjs71();
    var util_body_length_node_1 = require_dist_cjs72();
    var util_user_agent_node_1 = require_dist_cjs73();
    var util_utf8_node_1 = require_dist_cjs74();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs3();
    var util_defaults_mode_node_1 = require_dist_cjs84();
    var smithy_client_2 = require_dist_cjs3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: 'node',
        defaultsMode,
        base64Decoder:
          (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0
            ? _a
            : util_base64_node_1.fromBase64,
        base64Encoder:
          (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0
            ? _b
            : util_base64_node_1.toBase64,
        bodyLengthChecker:
          (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0
            ? _c
            : util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider:
          (_d = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null &&
          _d !== void 0
            ? _d
            : (0, util_user_agent_node_1.defaultUserAgent)({
                serviceId: clientSharedValues.serviceId,
                clientVersion: package_json_1.default.version,
              }),
        maxAttempts:
          (_e = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _e !== void 0
            ? _e
            : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region:
          (_f = config === null || config === void 0 ? void 0 : config.region) !== null && _f !== void 0
            ? _f
            : (0, node_config_provider_1.loadConfig)(
                config_resolver_1.NODE_REGION_CONFIG_OPTIONS,
                config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS
              ),
        requestHandler:
          (_g = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _g !== void 0
            ? _g
            : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode:
          (_h = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _h !== void 0
            ? _h
            : (0, node_config_provider_1.loadConfig)({
                ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
                default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE,
              }),
        sha256:
          (_j = config === null || config === void 0 ? void 0 : config.sha256) !== null && _j !== void 0
            ? _j
            : hash_node_1.Hash.bind(null, 'sha256'),
        streamCollector:
          (_k = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _k !== void 0
            ? _k
            : node_http_handler_1.streamCollector,
        useDualstackEndpoint:
          (_l = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _l !== void 0
            ? _l
            : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint:
          (_m = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _m !== void 0
            ? _m
            : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder:
          (_o = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _o !== void 0
            ? _o
            : util_utf8_node_1.fromUtf8,
        utf8Encoder:
          (_p = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _p !== void 0
            ? _p
            : util_utf8_node_1.toUtf8,
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js
var require_SSOClient = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSOClient = void 0;
    var config_resolver_1 = require_dist_cjs56();
    var middleware_content_length_1 = require_dist_cjs57();
    var middleware_host_header_1 = require_dist_cjs58();
    var middleware_logger_1 = require_dist_cjs59();
    var middleware_recursion_detection_1 = require_dist_cjs15();
    var middleware_retry_1 = require_dist_cjs61();
    var middleware_user_agent_1 = require_dist_cjs62();
    var smithy_client_1 = require_dist_cjs3();
    var runtimeConfig_1 = require_runtimeConfig();
    var SSOClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, config_resolver_1.resolveRegionConfig)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveEndpointsConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_3);
        const _config_5 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_4);
        super(_config_5);
        this.config = _config_5;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSOClient = SSOClient;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js
var require_SSO = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSO = void 0;
    var GetRoleCredentialsCommand_1 = require_GetRoleCredentialsCommand();
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var LogoutCommand_1 = require_LogoutCommand();
    var SSOClient_1 = require_SSOClient();
    var SSO = class extends SSOClient_1.SSOClient {
      getRoleCredentials(args, optionsOrCb, cb) {
        const command = new GetRoleCredentialsCommand_1.GetRoleCredentialsCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccountRoles(args, optionsOrCb, cb) {
        const command = new ListAccountRolesCommand_1.ListAccountRolesCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccounts(args, optionsOrCb, cb) {
        const command = new ListAccountsCommand_1.ListAccountsCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      logout(args, optionsOrCb, cb) {
        const command = new LogoutCommand_1.LogoutCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.SSO = SSO;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js
var require_commands = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_GetRoleCredentialsCommand(), exports);
    tslib_1.__exportStar(require_ListAccountRolesCommand(), exports);
    tslib_1.__exportStar(require_ListAccountsCommand(), exports);
    tslib_1.__exportStar(require_LogoutCommand(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js
var require_models = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_models_03(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js
var require_Interfaces = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js
var require_ListAccountRolesPaginator = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateListAccountRoles = void 0;
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountRolesCommand_1.ListAccountRolesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccountRoles(input, ...args);
    };
    async function* paginateListAccountRoles(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input['maxResults'] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error('Invalid client, expected SSO | SSOClient');
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccountRoles = paginateListAccountRoles;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js
var require_ListAccountsPaginator = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateListAccounts = void 0;
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountsCommand_1.ListAccountsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccounts(input, ...args);
    };
    async function* paginateListAccounts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input['maxResults'] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error('Invalid client, expected SSO | SSOClient');
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccounts = paginateListAccounts;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js
var require_pagination = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_Interfaces(), exports);
    tslib_1.__exportStar(require_ListAccountRolesPaginator(), exports);
    tslib_1.__exportStar(require_ListAccountsPaginator(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs85 = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSOServiceException = void 0;
    var tslib_1 = require_tslib12();
    tslib_1.__exportStar(require_SSO(), exports);
    tslib_1.__exportStar(require_SSOClient(), exports);
    tslib_1.__exportStar(require_commands(), exports);
    tslib_1.__exportStar(require_models(), exports);
    tslib_1.__exportStar(require_pagination(), exports);
    var SSOServiceException_1 = require_SSOServiceException();
    Object.defineProperty(exports, 'SSOServiceException', {
      enumerable: true,
      get: function () {
        return SSOServiceException_1.SSOServiceException;
      },
    });
  },
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js
var require_resolveSSOCredentials = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveSSOCredentials = void 0;
    var client_sso_1 = require_dist_cjs85();
    var property_provider_1 = require_dist_cjs52();
    var shared_ini_file_loader_1 = require_dist_cjs53();
    var EXPIRE_WINDOW_MS = 15 * 60 * 1e3;
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = async ({ ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      try {
        token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoStartUrl);
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(
          `The SSO session associated with this profile is invalid. ${refreshMessage}`,
          SHOULD_FAIL_CREDENTIAL_CHAIN
        );
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {
        throw new property_provider_1.CredentialsProviderError(
          `The SSO session associated with this profile has expired. ${refreshMessage}`,
          SHOULD_FAIL_CREDENTIAL_CHAIN
        );
      }
      const { accessToken } = token;
      const sso = ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });
      let ssoResp;
      try {
        ssoResp = await sso.send(
          new client_sso_1.GetRoleCredentialsCommand({
            accountId: ssoAccountId,
            roleName: ssoRoleName,
            accessToken,
          })
        );
      } catch (e) {
        throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new property_provider_1.CredentialsProviderError(
          'SSO returns an invalid temporary credential.',
          SHOULD_FAIL_CREDENTIAL_CHAIN
        );
      }
      return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };
    };
    exports.resolveSSOCredentials = resolveSSOCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js
var require_validateSsoProfile = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.validateSsoProfile = void 0;
    var property_provider_1 = require_dist_cjs52();
    var validateSsoProfile = (profile) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new property_provider_1.CredentialsProviderError(
          `Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(
            profile
          ).join(', ')}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,
          false
        );
      }
      return profile;
    };
    exports.validateSsoProfile = validateSsoProfile;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js
var require_fromSSO = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromSSO = void 0;
    var property_provider_1 = require_dist_cjs52();
    var shared_ini_file_loader_1 = require_dist_cjs53();
    var isSsoProfile_1 = require_isSsoProfile();
    var resolveSSOCredentials_1 = require_resolveSSOCredentials();
    var validateSsoProfile_1 = require_validateSsoProfile();
    var fromSSO =
      (init = {}) =>
      async () => {
        const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient } = init;
        if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName) {
          const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
          const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
          const profile = profiles[profileName];
          if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {
            throw new property_provider_1.CredentialsProviderError(
              `Profile ${profileName} is not configured with SSO credentials.`
            );
          }
          const { sso_start_url, sso_account_id, sso_region, sso_role_name } = (0,
          validateSsoProfile_1.validateSsoProfile)(profile);
          return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
            ssoStartUrl: sso_start_url,
            ssoAccountId: sso_account_id,
            ssoRegion: sso_region,
            ssoRoleName: sso_role_name,
            ssoClient,
          });
        } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
          throw new property_provider_1.CredentialsProviderError(
            'Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"'
          );
        } else {
          return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
            ssoStartUrl,
            ssoAccountId,
            ssoRegion,
            ssoRoleName,
            ssoClient,
          });
        }
      };
    exports.fromSSO = fromSSO;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js
var require_types10 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs86 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib11();
    tslib_1.__exportStar(require_fromSSO(), exports);
    tslib_1.__exportStar(require_isSsoProfile(), exports);
    tslib_1.__exportStar(require_types10(), exports);
    tslib_1.__exportStar(require_validateSsoProfile(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js
var require_resolveSsoCredentials = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveSsoCredentials = exports.isSsoProfile = void 0;
    var credential_provider_sso_1 = require_dist_cjs86();
    var credential_provider_sso_2 = require_dist_cjs86();
    Object.defineProperty(exports, 'isSsoProfile', {
      enumerable: true,
      get: function () {
        return credential_provider_sso_2.isSsoProfile;
      },
    });
    var resolveSsoCredentials = (data) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = (0,
      credential_provider_sso_1.validateSsoProfile)(data);
      return (0, credential_provider_sso_1.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name,
      })();
    };
    exports.resolveSsoCredentials = resolveSsoCredentials;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js
var require_resolveStaticCredentials = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveStaticCredentials = exports.isStaticCredsProfile = void 0;
    var isStaticCredsProfile = (arg) =>
      Boolean(arg) &&
      typeof arg === 'object' &&
      typeof arg.aws_access_key_id === 'string' &&
      typeof arg.aws_secret_access_key === 'string' &&
      ['undefined', 'string'].indexOf(typeof arg.aws_session_token) > -1;
    exports.isStaticCredsProfile = isStaticCredsProfile;
    var resolveStaticCredentials = (profile) =>
      Promise.resolve({
        accessKeyId: profile.aws_access_key_id,
        secretAccessKey: profile.aws_secret_access_key,
        sessionToken: profile.aws_session_token,
      });
    exports.resolveStaticCredentials = resolveStaticCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-web-identity/node_modules/tslib/tslib.js
var require_tslib14 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-web-identity/node_modules/tslib/tslib.js'(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function (factory) {
      var root =
        typeof global === 'object' ? global : typeof self === 'object' ? self : typeof this === 'object' ? this : {};
      if (typeof define === 'function' && define.amd) {
        define('tslib', ['exports'], function (exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === 'object' && typeof module2.exports === 'object') {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === 'function') {
            Object.defineProperty(exports2, '__esModule', { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function (id, v) {
          return (exports2[id] = previous ? previous(id, v) : v);
        };
      }
    })(function (exporter) {
      var extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      __extends = function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
      __assign =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function (decorators, target, key, desc) {
        var c = arguments.length,
          r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
          d;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function (thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g;
        return (
          (g = { next: verb(0), throw: verb(1), return: verb(2) }),
          typeof Symbol === 'function' &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError('Generator is already executing.');
          while (_)
            try {
              if (
                ((f = 1),
                y &&
                  (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function (m, o) {
        for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
      };
      __createBinding = Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          };
      __values = function (o) {
        var s = typeof Symbol === 'function' && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === 'number')
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            },
          };
        throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      };
      __read = function (o, n) {
        var m = typeof Symbol === 'function' && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i['return'])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
        return r;
      };
      __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function (v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      };
      __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = {}),
          verb('next'),
          verb('throw'),
          verb('return'),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        function verb(n) {
          if (g[n])
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume('next', value);
        }
        function reject(value) {
          resume('throw', value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function (o) {
        var i, p;
        return (
          (i = {}),
          verb('next'),
          verb('throw', function (e) {
            throw e;
          }),
          verb('return'),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p) ? { value: __await(o[n](v)), done: n === 'return' } : f ? f(v) : v;
              }
            : f;
        }
      };
      __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, 'raw', { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          };
      __importStar = function (mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      __importDefault = function (mod2) {
        return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
      };
      __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot read private member from an object whose class did not declare it');
        return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot write private member to an object whose class did not declare it');
        return kind === 'a' ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== 'object' && typeof receiver !== 'function'))
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === 'function' ? receiver === state : state.has(receiver);
      };
      exporter('__extends', __extends);
      exporter('__assign', __assign);
      exporter('__rest', __rest);
      exporter('__decorate', __decorate);
      exporter('__param', __param);
      exporter('__metadata', __metadata);
      exporter('__awaiter', __awaiter);
      exporter('__generator', __generator);
      exporter('__exportStar', __exportStar);
      exporter('__createBinding', __createBinding);
      exporter('__values', __values);
      exporter('__read', __read);
      exporter('__spread', __spread);
      exporter('__spreadArrays', __spreadArrays);
      exporter('__spreadArray', __spreadArray);
      exporter('__await', __await);
      exporter('__asyncGenerator', __asyncGenerator);
      exporter('__asyncDelegator', __asyncDelegator);
      exporter('__asyncValues', __asyncValues);
      exporter('__makeTemplateObject', __makeTemplateObject);
      exporter('__importStar', __importStar);
      exporter('__importDefault', __importDefault);
      exporter('__classPrivateFieldGet', __classPrivateFieldGet);
      exporter('__classPrivateFieldSet', __classPrivateFieldSet);
      exporter('__classPrivateFieldIn', __classPrivateFieldIn);
    });
  },
});

// node_modules/@aws-sdk/credential-provider-web-identity/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js
var require_ProviderError7 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-web-identity/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ProviderError = void 0;
    var ProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = 'ProviderError';
        Object.setPrototypeOf(this, ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports.ProviderError = ProviderError;
  },
});

// node_modules/@aws-sdk/credential-provider-web-identity/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError7 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-web-identity/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError7();
    var CredentialsProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = 'CredentialsProviderError';
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
      }
    };
    exports.CredentialsProviderError = CredentialsProviderError;
  },
});

// node_modules/@aws-sdk/credential-provider-web-identity/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js
var require_chain7 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-web-identity/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.chain = void 0;
    var ProviderError_1 = require_ProviderError7();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(new ProviderError_1.ProviderError('No providers in chain'));
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports.chain = chain;
  },
});

// node_modules/@aws-sdk/credential-provider-web-identity/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js
var require_fromStatic10 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-web-identity/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports.fromStatic = fromStatic;
  },
});

// node_modules/@aws-sdk/credential-provider-web-identity/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js
var require_memoize7 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-web-identity/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports.memoize = memoize;
  },
});

// node_modules/@aws-sdk/credential-provider-web-identity/node_modules/@aws-sdk/property-provider/dist-cjs/index.js
var require_dist_cjs87 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-web-identity/node_modules/@aws-sdk/property-provider/dist-cjs/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib14();
    tslib_1.__exportStar(require_CredentialsProviderError7(), exports);
    tslib_1.__exportStar(require_ProviderError7(), exports);
    tslib_1.__exportStar(require_chain7(), exports);
    tslib_1.__exportStar(require_fromStatic10(), exports);
    tslib_1.__exportStar(require_memoize7(), exports);
  },
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  'node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromWebToken = void 0;
    var property_provider_1 = require_dist_cjs87();
    var fromWebToken = (init) => () => {
      const {
        roleArn,
        roleSessionName,
        webIdentityToken,
        providerId,
        policyArns,
        policy,
        durationSeconds,
        roleAssumerWithWebIdentity,
      } = init;
      if (!roleAssumerWithWebIdentity) {
        throw new property_provider_1.CredentialsProviderError(
          `Role Arn '${roleArn}' needs to be assumed with web identity, but no role assumption callback was provided.`,
          false
        );
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName:
          roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds,
      });
    };
    exports.fromWebToken = fromWebToken;
  },
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  'node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromTokenFile = void 0;
    var property_provider_1 = require_dist_cjs87();
    var fs_1 = require('fs');
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = 'AWS_WEB_IDENTITY_TOKEN_FILE';
    var ENV_ROLE_ARN = 'AWS_ROLE_ARN';
    var ENV_ROLE_SESSION_NAME = 'AWS_ROLE_SESSION_NAME';
    var fromTokenFile =
      (init = {}) =>
      async () => {
        return resolveTokenFile(init);
      };
    exports.fromTokenFile = fromTokenFile;
    var resolveTokenFile = (init) => {
      var _a, _b, _c;
      const webIdentityTokenFile =
        (_a = init === null || init === void 0 ? void 0 : init.webIdentityTokenFile) !== null && _a !== void 0
          ? _a
          : process.env[ENV_TOKEN_FILE];
      const roleArn =
        (_b = init === null || init === void 0 ? void 0 : init.roleArn) !== null && _b !== void 0
          ? _b
          : process.env[ENV_ROLE_ARN];
      const roleSessionName =
        (_c = init === null || init === void 0 ? void 0 : init.roleSessionName) !== null && _c !== void 0
          ? _c
          : process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError('Web identity configuration not specified');
      }
      return (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: 'ascii' }),
        roleArn,
        roleSessionName,
      })();
    };
  },
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs88 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib14();
    tslib_1.__exportStar(require_fromTokenFile(), exports);
    tslib_1.__exportStar(require_fromWebToken(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js
var require_resolveWebIdentityCredentials = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveWebIdentityCredentials = exports.isWebIdentityProfile = void 0;
    var credential_provider_web_identity_1 = require_dist_cjs88();
    var isWebIdentityProfile = (arg) =>
      Boolean(arg) &&
      typeof arg === 'object' &&
      typeof arg.web_identity_token_file === 'string' &&
      typeof arg.role_arn === 'string' &&
      ['undefined', 'string'].indexOf(typeof arg.role_session_name) > -1;
    exports.isWebIdentityProfile = isWebIdentityProfile;
    var resolveWebIdentityCredentials = async (profile, options) =>
      (0, credential_provider_web_identity_1.fromTokenFile)({
        webIdentityTokenFile: profile.web_identity_token_file,
        roleArn: profile.role_arn,
        roleSessionName: profile.role_session_name,
        roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,
      })();
    exports.resolveWebIdentityCredentials = resolveWebIdentityCredentials;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js
var require_resolveProfileData = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveProfileData = void 0;
    var property_provider_1 = require_dist_cjs26();
    var resolveAssumeRoleCredentials_1 = require_resolveAssumeRoleCredentials();
    var resolveSsoCredentials_1 = require_resolveSsoCredentials();
    var resolveStaticCredentials_1 = require_resolveStaticCredentials();
    var resolveWebIdentityCredentials_1 = require_resolveWebIdentityCredentials();
    var resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && (0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveAssumeRoleCredentials_1.isAssumeRoleProfile)(data)) {
        return (0, resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials)(
          profileName,
          profiles,
          options,
          visitedProfiles
        );
      }
      if ((0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveWebIdentityCredentials_1.isWebIdentityProfile)(data)) {
        return (0, resolveWebIdentityCredentials_1.resolveWebIdentityCredentials)(data, options);
      }
      if ((0, resolveSsoCredentials_1.isSsoProfile)(data)) {
        return (0, resolveSsoCredentials_1.resolveSsoCredentials)(data);
      }
      throw new property_provider_1.CredentialsProviderError(
        `Profile ${profileName} could not be found or parsed in shared credentials file.`
      );
    };
    exports.resolveProfileData = resolveProfileData;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js
var require_fromIni = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromIni = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs47();
    var resolveProfileData_1 = require_resolveProfileData();
    var fromIni =
      (init = {}) =>
      async () => {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        return (0, resolveProfileData_1.resolveProfileData)(
          (0, shared_ini_file_loader_1.getProfileName)(init),
          profiles,
          init
        );
      };
    exports.fromIni = fromIni;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs89 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_fromIni(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js
var require_getValidatedProcessCredentials = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getValidatedProcessCredentials = void 0;
    var getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...(data.SessionToken && { sessionToken: data.SessionToken }),
        ...(data.Expiration && { expiration: new Date(data.Expiration) }),
      };
    };
    exports.getValidatedProcessCredentials = getValidatedProcessCredentials;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveProcessCredentials = void 0;
    var property_provider_1 = require_dist_cjs26();
    var child_process_1 = require('child_process');
    var util_1 = require('util');
    var getValidatedProcessCredentials_1 = require_getValidatedProcessCredentials();
    var resolveProcessCredentials = async (profileName, profiles) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile['credential_process'];
        if (credentialProcess !== void 0) {
          const execPromise = (0, util_1.promisify)(child_process_1.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch (_a) {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return (0, getValidatedProcessCredentials_1.getValidatedProcessCredentials)(profileName, data);
          } catch (error) {
            throw new property_provider_1.CredentialsProviderError(error.message);
          }
        } else {
          throw new property_provider_1.CredentialsProviderError(
            `Profile ${profileName} did not contain credential_process.`
          );
        }
      } else {
        throw new property_provider_1.CredentialsProviderError(
          `Profile ${profileName} could not be found in shared credentials file.`
        );
      }
    };
    exports.resolveProcessCredentials = resolveProcessCredentials;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js
var require_fromProcess = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromProcess = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs47();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials();
    var fromProcess =
      (init = {}) =>
      async () => {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        return (0, resolveProcessCredentials_1.resolveProcessCredentials)(
          (0, shared_ini_file_loader_1.getProfileName)(init),
          profiles
        );
      };
    exports.fromProcess = fromProcess;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs90 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_fromProcess(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js
var require_remoteProvider = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.remoteProvider = exports.ENV_IMDS_DISABLED = void 0;
    var credential_provider_imds_1 = require_dist_cjs51();
    var property_provider_1 = require_dist_cjs26();
    exports.ENV_IMDS_DISABLED = 'AWS_EC2_METADATA_DISABLED';
    var remoteProvider = (init) => {
      if (
        process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] ||
        process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]
      ) {
        return (0, credential_provider_imds_1.fromContainerMetadata)(init);
      }
      if (process.env[exports.ENV_IMDS_DISABLED]) {
        return async () => {
          throw new property_provider_1.CredentialsProviderError('EC2 Instance Metadata Service access disabled');
        };
      }
      return (0, credential_provider_imds_1.fromInstanceMetadata)(init);
    };
    exports.remoteProvider = remoteProvider;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js
var require_defaultProvider = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultProvider = void 0;
    var credential_provider_env_1 = require_dist_cjs46();
    var credential_provider_ini_1 = require_dist_cjs89();
    var credential_provider_process_1 = require_dist_cjs90();
    var credential_provider_sso_1 = require_dist_cjs86();
    var credential_provider_web_identity_1 = require_dist_cjs88();
    var property_provider_1 = require_dist_cjs26();
    var shared_ini_file_loader_1 = require_dist_cjs47();
    var remoteProvider_1 = require_remoteProvider();
    var defaultProvider = (init = {}) =>
      (0, property_provider_1.memoize)(
        (0, property_provider_1.chain)(
          ...(init.profile || process.env[shared_ini_file_loader_1.ENV_PROFILE]
            ? []
            : [(0, credential_provider_env_1.fromEnv)()]),
          (0, credential_provider_sso_1.fromSSO)(init),
          (0, credential_provider_ini_1.fromIni)(init),
          (0, credential_provider_process_1.fromProcess)(init),
          (0, credential_provider_web_identity_1.fromTokenFile)(init),
          (0, remoteProvider_1.remoteProvider)(init),
          async () => {
            throw new property_provider_1.CredentialsProviderError(
              'Could not load credentials from any providers',
              false
            );
          }
        ),
        (credentials) => credentials.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5,
        (credentials) => credentials.expiration !== void 0
      );
    exports.defaultProvider = defaultProvider;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs91 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_defaultProvider(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js
var require_dist_cjs92 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromString = exports.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs21();
    var buffer_1 = require('buffer');
    var fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return buffer_1.Buffer.from(input, offset, length);
    };
    exports.fromArrayBuffer = fromArrayBuffer;
    var fromString = (input, encoding) => {
      if (typeof input !== 'string') {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
    };
    exports.fromString = fromString;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/hash-node/dist-cjs/index.js
var require_dist_cjs93 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/hash-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs92();
    var buffer_1 = require('buffer');
    var crypto_1 = require('crypto');
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.hash = secret
          ? (0, crypto_1.createHmac)(algorithmIdentifier, castSourceData(secret))
          : (0, crypto_1.createHash)(algorithmIdentifier);
      }
      update(toHash, encoding) {
        this.hash.update(castSourceData(toHash, encoding));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
    };
    exports.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === 'string') {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
    }
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js
var require_dist_cjs94 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs28();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, util_uri_escape_1.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === 'string') {
            qsEntry += `=${(0, util_uri_escape_1.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join('&');
    }
    exports.buildQueryString = buildQueryString;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js
var require_constants16 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports.NODEJS_TIMEOUT_ERROR_CODES = ['ECONNRESET', 'EPIPE', 'ETIMEDOUT'];
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js
var require_get_transformed_headers2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getTransformedHeaders = void 0;
    var getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(',') : headerValues;
      }
      return transformedHeaders;
    };
    exports.getTransformedHeaders = getTransformedHeaders;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js
var require_set_connection_timeout2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.setConnectionTimeout = void 0;
    var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      request.on('socket', (socket) => {
        if (socket.connecting) {
          const timeoutId = setTimeout(() => {
            request.destroy();
            reject(
              Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
                name: 'TimeoutError',
              })
            );
          }, timeoutInMs);
          socket.on('connect', () => {
            clearTimeout(timeoutId);
          });
        }
      });
    };
    exports.setConnectionTimeout = setConnectionTimeout;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js
var require_set_socket_timeout2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.setSocketTimeout = void 0;
    var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: 'TimeoutError' }));
      });
    };
    exports.setSocketTimeout = setSocketTimeout;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js
var require_write_request_body2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.writeRequestBody = void 0;
    var stream_1 = require('stream');
    function writeRequestBody(httpRequest, request) {
      const expect = request.headers['Expect'] || request.headers['expect'];
      if (expect === '100-continue') {
        httpRequest.on('continue', () => {
          writeBody(httpRequest, request.body);
        });
      } else {
        writeBody(httpRequest, request.body);
      }
    }
    exports.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest);
      } else if (body) {
        httpRequest.end(Buffer.from(body));
      } else {
        httpRequest.end();
      }
    }
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js
var require_node_http_handler2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NodeHttpHandler = void 0;
    var protocol_http_1 = require_dist_cjs30();
    var querystring_builder_1 = require_dist_cjs94();
    var http_1 = require('http');
    var https_1 = require('https');
    var constants_1 = require_constants16();
    var get_transformed_headers_1 = require_get_transformed_headers2();
    var set_connection_timeout_1 = require_set_connection_timeout2();
    var set_socket_timeout_1 = require_set_socket_timeout2();
    var write_request_body_1 = require_write_request_body2();
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: 'http/1.1' };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === 'function') {
            options()
              .then((_options) => {
                resolve(this.resolveDefaultConfig(_options));
              })
              .catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent: httpsAgent || new https_1.Agent({ keepAlive, maxSockets }),
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0
          ? void 0
          : _b.destroy();
        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0
          ? void 0
          : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((resolve, reject) => {
          if (!this.config) {
            throw new Error('Node HTTP request handler config is not resolved');
          }
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error('Request aborted');
            abortError.name = 'AbortError';
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === 'https:';
          const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path: queryString ? `${request.path}?${queryString}` : request.path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent,
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),
              body: res,
            });
            resolve({ response: httpResponse });
          });
          req.on('error', (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: 'TimeoutError' }));
            } else {
              reject(err);
            }
          });
          (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);
          (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.socketTimeout);
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error('Request aborted');
              abortError.name = 'AbortError';
              reject(abortError);
            };
          }
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
    };
    exports.NodeHttpHandler = NodeHttpHandler;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js
var require_node_http2_handler2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs30();
    var querystring_builder_1 = require_dist_cjs94();
    var http2_1 = require('http2');
    var get_transformed_headers_1 = require_get_transformed_headers2();
    var write_request_body_1 = require_write_request_body2();
    var NodeHttp2Handler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: 'h2' };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === 'function') {
            options()
              .then((opts) => {
                resolve(opts || {});
              })
              .catch(reject);
          } else {
            resolve(options || {});
          }
        });
        this.sessionCache = /* @__PURE__ */ new Map();
      }
      destroy() {
        for (const sessions of this.sessionCache.values()) {
          sessions.forEach((session) => this.destroySession(session));
        }
        this.sessionCache.clear();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((resolve, rejectOriginal) => {
          let fulfilled = false;
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error('Request aborted');
            abortError.name = 'AbortError';
            rejectOriginal(abortError);
            return;
          }
          const { hostname, method, port, protocol, path, query } = request;
          const authority = `${protocol}//${hostname}${port ? `:${port}` : ''}`;
          const session = this.getSession(authority, disableConcurrentStreams || false);
          const reject = (err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            rejectOriginal(err);
          };
          const queryString = (0, querystring_builder_1.buildQueryString)(query || {});
          const req = session.request({
            ...request.headers,
            [http2_1.constants.HTTP2_HEADER_PATH]: queryString ? `${path}?${queryString}` : path,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method,
          });
          session.ref();
          req.on('response', (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[':status'] || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),
              body: req,
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.deleteSessionFromCache(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = 'TimeoutError';
              reject(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error('Request aborted');
              abortError.name = 'AbortError';
              reject(abortError);
            };
          }
          req.on('frameError', (type, code, id) => {
            reject(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on('error', reject);
          req.on('aborted', () => {
            reject(
              new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`)
            );
          });
          req.on('close', () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              reject(new Error('Unexpected error: http2 request did not get a response'));
            }
          });
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
      getSession(authority, disableConcurrentStreams) {
        var _a;
        const sessionCache = this.sessionCache;
        const existingSessions = sessionCache.get(authority) || [];
        if (existingSessions.length > 0 && !disableConcurrentStreams) return existingSessions[0];
        const newSession = (0, http2_1.connect)(authority);
        newSession.unref();
        const destroySessionCb = () => {
          this.destroySession(newSession);
          this.deleteSessionFromCache(authority, newSession);
        };
        newSession.on('goaway', destroySessionCb);
        newSession.on('error', destroySessionCb);
        newSession.on('frameError', destroySessionCb);
        newSession.on('close', () => this.deleteSessionFromCache(authority, newSession));
        if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.sessionTimeout) {
          newSession.setTimeout(this.config.sessionTimeout, destroySessionCb);
        }
        existingSessions.push(newSession);
        sessionCache.set(authority, existingSessions);
        return newSession;
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
      deleteSessionFromCache(authority, session) {
        const existingSessions = this.sessionCache.get(authority) || [];
        if (!existingSessions.includes(session)) {
          return;
        }
        this.sessionCache.set(
          authority,
          existingSessions.filter((s) => s !== session)
        );
      }
    };
    exports.NodeHttp2Handler = NodeHttp2Handler;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js
var require_collector2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Collector = void 0;
    var stream_1 = require('stream');
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    exports.Collector = Collector;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js
var require_stream_collector2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.streamCollector = void 0;
    var collector_1 = require_collector2();
    var streamCollector = (stream) =>
      new Promise((resolve, reject) => {
        const collector = new collector_1.Collector();
        stream.pipe(collector);
        stream.on('error', (err) => {
          collector.end();
          reject(err);
        });
        collector.on('error', reject);
        collector.on('finish', function () {
          const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
          resolve(bytes);
        });
      });
    exports.streamCollector = streamCollector;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js
var require_dist_cjs95 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_node_http_handler2(), exports);
    tslib_1.__exportStar(require_node_http2_handler2(), exports);
    tslib_1.__exportStar(require_stream_collector2(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-base64-node/dist-cjs/index.js
var require_dist_cjs96 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-base64-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toBase64 = exports.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs92();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    function fromBase64(input) {
      if ((input.length * 3) % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, 'base64');
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    }
    exports.fromBase64 = fromBase64;
    function toBase64(input) {
      return (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString(
        'base64'
      );
    }
    exports.toBase64 = toBase64;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js
var require_calculateBodyLength2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.calculateBodyLength = void 0;
    var fs_1 = require('fs');
    var calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === 'string') {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === 'number') {
        return body.byteLength;
      } else if (typeof body.size === 'number') {
        return body.size;
      } else if (typeof body.path === 'string' || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
      } else if (typeof body.fd === 'number') {
        return (0, fs_1.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
    exports.calculateBodyLength = calculateBodyLength;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js
var require_dist_cjs97 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_calculateBodyLength2(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js
var require_is_crt_available2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js'(
    exports,
    module2
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isCrtAvailable = void 0;
    var isCrtAvailable = () => {
      try {
        if (typeof require === 'function' && typeof module2 !== 'undefined' && module2.require && require('aws-crt')) {
          return ['md/crt-avail'];
        }
        return null;
      } catch (e) {
        return null;
      }
    };
    exports.isCrtAvailable = isCrtAvailable;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs98 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultUserAgent = exports.UA_APP_ID_INI_NAME = exports.UA_APP_ID_ENV_NAME = void 0;
    var node_config_provider_1 = require_dist_cjs48();
    var os_1 = require('os');
    var process_1 = require('process');
    var is_crt_available_1 = require_is_crt_available2();
    exports.UA_APP_ID_ENV_NAME = 'AWS_SDK_UA_APP_ID';
    exports.UA_APP_ID_INI_NAME = 'sdk-ua-app-id';
    var defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ['aws-sdk-js', clientVersion],
        [`os/${(0, os_1.platform)()}`, (0, os_1.release)()],
        ['lang/js'],
        ['md/nodejs', `${process_1.versions.node}`],
      ];
      const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env2) => env2[exports.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports.UA_APP_ID_INI_NAME],
        default: void 0,
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    };
    exports.defaultUserAgent = defaultUserAgent;
  },
});

// node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js
var require_dist_cjs99 = __commonJS({
  'node_modules/@aws-sdk/client-sts/node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toUtf8 = exports.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs92();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, 'utf8');
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
    exports.fromUtf8 = fromUtf8;
    var toUtf8 = (input) =>
      (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString('utf8');
    exports.toUtf8 = toUtf8;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoints.js
var require_endpoints2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/endpoints.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultRegionInfoProvider = void 0;
    var config_resolver_1 = require_dist_cjs32();
    var regionHash = {
      'aws-global': {
        variants: [
          {
            hostname: 'sts.amazonaws.com',
            tags: [],
          },
        ],
        signingRegion: 'us-east-1',
      },
      'us-east-1': {
        variants: [
          {
            hostname: 'sts-fips.us-east-1.amazonaws.com',
            tags: ['fips'],
          },
        ],
      },
      'us-east-2': {
        variants: [
          {
            hostname: 'sts-fips.us-east-2.amazonaws.com',
            tags: ['fips'],
          },
        ],
      },
      'us-gov-east-1': {
        variants: [
          {
            hostname: 'sts.us-gov-east-1.amazonaws.com',
            tags: ['fips'],
          },
        ],
      },
      'us-gov-west-1': {
        variants: [
          {
            hostname: 'sts.us-gov-west-1.amazonaws.com',
            tags: ['fips'],
          },
        ],
      },
      'us-west-1': {
        variants: [
          {
            hostname: 'sts-fips.us-west-1.amazonaws.com',
            tags: ['fips'],
          },
        ],
      },
      'us-west-2': {
        variants: [
          {
            hostname: 'sts-fips.us-west-2.amazonaws.com',
            tags: ['fips'],
          },
        ],
      },
    };
    var partitionHash = {
      aws: {
        regions: [
          'af-south-1',
          'ap-east-1',
          'ap-northeast-1',
          'ap-northeast-2',
          'ap-northeast-3',
          'ap-south-1',
          'ap-southeast-1',
          'ap-southeast-2',
          'ap-southeast-3',
          'aws-global',
          'ca-central-1',
          'eu-central-1',
          'eu-north-1',
          'eu-south-1',
          'eu-west-1',
          'eu-west-2',
          'eu-west-3',
          'me-south-1',
          'sa-east-1',
          'us-east-1',
          'us-east-1-fips',
          'us-east-2',
          'us-east-2-fips',
          'us-west-1',
          'us-west-1-fips',
          'us-west-2',
          'us-west-2-fips',
        ],
        regionRegex: '^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$',
        variants: [
          {
            hostname: 'sts.{region}.amazonaws.com',
            tags: [],
          },
          {
            hostname: 'sts-fips.{region}.amazonaws.com',
            tags: ['fips'],
          },
          {
            hostname: 'sts-fips.{region}.api.aws',
            tags: ['dualstack', 'fips'],
          },
          {
            hostname: 'sts.{region}.api.aws',
            tags: ['dualstack'],
          },
        ],
      },
      'aws-cn': {
        regions: ['cn-north-1', 'cn-northwest-1'],
        regionRegex: '^cn\\-\\w+\\-\\d+$',
        variants: [
          {
            hostname: 'sts.{region}.amazonaws.com.cn',
            tags: [],
          },
          {
            hostname: 'sts-fips.{region}.amazonaws.com.cn',
            tags: ['fips'],
          },
          {
            hostname: 'sts-fips.{region}.api.amazonwebservices.com.cn',
            tags: ['dualstack', 'fips'],
          },
          {
            hostname: 'sts.{region}.api.amazonwebservices.com.cn',
            tags: ['dualstack'],
          },
        ],
      },
      'aws-iso': {
        regions: ['us-iso-east-1', 'us-iso-west-1'],
        regionRegex: '^us\\-iso\\-\\w+\\-\\d+$',
        variants: [
          {
            hostname: 'sts.{region}.c2s.ic.gov',
            tags: [],
          },
          {
            hostname: 'sts-fips.{region}.c2s.ic.gov',
            tags: ['fips'],
          },
        ],
      },
      'aws-iso-b': {
        regions: ['us-isob-east-1'],
        regionRegex: '^us\\-isob\\-\\w+\\-\\d+$',
        variants: [
          {
            hostname: 'sts.{region}.sc2s.sgov.gov',
            tags: [],
          },
          {
            hostname: 'sts-fips.{region}.sc2s.sgov.gov',
            tags: ['fips'],
          },
        ],
      },
      'aws-us-gov': {
        regions: ['us-gov-east-1', 'us-gov-east-1-fips', 'us-gov-west-1', 'us-gov-west-1-fips'],
        regionRegex: '^us\\-gov\\-\\w+\\-\\d+$',
        variants: [
          {
            hostname: 'sts.{region}.amazonaws.com',
            tags: [],
          },
          {
            hostname: 'sts.{region}.amazonaws.com',
            tags: ['fips'],
          },
          {
            hostname: 'sts-fips.{region}.api.aws',
            tags: ['dualstack', 'fips'],
          },
          {
            hostname: 'sts.{region}.api.aws',
            tags: ['dualstack'],
          },
        ],
      },
    };
    var defaultRegionInfoProvider = async (region, options) =>
      (0, config_resolver_1.getRegionInfo)(region, {
        ...options,
        signingService: 'sts',
        regionHash,
        partitionHash,
      });
    exports.defaultRegionInfoProvider = defaultRegionInfoProvider;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs50();
    var endpoints_1 = require_endpoints2();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e;
      return {
        apiVersion: '2011-06-15',
        disableHostPrefix:
          (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0
            ? _a
            : false,
        logger:
          (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider:
          (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0
            ? _c
            : endpoints_1.defaultRegionInfoProvider,
        serviceId:
          (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0
            ? _d
            : 'STS',
        urlParser:
          (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0
            ? _e
            : url_parser_1.parseUrl,
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib9();
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var config_resolver_1 = require_dist_cjs32();
    var credential_provider_node_1 = require_dist_cjs91();
    var hash_node_1 = require_dist_cjs93();
    var middleware_retry_1 = require_dist_cjs37();
    var node_config_provider_1 = require_dist_cjs48();
    var node_http_handler_1 = require_dist_cjs95();
    var util_base64_node_1 = require_dist_cjs96();
    var util_body_length_node_1 = require_dist_cjs97();
    var util_user_agent_node_1 = require_dist_cjs98();
    var util_utf8_node_1 = require_dist_cjs99();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs3();
    var util_defaults_mode_node_1 = require_dist_cjs84();
    var smithy_client_2 = require_dist_cjs3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: 'node',
        defaultsMode,
        base64Decoder:
          (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0
            ? _a
            : util_base64_node_1.fromBase64,
        base64Encoder:
          (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0
            ? _b
            : util_base64_node_1.toBase64,
        bodyLengthChecker:
          (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0
            ? _c
            : util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider:
          (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null &&
          _d !== void 0
            ? _d
            : (0, defaultStsRoleAssumers_1.decorateDefaultCredentialProvider)(
                credential_provider_node_1.defaultProvider
              ),
        defaultUserAgentProvider:
          (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null &&
          _e !== void 0
            ? _e
            : (0, util_user_agent_node_1.defaultUserAgent)({
                serviceId: clientSharedValues.serviceId,
                clientVersion: package_json_1.default.version,
              }),
        maxAttempts:
          (_f = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _f !== void 0
            ? _f
            : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region:
          (_g = config === null || config === void 0 ? void 0 : config.region) !== null && _g !== void 0
            ? _g
            : (0, node_config_provider_1.loadConfig)(
                config_resolver_1.NODE_REGION_CONFIG_OPTIONS,
                config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS
              ),
        requestHandler:
          (_h = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _h !== void 0
            ? _h
            : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode:
          (_j = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _j !== void 0
            ? _j
            : (0, node_config_provider_1.loadConfig)({
                ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
                default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE,
              }),
        sha256:
          (_k = config === null || config === void 0 ? void 0 : config.sha256) !== null && _k !== void 0
            ? _k
            : hash_node_1.Hash.bind(null, 'sha256'),
        streamCollector:
          (_l = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _l !== void 0
            ? _l
            : node_http_handler_1.streamCollector,
        useDualstackEndpoint:
          (_m = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _m !== void 0
            ? _m
            : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint:
          (_o = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _o !== void 0
            ? _o
            : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder:
          (_p = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _p !== void 0
            ? _p
            : util_utf8_node_1.fromUtf8,
        utf8Encoder:
          (_q = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _q !== void 0
            ? _q
            : util_utf8_node_1.toUtf8,
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js
var require_STSClient = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.STSClient = void 0;
    var config_resolver_1 = require_dist_cjs32();
    var middleware_content_length_1 = require_dist_cjs33();
    var middleware_host_header_1 = require_dist_cjs34();
    var middleware_logger_1 = require_dist_cjs35();
    var middleware_recursion_detection_1 = require_dist_cjs15();
    var middleware_retry_1 = require_dist_cjs37();
    var middleware_sdk_sts_1 = require_dist_cjs44();
    var middleware_user_agent_1 = require_dist_cjs45();
    var smithy_client_1 = require_dist_cjs3();
    var runtimeConfig_1 = require_runtimeConfig2();
    var STSClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, config_resolver_1.resolveRegionConfig)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveEndpointsConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_3);
        const _config_5 = (0, middleware_sdk_sts_1.resolveStsAuthConfig)(_config_4, { stsClientCtor: STSClient });
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.STSClient = STSClient;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STS.js
var require_STS = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/STS.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.STS = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithSAMLCommand_1 = require_AssumeRoleWithSAMLCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var DecodeAuthorizationMessageCommand_1 = require_DecodeAuthorizationMessageCommand();
    var GetAccessKeyInfoCommand_1 = require_GetAccessKeyInfoCommand();
    var GetCallerIdentityCommand_1 = require_GetCallerIdentityCommand();
    var GetFederationTokenCommand_1 = require_GetFederationTokenCommand();
    var GetSessionTokenCommand_1 = require_GetSessionTokenCommand();
    var STSClient_1 = require_STSClient();
    var STS = class extends STSClient_1.STSClient {
      assumeRole(args, optionsOrCb, cb) {
        const command = new AssumeRoleCommand_1.AssumeRoleCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithSAML(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithSAMLCommand_1.AssumeRoleWithSAMLCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithWebIdentity(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      decodeAuthorizationMessage(args, optionsOrCb, cb) {
        const command = new DecodeAuthorizationMessageCommand_1.DecodeAuthorizationMessageCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAccessKeyInfo(args, optionsOrCb, cb) {
        const command = new GetAccessKeyInfoCommand_1.GetAccessKeyInfoCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCallerIdentity(args, optionsOrCb, cb) {
        const command = new GetCallerIdentityCommand_1.GetCallerIdentityCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFederationToken(args, optionsOrCb, cb) {
        const command = new GetFederationTokenCommand_1.GetFederationTokenCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getSessionToken(args, optionsOrCb, cb) {
        const command = new GetSessionTokenCommand_1.GetSessionTokenCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.STS = STS;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js
var require_commands2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_AssumeRoleCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithSAMLCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithWebIdentityCommand(), exports);
    tslib_1.__exportStar(require_DecodeAuthorizationMessageCommand(), exports);
    tslib_1.__exportStar(require_GetAccessKeyInfoCommand(), exports);
    tslib_1.__exportStar(require_GetCallerIdentityCommand(), exports);
    tslib_1.__exportStar(require_GetFederationTokenCommand(), exports);
    tslib_1.__exportStar(require_GetSessionTokenCommand(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js
var require_defaultRoleAssumers = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.decorateDefaultCredentialProvider =
      exports.getDefaultRoleAssumerWithWebIdentity =
      exports.getDefaultRoleAssumer =
        void 0;
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var STSClient_1 = require_STSClient();
    var getDefaultRoleAssumer = (stsOptions = {}) =>
      (0, defaultStsRoleAssumers_1.getDefaultRoleAssumer)(stsOptions, STSClient_1.STSClient);
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}) =>
      (0, defaultStsRoleAssumers_1.getDefaultRoleAssumerWithWebIdentity)(stsOptions, STSClient_1.STSClient);
    exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) =>
      provider({
        roleAssumer: (0, exports.getDefaultRoleAssumer)(input),
        roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input),
        ...input,
      });
    exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js
var require_models2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_models_02(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/index.js
var require_dist_cjs100 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.STSServiceException = void 0;
    var tslib_1 = require_tslib9();
    tslib_1.__exportStar(require_STS(), exports);
    tslib_1.__exportStar(require_STSClient(), exports);
    tslib_1.__exportStar(require_commands2(), exports);
    tslib_1.__exportStar(require_defaultRoleAssumers(), exports);
    tslib_1.__exportStar(require_models2(), exports);
    var STSServiceException_1 = require_STSServiceException();
    Object.defineProperty(exports, 'STSServiceException', {
      enumerable: true,
      get: function () {
        return STSServiceException_1.STSServiceException;
      },
    });
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js
var require_fromEnv5 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromEnv = exports.ENV_EXPIRATION = exports.ENV_SESSION = exports.ENV_SECRET = exports.ENV_KEY = void 0;
    var property_provider_1 = require_dist_cjs18();
    exports.ENV_KEY = 'AWS_ACCESS_KEY_ID';
    exports.ENV_SECRET = 'AWS_SECRET_ACCESS_KEY';
    exports.ENV_SESSION = 'AWS_SESSION_TOKEN';
    exports.ENV_EXPIRATION = 'AWS_CREDENTIAL_EXPIRATION';
    var fromEnv = () => async () => {
      const accessKeyId = process.env[exports.ENV_KEY];
      const secretAccessKey = process.env[exports.ENV_SECRET];
      const sessionToken = process.env[exports.ENV_SESSION];
      const expiry = process.env[exports.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return {
          accessKeyId,
          secretAccessKey,
          ...(sessionToken && { sessionToken }),
          ...(expiry && { expiration: new Date(expiry) }),
        };
      }
      throw new property_provider_1.CredentialsProviderError('Unable to find environment variable credentials.');
    };
    exports.fromEnv = fromEnv;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs101 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_fromEnv5(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir5 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getHomeDir = void 0;
    var os_1 = require('os');
    var path_1 = require('path');
    var getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME) return HOME;
      if (USERPROFILE) return USERPROFILE;
      if (HOMEPATH) return `${HOMEDRIVE}${HOMEPATH}`;
      return (0, os_1.homedir)();
    };
    exports.getHomeDir = getHomeDir;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js
var require_getProfileName5 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getProfileName = exports.DEFAULT_PROFILE = exports.ENV_PROFILE = void 0;
    exports.ENV_PROFILE = 'AWS_PROFILE';
    exports.DEFAULT_PROFILE = 'default';
    var getProfileName = (init) => init.profile || process.env[exports.ENV_PROFILE] || exports.DEFAULT_PROFILE;
    exports.getProfileName = getProfileName;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath5 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSSOTokenFilepath = void 0;
    var crypto_1 = require('crypto');
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir5();
    var getSSOTokenFilepath = (ssoStartUrl) => {
      const hasher = (0, crypto_1.createHash)('sha1');
      const cacheName = hasher.update(ssoStartUrl).digest('hex');
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'sso', 'cache', `${cacheName}.json`);
    };
    exports.getSSOTokenFilepath = getSSOTokenFilepath;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile5 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSSOTokenFromFile = void 0;
    var fs_1 = require('fs');
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath5();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (ssoStartUrl) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(ssoStartUrl);
      const ssoTokenText = await readFile(ssoTokenFilepath, 'utf8');
      return JSON.parse(ssoTokenText);
    };
    exports.getSSOTokenFromFile = getSSOTokenFromFile;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js
var require_getConfigFilepath5 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getConfigFilepath = exports.ENV_CONFIG_PATH = void 0;
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir5();
    exports.ENV_CONFIG_PATH = 'AWS_CONFIG_FILE';
    var getConfigFilepath = () =>
      process.env[exports.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'config');
    exports.getConfigFilepath = getConfigFilepath;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js
var require_getCredentialsFilepath5 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCredentialsFilepath = exports.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir5();
    exports.ENV_CREDENTIALS_PATH = 'AWS_SHARED_CREDENTIALS_FILE';
    var getCredentialsFilepath = () =>
      process.env[exports.ENV_CREDENTIALS_PATH] ||
      (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'credentials');
    exports.getCredentialsFilepath = getCredentialsFilepath;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js
var require_getProfileData5 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getProfileData = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var getProfileData = (data) =>
      Object.entries(data)
        .filter(([key]) => profileKeyRegex.test(key))
        .reduce((acc, [key, value]) => ({ ...acc, [profileKeyRegex.exec(key)[2]]: value }), {
          ...(data.default && { default: data.default }),
        });
    exports.getProfileData = getProfileData;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js
var require_parseIni5 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseIni = void 0;
    var profileNameBlockList = ['__proto__', 'profile __proto__'];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === '[' && line[line.length - 1] === ']';
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf('=');
          const start = 0;
          const end = line.length - 1;
          const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim(),
            ];
            map[currentSection] = map[currentSection] || {};
            map[currentSection][name] = value;
          }
        }
      }
      return map;
    };
    exports.parseIni = parseIni;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile5 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.slurpFile = void 0;
    var fs_1 = require('fs');
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path) => {
      if (!filePromisesHash[path]) {
        filePromisesHash[path] = readFile(path, 'utf8');
      }
      return filePromisesHash[path];
    };
    exports.slurpFile = slurpFile;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js
var require_loadSharedConfigFiles5 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath5();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath5();
    var getProfileData_1 = require_getProfileData5();
    var parseIni_1 = require_parseIni5();
    var slurpFile_1 = require_slurpFile5();
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const {
        filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(),
        configFilepath = (0, getConfigFilepath_1.getConfigFilepath)(),
      } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath)
          .then(parseIni_1.parseIni)
          .then(getProfileData_1.getProfileData)
          .catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath).then(parseIni_1.parseIni).catch(swallowError),
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1],
      };
    };
    exports.loadSharedConfigFiles = loadSharedConfigFiles;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js
var require_parseKnownFiles5 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles5();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return {
        ...parsedFiles.configFile,
        ...parsedFiles.credentialsFile,
      };
    };
    exports.parseKnownFiles = parseKnownFiles;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js
var require_types11 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs102 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_getHomeDir5(), exports);
    tslib_1.__exportStar(require_getProfileName5(), exports);
    tslib_1.__exportStar(require_getSSOTokenFilepath5(), exports);
    tslib_1.__exportStar(require_getSSOTokenFromFile5(), exports);
    tslib_1.__exportStar(require_loadSharedConfigFiles5(), exports);
    tslib_1.__exportStar(require_parseKnownFiles5(), exports);
    tslib_1.__exportStar(require_types11(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js
var require_httpRequest9 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs18();
    var buffer_1 = require('buffer');
    var http_1 = require('http');
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, http_1.request)({
          method: 'GET',
          ...options,
          hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\[(.+)\]$/, '$1'),
        });
        req.on('error', (err) => {
          reject(
            Object.assign(new property_provider_1.ProviderError('Unable to connect to instance metadata service'), err)
          );
          req.destroy();
        });
        req.on('timeout', () => {
          reject(new property_provider_1.ProviderError('TimeoutError from instance metadata service'));
          req.destroy();
        });
        req.on('response', (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(
              Object.assign(
                new property_provider_1.ProviderError('Error response received from instance metadata service'),
                { statusCode }
              )
            );
            req.destroy();
          }
          const chunks = [];
          res.on('data', (chunk) => {
            chunks.push(chunk);
          });
          res.on('end', () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    exports.httpRequest = httpRequest;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js
var require_ImdsCredentials3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromImdsCredentials = exports.isImdsCredentials = void 0;
    var isImdsCredentials = (arg) =>
      Boolean(arg) &&
      typeof arg === 'object' &&
      typeof arg.AccessKeyId === 'string' &&
      typeof arg.SecretAccessKey === 'string' &&
      typeof arg.Token === 'string' &&
      typeof arg.Expiration === 'string';
    exports.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration),
    });
    exports.fromImdsCredentials = fromImdsCredentials;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js
var require_RemoteProviderInit3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.providerConfigFromInit = exports.DEFAULT_MAX_RETRIES = exports.DEFAULT_TIMEOUT = void 0;
    exports.DEFAULT_TIMEOUT = 1e3;
    exports.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = ({ maxRetries = exports.DEFAULT_MAX_RETRIES, timeout = exports.DEFAULT_TIMEOUT }) => ({
      maxRetries,
      timeout,
    });
    exports.providerConfigFromInit = providerConfigFromInit;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js
var require_retry3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.retry = void 0;
    var retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
    exports.retry = retry;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js
var require_fromContainerMetadata3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromContainerMetadata =
      exports.ENV_CMDS_AUTH_TOKEN =
      exports.ENV_CMDS_RELATIVE_URI =
      exports.ENV_CMDS_FULL_URI =
        void 0;
    var property_provider_1 = require_dist_cjs18();
    var url_1 = require('url');
    var httpRequest_1 = require_httpRequest9();
    var ImdsCredentials_1 = require_ImdsCredentials3();
    var RemoteProviderInit_1 = require_RemoteProviderInit3();
    var retry_1 = require_retry3();
    exports.ENV_CMDS_FULL_URI = 'AWS_CONTAINER_CREDENTIALS_FULL_URI';
    exports.ENV_CMDS_RELATIVE_URI = 'AWS_CONTAINER_CREDENTIALS_RELATIVE_URI';
    exports.ENV_CMDS_AUTH_TOKEN = 'AWS_CONTAINER_AUTHORIZATION_TOKEN';
    var fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      return () =>
        (0, retry_1.retry)(async () => {
          const requestOptions = await getCmdsUri();
          const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
          if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
            throw new property_provider_1.CredentialsProviderError(
              'Invalid response received from instance metadata service.'
            );
          }
          return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
        }, maxRetries);
    };
    exports.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = async (timeout, options) => {
      if (process.env[exports.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[exports.ENV_CMDS_AUTH_TOKEN],
        };
      }
      const buffer = await (0, httpRequest_1.httpRequest)({
        ...options,
        timeout,
      });
      return buffer.toString();
    };
    var CMDS_IP = '169.254.170.2';
    var GREENGRASS_HOSTS = {
      localhost: true,
      '127.0.0.1': true,
    };
    var GREENGRASS_PROTOCOLS = {
      'http:': true,
      'https:': true,
    };
    var getCmdsUri = async () => {
      if (process.env[exports.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports.ENV_CMDS_RELATIVE_URI],
        };
      }
      if (process.env[exports.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(
            `${parsed.hostname} is not a valid container metadata service hostname`,
            false
          );
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(
            `${parsed.protocol} is not a valid container metadata service protocol`,
            false
          );
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0,
        };
      }
      throw new property_provider_1.CredentialsProviderError(
        `The container metadata credential provider cannot be used unless the ${exports.ENV_CMDS_RELATIVE_URI} or ${exports.ENV_CMDS_FULL_URI} environment variable is set`,
        false
      );
    };
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js
var require_fromEnv6 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs18();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(
          e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`
        );
      }
    };
    exports.fromEnv = fromEnv;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js
var require_fromSharedConfigFiles4 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs18();
    var shared_ini_file_loader_1 = require_dist_cjs102();
    var fromSharedConfigFiles =
      (configSelector, { preferredFile = 'config', ...init } = {}) =>
      async () => {
        const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
        const { configFile, credentialsFile } = await (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init);
        const profileFromCredentials = credentialsFile[profile] || {};
        const profileFromConfig = configFile[profile] || {};
        const mergedProfile =
          preferredFile === 'config'
            ? { ...profileFromCredentials, ...profileFromConfig }
            : { ...profileFromConfig, ...profileFromCredentials };
        try {
          const configValue = configSelector(mergedProfile);
          if (configValue === void 0) {
            throw new Error();
          }
          return configValue;
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(
            e.message ||
              `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`
          );
        }
      };
    exports.fromSharedConfigFiles = fromSharedConfigFiles;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js
var require_fromStatic11 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs18();
    var isFunction = (func) => typeof func === 'function';
    var fromStatic = (defaultValue) =>
      isFunction(defaultValue) ? async () => await defaultValue() : (0, property_provider_1.fromStatic)(defaultValue);
    exports.fromStatic = fromStatic;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js
var require_configLoader4 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs18();
    var fromEnv_1 = require_fromEnv6();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles4();
    var fromStatic_1 = require_fromStatic11();
    var loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) =>
      (0, property_provider_1.memoize)(
        (0, property_provider_1.chain)(
          (0, fromEnv_1.fromEnv)(environmentVariableSelector),
          (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(configFileSelector, configuration),
          (0, fromStatic_1.fromStatic)(defaultValue)
        )
      );
    exports.loadConfig = loadConfig;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js
var require_dist_cjs103 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_configLoader4(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js
var require_dist_cjs104 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, '');
      if (querystring) {
        for (const pair of querystring.split('&')) {
          let [key, value = null] = pair.split('=');
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports.parseQueryString = parseQueryString;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/url-parser/dist-cjs/index.js
var require_dist_cjs105 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/url-parser/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs104();
    var parseUrl = (url) => {
      const { hostname, pathname, port, protocol, search } = new URL(url);
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query,
      };
    };
    exports.parseUrl = parseUrl;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js
var require_Endpoint4 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Endpoint = void 0;
    var Endpoint;
    (function (Endpoint2) {
      Endpoint2['IPv4'] = 'http://169.254.169.254';
      Endpoint2['IPv6'] = 'http://[fd00:ec2::254]';
    })((Endpoint = exports.Endpoint || (exports.Endpoint = {})));
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js
var require_EndpointConfigOptions3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ENDPOINT_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_NAME = exports.ENV_ENDPOINT_NAME = void 0;
    exports.ENV_ENDPOINT_NAME = 'AWS_EC2_METADATA_SERVICE_ENDPOINT';
    exports.CONFIG_ENDPOINT_NAME = 'ec2_metadata_service_endpoint';
    exports.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[exports.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_NAME],
      default: void 0,
    };
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js
var require_EndpointMode3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.EndpointMode = void 0;
    var EndpointMode;
    (function (EndpointMode2) {
      EndpointMode2['IPv4'] = 'IPv4';
      EndpointMode2['IPv6'] = 'IPv6';
    })((EndpointMode = exports.EndpointMode || (exports.EndpointMode = {})));
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js
var require_EndpointModeConfigOptions3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_MODE_NAME = exports.ENV_ENDPOINT_MODE_NAME = void 0;
    var EndpointMode_1 = require_EndpointMode3();
    exports.ENV_ENDPOINT_MODE_NAME = 'AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE';
    exports.CONFIG_ENDPOINT_MODE_NAME = 'ec2_metadata_service_endpoint_mode';
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[exports.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4,
    };
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js
var require_getInstanceMetadataEndpoint3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs103();
    var url_parser_1 = require_dist_cjs105();
    var Endpoint_1 = require_Endpoint4();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions3();
    var EndpointMode_1 = require_EndpointMode3();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions3();
    var getInstanceMetadataEndpoint = async () =>
      (0, url_parser_1.parseUrl)((await getFromEndpointConfig()) || (await getFromEndpointModeConfig()));
    exports.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = async () =>
      (0, node_config_provider_1.loadConfig)(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();
    var getFromEndpointModeConfig = async () => {
      const endpointMode = await (0, node_config_provider_1.loadConfig)(
        EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS
      )();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(
            `Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode_1.EndpointMode)}`
          );
      }
    };
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js
var require_getExtendedInstanceMetadataCredentials3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = 'https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html';
    var getExtendedInstanceMetadataCredentials = (credentials, logger) => {
      var _a;
      const refreshInterval =
        STATIC_STABILITY_REFRESH_INTERVAL_SECONDS +
        Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn(
        'Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: ' +
          STATIC_STABILITY_DOC_URL
      );
      const originalExpiration =
        (_a = credentials.originalExpiration) !== null && _a !== void 0 ? _a : credentials.expiration;
      return {
        ...credentials,
        ...(originalExpiration ? { originalExpiration } : {}),
        expiration: newExpiration,
      };
    };
    exports.getExtendedInstanceMetadataCredentials = getExtendedInstanceMetadataCredentials;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js
var require_staticStabilityProvider3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 = require_getExtendedInstanceMetadataCredentials3();
    var staticStabilityProvider = (provider, options = {}) => {
      const logger = (options === null || options === void 0 ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(
              credentials,
              logger
            );
          }
        } catch (e) {
          if (pastCredentials) {
            logger.warn('Credential renew failed: ', e);
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(
              pastCredentials,
              logger
            );
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
    exports.staticStabilityProvider = staticStabilityProvider;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js
var require_fromInstanceMetadata3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs18();
    var httpRequest_1 = require_httpRequest9();
    var ImdsCredentials_1 = require_ImdsCredentials3();
    var RemoteProviderInit_1 = require_RemoteProviderInit3();
    var retry_1 = require_retry3();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint3();
    var staticStabilityProvider_1 = require_staticStabilityProvider3();
    var IMDS_PATH = '/latest/meta-data/iam/security-credentials/';
    var IMDS_TOKEN_PATH = '/latest/api/token';
    var fromInstanceMetadata = (init = {}) =>
      (0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), { logger: init.logger });
    exports.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      const getCredentials = async (maxRetries2, options) => {
        const profile = (
          await (0, retry_1.retry)(async () => {
            let profile2;
            try {
              profile2 = await getProfile(options);
            } catch (err) {
              if (err.statusCode === 401) {
                disableFetchToken = false;
              }
              throw err;
            }
            return profile2;
          }, maxRetries2)
        ).trim();
        return (0, retry_1.retry)(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error) {
            if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: 'EC2 Metadata token request returned error',
              });
            } else if (error.message === 'TimeoutError' || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              'x-aws-ec2-metadata-token': token,
            },
            timeout,
          });
        }
      };
    };
    var getMetadataToken = async (options) =>
      (0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_TOKEN_PATH,
        method: 'PUT',
        headers: {
          'x-aws-ec2-metadata-token-ttl-seconds': '21600',
        },
      });
    var getProfile = async (options) =>
      (await (0, httpRequest_1.httpRequest)({ ...options, path: IMDS_PATH })).toString();
    var getCredentialsFromProfile = async (profile, options) => {
      const credsResponse = JSON.parse(
        (
          await (0, httpRequest_1.httpRequest)({
            ...options,
            path: IMDS_PATH + profile,
          })
        ).toString()
      );
      if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError(
          'Invalid response received from instance metadata service.'
        );
      }
      return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
    };
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js
var require_types12 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs106 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getInstanceMetadataEndpoint = exports.httpRequest = void 0;
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_fromContainerMetadata3(), exports);
    tslib_1.__exportStar(require_fromInstanceMetadata3(), exports);
    tslib_1.__exportStar(require_RemoteProviderInit3(), exports);
    tslib_1.__exportStar(require_types12(), exports);
    var httpRequest_1 = require_httpRequest9();
    Object.defineProperty(exports, 'httpRequest', {
      enumerable: true,
      get: function () {
        return httpRequest_1.httpRequest;
      },
    });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint3();
    Object.defineProperty(exports, 'getInstanceMetadataEndpoint', {
      enumerable: true,
      get: function () {
        return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
      },
    });
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js
var require_resolveCredentialSource2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveCredentialSource = void 0;
    var credential_provider_env_1 = require_dist_cjs101();
    var credential_provider_imds_1 = require_dist_cjs106();
    var property_provider_1 = require_dist_cjs18();
    var resolveCredentialSource = (credentialSource, profileName) => {
      const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv,
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new property_provider_1.CredentialsProviderError(
          `Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`
        );
      }
    };
    exports.resolveCredentialSource = resolveCredentialSource;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js
var require_resolveAssumeRoleCredentials2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveAssumeRoleCredentials = exports.isAssumeRoleProfile = void 0;
    var property_provider_1 = require_dist_cjs18();
    var shared_ini_file_loader_1 = require_dist_cjs102();
    var resolveCredentialSource_1 = require_resolveCredentialSource2();
    var resolveProfileData_1 = require_resolveProfileData2();
    var isAssumeRoleProfile = (arg) =>
      Boolean(arg) &&
      typeof arg === 'object' &&
      typeof arg.role_arn === 'string' &&
      ['undefined', 'string'].indexOf(typeof arg.role_session_name) > -1 &&
      ['undefined', 'string'].indexOf(typeof arg.external_id) > -1 &&
      ['undefined', 'string'].indexOf(typeof arg.mfa_serial) > -1 &&
      (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));
    exports.isAssumeRoleProfile = isAssumeRoleProfile;
    var isAssumeRoleWithSourceProfile = (arg) =>
      typeof arg.source_profile === 'string' && typeof arg.credential_source === 'undefined';
    var isAssumeRoleWithProviderProfile = (arg) =>
      typeof arg.credential_source === 'string' && typeof arg.source_profile === 'undefined';
    var resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(
          `Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`,
          false
        );
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(
          `Detected a cycle attempting to resolve credentials for profile ${(0,
          shared_ini_file_loader_1.getProfileName)(options)}. Profiles visited: ` +
            Object.keys(visitedProfiles).join(', '),
          false
        );
      }
      const sourceCredsProvider = source_profile
        ? (0, resolveProfileData_1.resolveProfileData)(source_profile, profiles, options, {
            ...visitedProfiles,
            [source_profile]: true,
          })
        : (0, resolveCredentialSource_1.resolveCredentialSource)(data.credential_source, profileName)();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id,
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.CredentialsProviderError(
            `Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`,
            false
          );
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
    exports.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js
var require_resolveSsoCredentials2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveSsoCredentials = exports.isSsoProfile = void 0;
    var credential_provider_sso_1 = require_dist_cjs86();
    var credential_provider_sso_2 = require_dist_cjs86();
    Object.defineProperty(exports, 'isSsoProfile', {
      enumerable: true,
      get: function () {
        return credential_provider_sso_2.isSsoProfile;
      },
    });
    var resolveSsoCredentials = (data) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = (0,
      credential_provider_sso_1.validateSsoProfile)(data);
      return (0, credential_provider_sso_1.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name,
      })();
    };
    exports.resolveSsoCredentials = resolveSsoCredentials;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js
var require_resolveStaticCredentials2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveStaticCredentials = exports.isStaticCredsProfile = void 0;
    var isStaticCredsProfile = (arg) =>
      Boolean(arg) &&
      typeof arg === 'object' &&
      typeof arg.aws_access_key_id === 'string' &&
      typeof arg.aws_secret_access_key === 'string' &&
      ['undefined', 'string'].indexOf(typeof arg.aws_session_token) > -1;
    exports.isStaticCredsProfile = isStaticCredsProfile;
    var resolveStaticCredentials = (profile) =>
      Promise.resolve({
        accessKeyId: profile.aws_access_key_id,
        secretAccessKey: profile.aws_secret_access_key,
        sessionToken: profile.aws_session_token,
      });
    exports.resolveStaticCredentials = resolveStaticCredentials;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js
var require_resolveWebIdentityCredentials2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveWebIdentityCredentials = exports.isWebIdentityProfile = void 0;
    var credential_provider_web_identity_1 = require_dist_cjs88();
    var isWebIdentityProfile = (arg) =>
      Boolean(arg) &&
      typeof arg === 'object' &&
      typeof arg.web_identity_token_file === 'string' &&
      typeof arg.role_arn === 'string' &&
      ['undefined', 'string'].indexOf(typeof arg.role_session_name) > -1;
    exports.isWebIdentityProfile = isWebIdentityProfile;
    var resolveWebIdentityCredentials = async (profile, options) =>
      (0, credential_provider_web_identity_1.fromTokenFile)({
        webIdentityTokenFile: profile.web_identity_token_file,
        roleArn: profile.role_arn,
        roleSessionName: profile.role_session_name,
        roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,
      })();
    exports.resolveWebIdentityCredentials = resolveWebIdentityCredentials;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js
var require_resolveProfileData2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveProfileData = void 0;
    var property_provider_1 = require_dist_cjs18();
    var resolveAssumeRoleCredentials_1 = require_resolveAssumeRoleCredentials2();
    var resolveSsoCredentials_1 = require_resolveSsoCredentials2();
    var resolveStaticCredentials_1 = require_resolveStaticCredentials2();
    var resolveWebIdentityCredentials_1 = require_resolveWebIdentityCredentials2();
    var resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && (0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveAssumeRoleCredentials_1.isAssumeRoleProfile)(data)) {
        return (0, resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials)(
          profileName,
          profiles,
          options,
          visitedProfiles
        );
      }
      if ((0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveWebIdentityCredentials_1.isWebIdentityProfile)(data)) {
        return (0, resolveWebIdentityCredentials_1.resolveWebIdentityCredentials)(data, options);
      }
      if ((0, resolveSsoCredentials_1.isSsoProfile)(data)) {
        return (0, resolveSsoCredentials_1.resolveSsoCredentials)(data);
      }
      throw new property_provider_1.CredentialsProviderError(
        `Profile ${profileName} could not be found or parsed in shared credentials file.`
      );
    };
    exports.resolveProfileData = resolveProfileData;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js
var require_fromIni2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromIni = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs102();
    var resolveProfileData_1 = require_resolveProfileData2();
    var fromIni =
      (init = {}) =>
      async () => {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        return (0, resolveProfileData_1.resolveProfileData)(
          (0, shared_ini_file_loader_1.getProfileName)(init),
          profiles,
          init
        );
      };
    exports.fromIni = fromIni;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs107 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_fromIni2(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js
var require_getValidatedProcessCredentials2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getValidatedProcessCredentials = void 0;
    var getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...(data.SessionToken && { sessionToken: data.SessionToken }),
        ...(data.Expiration && { expiration: new Date(data.Expiration) }),
      };
    };
    exports.getValidatedProcessCredentials = getValidatedProcessCredentials;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveProcessCredentials = void 0;
    var property_provider_1 = require_dist_cjs18();
    var child_process_1 = require('child_process');
    var util_1 = require('util');
    var getValidatedProcessCredentials_1 = require_getValidatedProcessCredentials2();
    var resolveProcessCredentials = async (profileName, profiles) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile['credential_process'];
        if (credentialProcess !== void 0) {
          const execPromise = (0, util_1.promisify)(child_process_1.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch (_a) {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return (0, getValidatedProcessCredentials_1.getValidatedProcessCredentials)(profileName, data);
          } catch (error) {
            throw new property_provider_1.CredentialsProviderError(error.message);
          }
        } else {
          throw new property_provider_1.CredentialsProviderError(
            `Profile ${profileName} did not contain credential_process.`
          );
        }
      } else {
        throw new property_provider_1.CredentialsProviderError(
          `Profile ${profileName} could not be found in shared credentials file.`
        );
      }
    };
    exports.resolveProcessCredentials = resolveProcessCredentials;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js
var require_fromProcess2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromProcess = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs102();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials2();
    var fromProcess =
      (init = {}) =>
      async () => {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        return (0, resolveProcessCredentials_1.resolveProcessCredentials)(
          (0, shared_ini_file_loader_1.getProfileName)(init),
          profiles
        );
      };
    exports.fromProcess = fromProcess;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs108 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_fromProcess2(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js
var require_remoteProvider2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.remoteProvider = exports.ENV_IMDS_DISABLED = void 0;
    var credential_provider_imds_1 = require_dist_cjs106();
    var property_provider_1 = require_dist_cjs18();
    exports.ENV_IMDS_DISABLED = 'AWS_EC2_METADATA_DISABLED';
    var remoteProvider = (init) => {
      if (
        process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] ||
        process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]
      ) {
        return (0, credential_provider_imds_1.fromContainerMetadata)(init);
      }
      if (process.env[exports.ENV_IMDS_DISABLED]) {
        return async () => {
          throw new property_provider_1.CredentialsProviderError('EC2 Instance Metadata Service access disabled');
        };
      }
      return (0, credential_provider_imds_1.fromInstanceMetadata)(init);
    };
    exports.remoteProvider = remoteProvider;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js
var require_defaultProvider2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultProvider = void 0;
    var credential_provider_env_1 = require_dist_cjs101();
    var credential_provider_ini_1 = require_dist_cjs107();
    var credential_provider_process_1 = require_dist_cjs108();
    var credential_provider_sso_1 = require_dist_cjs86();
    var credential_provider_web_identity_1 = require_dist_cjs88();
    var property_provider_1 = require_dist_cjs18();
    var shared_ini_file_loader_1 = require_dist_cjs102();
    var remoteProvider_1 = require_remoteProvider2();
    var defaultProvider = (init = {}) =>
      (0, property_provider_1.memoize)(
        (0, property_provider_1.chain)(
          ...(init.profile || process.env[shared_ini_file_loader_1.ENV_PROFILE]
            ? []
            : [(0, credential_provider_env_1.fromEnv)()]),
          (0, credential_provider_sso_1.fromSSO)(init),
          (0, credential_provider_ini_1.fromIni)(init),
          (0, credential_provider_process_1.fromProcess)(init),
          (0, credential_provider_web_identity_1.fromTokenFile)(init),
          (0, remoteProvider_1.remoteProvider)(init),
          async () => {
            throw new property_provider_1.CredentialsProviderError(
              'Could not load credentials from any providers',
              false
            );
          }
        ),
        (credentials) => credentials.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5,
        (credentials) => credentials.expiration !== void 0
      );
    exports.defaultProvider = defaultProvider;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs109 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_defaultProvider2(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js
var require_dist_cjs110 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromString = exports.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs21();
    var buffer_1 = require('buffer');
    var fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return buffer_1.Buffer.from(input, offset, length);
    };
    exports.fromArrayBuffer = fromArrayBuffer;
    var fromString = (input, encoding) => {
      if (typeof input !== 'string') {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
    };
    exports.fromString = fromString;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/hash-node/dist-cjs/index.js
var require_dist_cjs111 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/hash-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs110();
    var buffer_1 = require('buffer');
    var crypto_1 = require('crypto');
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.hash = secret
          ? (0, crypto_1.createHmac)(algorithmIdentifier, castSourceData(secret))
          : (0, crypto_1.createHash)(algorithmIdentifier);
      }
      update(toHash, encoding) {
        this.hash.update(castSourceData(toHash, encoding));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
    };
    exports.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === 'string') {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
    }
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js
var require_dist_cjs112 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs20();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, util_uri_escape_1.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === 'string') {
            qsEntry += `=${(0, util_uri_escape_1.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join('&');
    }
    exports.buildQueryString = buildQueryString;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js
var require_constants17 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports.NODEJS_TIMEOUT_ERROR_CODES = ['ECONNRESET', 'EPIPE', 'ETIMEDOUT'];
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js
var require_get_transformed_headers3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getTransformedHeaders = void 0;
    var getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(',') : headerValues;
      }
      return transformedHeaders;
    };
    exports.getTransformedHeaders = getTransformedHeaders;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js
var require_set_connection_timeout3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.setConnectionTimeout = void 0;
    var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      request.on('socket', (socket) => {
        if (socket.connecting) {
          const timeoutId = setTimeout(() => {
            request.destroy();
            reject(
              Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
                name: 'TimeoutError',
              })
            );
          }, timeoutInMs);
          socket.on('connect', () => {
            clearTimeout(timeoutId);
          });
        }
      });
    };
    exports.setConnectionTimeout = setConnectionTimeout;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js
var require_set_socket_timeout3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.setSocketTimeout = void 0;
    var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: 'TimeoutError' }));
      });
    };
    exports.setSocketTimeout = setSocketTimeout;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js
var require_write_request_body3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.writeRequestBody = void 0;
    var stream_1 = require('stream');
    function writeRequestBody(httpRequest, request) {
      const expect = request.headers['Expect'] || request.headers['expect'];
      if (expect === '100-continue') {
        httpRequest.on('continue', () => {
          writeBody(httpRequest, request.body);
        });
      } else {
        writeBody(httpRequest, request.body);
      }
    }
    exports.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest);
      } else if (body) {
        httpRequest.end(Buffer.from(body));
      } else {
        httpRequest.end();
      }
    }
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js
var require_node_http_handler3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NodeHttpHandler = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var querystring_builder_1 = require_dist_cjs112();
    var http_1 = require('http');
    var https_1 = require('https');
    var constants_1 = require_constants17();
    var get_transformed_headers_1 = require_get_transformed_headers3();
    var set_connection_timeout_1 = require_set_connection_timeout3();
    var set_socket_timeout_1 = require_set_socket_timeout3();
    var write_request_body_1 = require_write_request_body3();
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: 'http/1.1' };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === 'function') {
            options()
              .then((_options) => {
                resolve(this.resolveDefaultConfig(_options));
              })
              .catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent: httpsAgent || new https_1.Agent({ keepAlive, maxSockets }),
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0
          ? void 0
          : _b.destroy();
        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0
          ? void 0
          : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((resolve, reject) => {
          if (!this.config) {
            throw new Error('Node HTTP request handler config is not resolved');
          }
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error('Request aborted');
            abortError.name = 'AbortError';
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === 'https:';
          const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path: queryString ? `${request.path}?${queryString}` : request.path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent,
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),
              body: res,
            });
            resolve({ response: httpResponse });
          });
          req.on('error', (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: 'TimeoutError' }));
            } else {
              reject(err);
            }
          });
          (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);
          (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.socketTimeout);
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error('Request aborted');
              abortError.name = 'AbortError';
              reject(abortError);
            };
          }
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
    };
    exports.NodeHttpHandler = NodeHttpHandler;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js
var require_node_http2_handler3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var querystring_builder_1 = require_dist_cjs112();
    var http2_1 = require('http2');
    var get_transformed_headers_1 = require_get_transformed_headers3();
    var write_request_body_1 = require_write_request_body3();
    var NodeHttp2Handler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: 'h2' };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === 'function') {
            options()
              .then((opts) => {
                resolve(opts || {});
              })
              .catch(reject);
          } else {
            resolve(options || {});
          }
        });
        this.sessionCache = /* @__PURE__ */ new Map();
      }
      destroy() {
        for (const sessions of this.sessionCache.values()) {
          sessions.forEach((session) => this.destroySession(session));
        }
        this.sessionCache.clear();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((resolve, rejectOriginal) => {
          let fulfilled = false;
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error('Request aborted');
            abortError.name = 'AbortError';
            rejectOriginal(abortError);
            return;
          }
          const { hostname, method, port, protocol, path, query } = request;
          const authority = `${protocol}//${hostname}${port ? `:${port}` : ''}`;
          const session = this.getSession(authority, disableConcurrentStreams || false);
          const reject = (err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            rejectOriginal(err);
          };
          const queryString = (0, querystring_builder_1.buildQueryString)(query || {});
          const req = session.request({
            ...request.headers,
            [http2_1.constants.HTTP2_HEADER_PATH]: queryString ? `${path}?${queryString}` : path,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method,
          });
          session.ref();
          req.on('response', (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[':status'] || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),
              body: req,
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.deleteSessionFromCache(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = 'TimeoutError';
              reject(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error('Request aborted');
              abortError.name = 'AbortError';
              reject(abortError);
            };
          }
          req.on('frameError', (type, code, id) => {
            reject(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on('error', reject);
          req.on('aborted', () => {
            reject(
              new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`)
            );
          });
          req.on('close', () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              reject(new Error('Unexpected error: http2 request did not get a response'));
            }
          });
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
      getSession(authority, disableConcurrentStreams) {
        var _a;
        const sessionCache = this.sessionCache;
        const existingSessions = sessionCache.get(authority) || [];
        if (existingSessions.length > 0 && !disableConcurrentStreams) return existingSessions[0];
        const newSession = (0, http2_1.connect)(authority);
        newSession.unref();
        const destroySessionCb = () => {
          this.destroySession(newSession);
          this.deleteSessionFromCache(authority, newSession);
        };
        newSession.on('goaway', destroySessionCb);
        newSession.on('error', destroySessionCb);
        newSession.on('frameError', destroySessionCb);
        newSession.on('close', () => this.deleteSessionFromCache(authority, newSession));
        if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.sessionTimeout) {
          newSession.setTimeout(this.config.sessionTimeout, destroySessionCb);
        }
        existingSessions.push(newSession);
        sessionCache.set(authority, existingSessions);
        return newSession;
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
      deleteSessionFromCache(authority, session) {
        const existingSessions = this.sessionCache.get(authority) || [];
        if (!existingSessions.includes(session)) {
          return;
        }
        this.sessionCache.set(
          authority,
          existingSessions.filter((s) => s !== session)
        );
      }
    };
    exports.NodeHttp2Handler = NodeHttp2Handler;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js
var require_collector3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Collector = void 0;
    var stream_1 = require('stream');
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    exports.Collector = Collector;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js
var require_stream_collector3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.streamCollector = void 0;
    var collector_1 = require_collector3();
    var streamCollector = (stream) =>
      new Promise((resolve, reject) => {
        const collector = new collector_1.Collector();
        stream.pipe(collector);
        stream.on('error', (err) => {
          collector.end();
          reject(err);
        });
        collector.on('error', reject);
        collector.on('finish', function () {
          const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
          resolve(bytes);
        });
      });
    exports.streamCollector = streamCollector;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js
var require_dist_cjs113 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_node_http_handler3(), exports);
    tslib_1.__exportStar(require_node_http2_handler3(), exports);
    tslib_1.__exportStar(require_stream_collector3(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-base64-node/dist-cjs/index.js
var require_dist_cjs114 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-base64-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toBase64 = exports.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs110();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    function fromBase64(input) {
      if ((input.length * 3) % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, 'base64');
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    }
    exports.fromBase64 = fromBase64;
    function toBase64(input) {
      return (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString(
        'base64'
      );
    }
    exports.toBase64 = toBase64;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js
var require_calculateBodyLength3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.calculateBodyLength = void 0;
    var fs_1 = require('fs');
    var calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === 'string') {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === 'number') {
        return body.byteLength;
      } else if (typeof body.size === 'number') {
        return body.size;
      } else if (typeof body.path === 'string' || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
      } else if (typeof body.fd === 'number') {
        return (0, fs_1.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
    exports.calculateBodyLength = calculateBodyLength;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js
var require_dist_cjs115 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_calculateBodyLength3(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js
var require_is_crt_available3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js'(
    exports,
    module2
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isCrtAvailable = void 0;
    var isCrtAvailable = () => {
      try {
        if (typeof require === 'function' && typeof module2 !== 'undefined' && module2.require && require('aws-crt')) {
          return ['md/crt-avail'];
        }
        return null;
      } catch (e) {
        return null;
      }
    };
    exports.isCrtAvailable = isCrtAvailable;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs116 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultUserAgent = exports.UA_APP_ID_INI_NAME = exports.UA_APP_ID_ENV_NAME = void 0;
    var node_config_provider_1 = require_dist_cjs103();
    var os_1 = require('os');
    var process_1 = require('process');
    var is_crt_available_1 = require_is_crt_available3();
    exports.UA_APP_ID_ENV_NAME = 'AWS_SDK_UA_APP_ID';
    exports.UA_APP_ID_INI_NAME = 'sdk-ua-app-id';
    var defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ['aws-sdk-js', clientVersion],
        [`os/${(0, os_1.platform)()}`, (0, os_1.release)()],
        ['lang/js'],
        ['md/nodejs', `${process_1.versions.node}`],
      ];
      const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env2) => env2[exports.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports.UA_APP_ID_INI_NAME],
        default: void 0,
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    };
    exports.defaultUserAgent = defaultUserAgent;
  },
});

// node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js
var require_dist_cjs117 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toUtf8 = exports.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs110();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, 'utf8');
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
    exports.fromUtf8 = fromUtf8;
    var toUtf8 = (input) =>
      (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString('utf8');
    exports.toUtf8 = toUtf8;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoints.js
var require_endpoints3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoints.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultRegionInfoProvider = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var regionHash = {
      'ca-central-1': {
        variants: [
          {
            hostname: 'dynamodb-fips.ca-central-1.amazonaws.com',
            tags: ['fips'],
          },
        ],
      },
      local: {
        variants: [
          {
            hostname: 'localhost:8000',
            tags: [],
          },
        ],
        signingRegion: 'us-east-1',
      },
      'us-east-1': {
        variants: [
          {
            hostname: 'dynamodb-fips.us-east-1.amazonaws.com',
            tags: ['fips'],
          },
        ],
      },
      'us-east-2': {
        variants: [
          {
            hostname: 'dynamodb-fips.us-east-2.amazonaws.com',
            tags: ['fips'],
          },
        ],
      },
      'us-gov-east-1': {
        variants: [
          {
            hostname: 'dynamodb.us-gov-east-1.amazonaws.com',
            tags: ['fips'],
          },
        ],
      },
      'us-gov-west-1': {
        variants: [
          {
            hostname: 'dynamodb.us-gov-west-1.amazonaws.com',
            tags: ['fips'],
          },
        ],
      },
      'us-west-1': {
        variants: [
          {
            hostname: 'dynamodb-fips.us-west-1.amazonaws.com',
            tags: ['fips'],
          },
        ],
      },
      'us-west-2': {
        variants: [
          {
            hostname: 'dynamodb-fips.us-west-2.amazonaws.com',
            tags: ['fips'],
          },
        ],
      },
    };
    var partitionHash = {
      aws: {
        regions: [
          'af-south-1',
          'ap-east-1',
          'ap-northeast-1',
          'ap-northeast-2',
          'ap-northeast-3',
          'ap-south-1',
          'ap-southeast-1',
          'ap-southeast-2',
          'ap-southeast-3',
          'ca-central-1',
          'ca-central-1-fips',
          'eu-central-1',
          'eu-north-1',
          'eu-south-1',
          'eu-west-1',
          'eu-west-2',
          'eu-west-3',
          'local',
          'me-south-1',
          'sa-east-1',
          'us-east-1',
          'us-east-1-fips',
          'us-east-2',
          'us-east-2-fips',
          'us-west-1',
          'us-west-1-fips',
          'us-west-2',
          'us-west-2-fips',
        ],
        regionRegex: '^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$',
        variants: [
          {
            hostname: 'dynamodb.{region}.amazonaws.com',
            tags: [],
          },
          {
            hostname: 'dynamodb-fips.{region}.amazonaws.com',
            tags: ['fips'],
          },
          {
            hostname: 'dynamodb-fips.{region}.api.aws',
            tags: ['dualstack', 'fips'],
          },
          {
            hostname: 'dynamodb.{region}.api.aws',
            tags: ['dualstack'],
          },
        ],
      },
      'aws-cn': {
        regions: ['cn-north-1', 'cn-northwest-1'],
        regionRegex: '^cn\\-\\w+\\-\\d+$',
        variants: [
          {
            hostname: 'dynamodb.{region}.amazonaws.com.cn',
            tags: [],
          },
          {
            hostname: 'dynamodb-fips.{region}.amazonaws.com.cn',
            tags: ['fips'],
          },
          {
            hostname: 'dynamodb-fips.{region}.api.amazonwebservices.com.cn',
            tags: ['dualstack', 'fips'],
          },
          {
            hostname: 'dynamodb.{region}.api.amazonwebservices.com.cn',
            tags: ['dualstack'],
          },
        ],
      },
      'aws-iso': {
        regions: ['us-iso-east-1', 'us-iso-west-1'],
        regionRegex: '^us\\-iso\\-\\w+\\-\\d+$',
        variants: [
          {
            hostname: 'dynamodb.{region}.c2s.ic.gov',
            tags: [],
          },
          {
            hostname: 'dynamodb-fips.{region}.c2s.ic.gov',
            tags: ['fips'],
          },
        ],
      },
      'aws-iso-b': {
        regions: ['us-isob-east-1'],
        regionRegex: '^us\\-isob\\-\\w+\\-\\d+$',
        variants: [
          {
            hostname: 'dynamodb.{region}.sc2s.sgov.gov',
            tags: [],
          },
          {
            hostname: 'dynamodb-fips.{region}.sc2s.sgov.gov',
            tags: ['fips'],
          },
        ],
      },
      'aws-us-gov': {
        regions: ['us-gov-east-1', 'us-gov-east-1-fips', 'us-gov-west-1', 'us-gov-west-1-fips'],
        regionRegex: '^us\\-gov\\-\\w+\\-\\d+$',
        variants: [
          {
            hostname: 'dynamodb.{region}.amazonaws.com',
            tags: [],
          },
          {
            hostname: 'dynamodb.{region}.amazonaws.com',
            tags: ['fips'],
          },
          {
            hostname: 'dynamodb-fips.{region}.api.aws',
            tags: ['dualstack', 'fips'],
          },
          {
            hostname: 'dynamodb.{region}.api.aws',
            tags: ['dualstack'],
          },
        ],
      },
    };
    var defaultRegionInfoProvider = async (region, options) =>
      (0, config_resolver_1.getRegionInfo)(region, {
        ...options,
        signingService: 'dynamodb',
        regionHash,
        partitionHash,
      });
    exports.defaultRegionInfoProvider = defaultRegionInfoProvider;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.shared.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs105();
    var endpoints_1 = require_endpoints3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e;
      return {
        apiVersion: '2012-08-10',
        disableHostPrefix:
          (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0
            ? _a
            : false,
        logger:
          (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider:
          (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0
            ? _c
            : endpoints_1.defaultRegionInfoProvider,
        serviceId:
          (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0
            ? _d
            : 'DynamoDB',
        urlParser:
          (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0
            ? _e
            : url_parser_1.parseUrl,
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.js
var require_runtimeConfig3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib2();
    var package_json_1 = tslib_1.__importDefault(require_package());
    var client_sts_1 = require_dist_cjs100();
    var config_resolver_1 = require_dist_cjs7();
    var credential_provider_node_1 = require_dist_cjs109();
    var hash_node_1 = require_dist_cjs111();
    var middleware_endpoint_discovery_1 = require_dist_cjs11();
    var middleware_retry_1 = require_dist_cjs17();
    var node_config_provider_1 = require_dist_cjs103();
    var node_http_handler_1 = require_dist_cjs113();
    var util_base64_node_1 = require_dist_cjs114();
    var util_body_length_node_1 = require_dist_cjs115();
    var util_user_agent_node_1 = require_dist_cjs116();
    var util_utf8_node_1 = require_dist_cjs117();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs3();
    var util_defaults_mode_node_1 = require_dist_cjs84();
    var smithy_client_2 = require_dist_cjs3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: 'node',
        defaultsMode,
        base64Decoder:
          (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0
            ? _a
            : util_base64_node_1.fromBase64,
        base64Encoder:
          (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0
            ? _b
            : util_base64_node_1.toBase64,
        bodyLengthChecker:
          (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0
            ? _c
            : util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider:
          (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null &&
          _d !== void 0
            ? _d
            : (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider:
          (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null &&
          _e !== void 0
            ? _e
            : (0, util_user_agent_node_1.defaultUserAgent)({
                serviceId: clientSharedValues.serviceId,
                clientVersion: package_json_1.default.version,
              }),
        endpointDiscoveryEnabledProvider:
          (_f = config === null || config === void 0 ? void 0 : config.endpointDiscoveryEnabledProvider) !== null &&
          _f !== void 0
            ? _f
            : (0, node_config_provider_1.loadConfig)(
                middleware_endpoint_discovery_1.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS
              ),
        maxAttempts:
          (_g = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _g !== void 0
            ? _g
            : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region:
          (_h = config === null || config === void 0 ? void 0 : config.region) !== null && _h !== void 0
            ? _h
            : (0, node_config_provider_1.loadConfig)(
                config_resolver_1.NODE_REGION_CONFIG_OPTIONS,
                config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS
              ),
        requestHandler:
          (_j = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _j !== void 0
            ? _j
            : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode:
          (_k = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _k !== void 0
            ? _k
            : (0, node_config_provider_1.loadConfig)({
                ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
                default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE,
              }),
        sha256:
          (_l = config === null || config === void 0 ? void 0 : config.sha256) !== null && _l !== void 0
            ? _l
            : hash_node_1.Hash.bind(null, 'sha256'),
        streamCollector:
          (_m = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _m !== void 0
            ? _m
            : node_http_handler_1.streamCollector,
        useDualstackEndpoint:
          (_o = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _o !== void 0
            ? _o
            : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint:
          (_p = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _p !== void 0
            ? _p
            : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder:
          (_q = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _q !== void 0
            ? _q
            : util_utf8_node_1.fromUtf8,
        utf8Encoder:
          (_r = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _r !== void 0
            ? _r
            : util_utf8_node_1.toUtf8,
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDBClient.js
var require_DynamoDBClient = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDBClient.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDBClient = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var middleware_content_length_1 = require_dist_cjs8();
    var middleware_endpoint_discovery_1 = require_dist_cjs11();
    var middleware_host_header_1 = require_dist_cjs12();
    var middleware_logger_1 = require_dist_cjs13();
    var middleware_recursion_detection_1 = require_dist_cjs15();
    var middleware_retry_1 = require_dist_cjs17();
    var middleware_signing_1 = require_dist_cjs23();
    var middleware_user_agent_1 = require_dist_cjs24();
    var smithy_client_1 = require_dist_cjs3();
    var DescribeEndpointsCommand_1 = require_DescribeEndpointsCommand();
    var runtimeConfig_1 = require_runtimeConfig3();
    var DynamoDBClient2 = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, config_resolver_1.resolveRegionConfig)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveEndpointsConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_3);
        const _config_5 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        const _config_7 = (0, middleware_endpoint_discovery_1.resolveEndpointDiscoveryConfig)(_config_6, {
          endpointDiscoveryCommandCtor: DescribeEndpointsCommand_1.DescribeEndpointsCommand,
        });
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.DynamoDBClient = DynamoDBClient2;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDB.js
var require_DynamoDB = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDB.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDB = void 0;
    var BatchExecuteStatementCommand_1 = require_BatchExecuteStatementCommand();
    var BatchGetItemCommand_1 = require_BatchGetItemCommand();
    var BatchWriteItemCommand_1 = require_BatchWriteItemCommand();
    var CreateBackupCommand_1 = require_CreateBackupCommand();
    var CreateGlobalTableCommand_1 = require_CreateGlobalTableCommand();
    var CreateTableCommand_1 = require_CreateTableCommand();
    var DeleteBackupCommand_1 = require_DeleteBackupCommand();
    var DeleteItemCommand_1 = require_DeleteItemCommand();
    var DeleteTableCommand_1 = require_DeleteTableCommand();
    var DescribeBackupCommand_1 = require_DescribeBackupCommand();
    var DescribeContinuousBackupsCommand_1 = require_DescribeContinuousBackupsCommand();
    var DescribeContributorInsightsCommand_1 = require_DescribeContributorInsightsCommand();
    var DescribeEndpointsCommand_1 = require_DescribeEndpointsCommand();
    var DescribeExportCommand_1 = require_DescribeExportCommand();
    var DescribeGlobalTableCommand_1 = require_DescribeGlobalTableCommand();
    var DescribeGlobalTableSettingsCommand_1 = require_DescribeGlobalTableSettingsCommand();
    var DescribeKinesisStreamingDestinationCommand_1 = require_DescribeKinesisStreamingDestinationCommand();
    var DescribeLimitsCommand_1 = require_DescribeLimitsCommand();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var DescribeTableReplicaAutoScalingCommand_1 = require_DescribeTableReplicaAutoScalingCommand();
    var DescribeTimeToLiveCommand_1 = require_DescribeTimeToLiveCommand();
    var DisableKinesisStreamingDestinationCommand_1 = require_DisableKinesisStreamingDestinationCommand();
    var EnableKinesisStreamingDestinationCommand_1 = require_EnableKinesisStreamingDestinationCommand();
    var ExecuteStatementCommand_1 = require_ExecuteStatementCommand();
    var ExecuteTransactionCommand_1 = require_ExecuteTransactionCommand();
    var ExportTableToPointInTimeCommand_1 = require_ExportTableToPointInTimeCommand();
    var GetItemCommand_1 = require_GetItemCommand();
    var ListBackupsCommand_1 = require_ListBackupsCommand();
    var ListContributorInsightsCommand_1 = require_ListContributorInsightsCommand();
    var ListExportsCommand_1 = require_ListExportsCommand();
    var ListGlobalTablesCommand_1 = require_ListGlobalTablesCommand();
    var ListTablesCommand_1 = require_ListTablesCommand();
    var ListTagsOfResourceCommand_1 = require_ListTagsOfResourceCommand();
    var PutItemCommand_1 = require_PutItemCommand();
    var QueryCommand_1 = require_QueryCommand();
    var RestoreTableFromBackupCommand_1 = require_RestoreTableFromBackupCommand();
    var RestoreTableToPointInTimeCommand_1 = require_RestoreTableToPointInTimeCommand();
    var ScanCommand_1 = require_ScanCommand();
    var TagResourceCommand_1 = require_TagResourceCommand();
    var TransactGetItemsCommand_1 = require_TransactGetItemsCommand();
    var TransactWriteItemsCommand_1 = require_TransactWriteItemsCommand();
    var UntagResourceCommand_1 = require_UntagResourceCommand();
    var UpdateContinuousBackupsCommand_1 = require_UpdateContinuousBackupsCommand();
    var UpdateContributorInsightsCommand_1 = require_UpdateContributorInsightsCommand();
    var UpdateGlobalTableCommand_1 = require_UpdateGlobalTableCommand();
    var UpdateGlobalTableSettingsCommand_1 = require_UpdateGlobalTableSettingsCommand();
    var UpdateItemCommand_1 = require_UpdateItemCommand();
    var UpdateTableCommand_1 = require_UpdateTableCommand();
    var UpdateTableReplicaAutoScalingCommand_1 = require_UpdateTableReplicaAutoScalingCommand();
    var UpdateTimeToLiveCommand_1 = require_UpdateTimeToLiveCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var DynamoDB = class extends DynamoDBClient_1.DynamoDBClient {
      batchExecuteStatement(args, optionsOrCb, cb) {
        const command = new BatchExecuteStatementCommand_1.BatchExecuteStatementCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchGetItem(args, optionsOrCb, cb) {
        const command = new BatchGetItemCommand_1.BatchGetItemCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchWriteItem(args, optionsOrCb, cb) {
        const command = new BatchWriteItemCommand_1.BatchWriteItemCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createBackup(args, optionsOrCb, cb) {
        const command = new CreateBackupCommand_1.CreateBackupCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createGlobalTable(args, optionsOrCb, cb) {
        const command = new CreateGlobalTableCommand_1.CreateGlobalTableCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createTable(args, optionsOrCb, cb) {
        const command = new CreateTableCommand_1.CreateTableCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteBackup(args, optionsOrCb, cb) {
        const command = new DeleteBackupCommand_1.DeleteBackupCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteItem(args, optionsOrCb, cb) {
        const command = new DeleteItemCommand_1.DeleteItemCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteTable(args, optionsOrCb, cb) {
        const command = new DeleteTableCommand_1.DeleteTableCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeBackup(args, optionsOrCb, cb) {
        const command = new DescribeBackupCommand_1.DescribeBackupCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeContinuousBackups(args, optionsOrCb, cb) {
        const command = new DescribeContinuousBackupsCommand_1.DescribeContinuousBackupsCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeContributorInsights(args, optionsOrCb, cb) {
        const command = new DescribeContributorInsightsCommand_1.DescribeContributorInsightsCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeEndpoints(args, optionsOrCb, cb) {
        const command = new DescribeEndpointsCommand_1.DescribeEndpointsCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeExport(args, optionsOrCb, cb) {
        const command = new DescribeExportCommand_1.DescribeExportCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeGlobalTable(args, optionsOrCb, cb) {
        const command = new DescribeGlobalTableCommand_1.DescribeGlobalTableCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeGlobalTableSettings(args, optionsOrCb, cb) {
        const command = new DescribeGlobalTableSettingsCommand_1.DescribeGlobalTableSettingsCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeKinesisStreamingDestination(args, optionsOrCb, cb) {
        const command = new DescribeKinesisStreamingDestinationCommand_1.DescribeKinesisStreamingDestinationCommand(
          args
        );
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeLimits(args, optionsOrCb, cb) {
        const command = new DescribeLimitsCommand_1.DescribeLimitsCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeTable(args, optionsOrCb, cb) {
        const command = new DescribeTableCommand_1.DescribeTableCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeTableReplicaAutoScaling(args, optionsOrCb, cb) {
        const command = new DescribeTableReplicaAutoScalingCommand_1.DescribeTableReplicaAutoScalingCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeTimeToLive(args, optionsOrCb, cb) {
        const command = new DescribeTimeToLiveCommand_1.DescribeTimeToLiveCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      disableKinesisStreamingDestination(args, optionsOrCb, cb) {
        const command = new DisableKinesisStreamingDestinationCommand_1.DisableKinesisStreamingDestinationCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      enableKinesisStreamingDestination(args, optionsOrCb, cb) {
        const command = new EnableKinesisStreamingDestinationCommand_1.EnableKinesisStreamingDestinationCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      executeStatement(args, optionsOrCb, cb) {
        const command = new ExecuteStatementCommand_1.ExecuteStatementCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      executeTransaction(args, optionsOrCb, cb) {
        const command = new ExecuteTransactionCommand_1.ExecuteTransactionCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      exportTableToPointInTime(args, optionsOrCb, cb) {
        const command = new ExportTableToPointInTimeCommand_1.ExportTableToPointInTimeCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getItem(args, optionsOrCb, cb) {
        const command = new GetItemCommand_1.GetItemCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listBackups(args, optionsOrCb, cb) {
        const command = new ListBackupsCommand_1.ListBackupsCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listContributorInsights(args, optionsOrCb, cb) {
        const command = new ListContributorInsightsCommand_1.ListContributorInsightsCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listExports(args, optionsOrCb, cb) {
        const command = new ListExportsCommand_1.ListExportsCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listGlobalTables(args, optionsOrCb, cb) {
        const command = new ListGlobalTablesCommand_1.ListGlobalTablesCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listTables(args, optionsOrCb, cb) {
        const command = new ListTablesCommand_1.ListTablesCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listTagsOfResource(args, optionsOrCb, cb) {
        const command = new ListTagsOfResourceCommand_1.ListTagsOfResourceCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putItem(args, optionsOrCb, cb) {
        const command = new PutItemCommand_1.PutItemCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      query(args, optionsOrCb, cb) {
        const command = new QueryCommand_1.QueryCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      restoreTableFromBackup(args, optionsOrCb, cb) {
        const command = new RestoreTableFromBackupCommand_1.RestoreTableFromBackupCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      restoreTableToPointInTime(args, optionsOrCb, cb) {
        const command = new RestoreTableToPointInTimeCommand_1.RestoreTableToPointInTimeCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      scan(args, optionsOrCb, cb) {
        const command = new ScanCommand_1.ScanCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      tagResource(args, optionsOrCb, cb) {
        const command = new TagResourceCommand_1.TagResourceCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      transactGetItems(args, optionsOrCb, cb) {
        const command = new TransactGetItemsCommand_1.TransactGetItemsCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      transactWriteItems(args, optionsOrCb, cb) {
        const command = new TransactWriteItemsCommand_1.TransactWriteItemsCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      untagResource(args, optionsOrCb, cb) {
        const command = new UntagResourceCommand_1.UntagResourceCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateContinuousBackups(args, optionsOrCb, cb) {
        const command = new UpdateContinuousBackupsCommand_1.UpdateContinuousBackupsCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateContributorInsights(args, optionsOrCb, cb) {
        const command = new UpdateContributorInsightsCommand_1.UpdateContributorInsightsCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateGlobalTable(args, optionsOrCb, cb) {
        const command = new UpdateGlobalTableCommand_1.UpdateGlobalTableCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateGlobalTableSettings(args, optionsOrCb, cb) {
        const command = new UpdateGlobalTableSettingsCommand_1.UpdateGlobalTableSettingsCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateItem(args, optionsOrCb, cb) {
        const command = new UpdateItemCommand_1.UpdateItemCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateTable(args, optionsOrCb, cb) {
        const command = new UpdateTableCommand_1.UpdateTableCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateTableReplicaAutoScaling(args, optionsOrCb, cb) {
        const command = new UpdateTableReplicaAutoScalingCommand_1.UpdateTableReplicaAutoScalingCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateTimeToLive(args, optionsOrCb, cb) {
        const command = new UpdateTimeToLiveCommand_1.UpdateTimeToLiveCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.DynamoDB = DynamoDB;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/index.js
var require_commands3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_BatchExecuteStatementCommand(), exports);
    tslib_1.__exportStar(require_BatchGetItemCommand(), exports);
    tslib_1.__exportStar(require_BatchWriteItemCommand(), exports);
    tslib_1.__exportStar(require_CreateBackupCommand(), exports);
    tslib_1.__exportStar(require_CreateGlobalTableCommand(), exports);
    tslib_1.__exportStar(require_CreateTableCommand(), exports);
    tslib_1.__exportStar(require_DeleteBackupCommand(), exports);
    tslib_1.__exportStar(require_DeleteItemCommand(), exports);
    tslib_1.__exportStar(require_DeleteTableCommand(), exports);
    tslib_1.__exportStar(require_DescribeBackupCommand(), exports);
    tslib_1.__exportStar(require_DescribeContinuousBackupsCommand(), exports);
    tslib_1.__exportStar(require_DescribeContributorInsightsCommand(), exports);
    tslib_1.__exportStar(require_DescribeEndpointsCommand(), exports);
    tslib_1.__exportStar(require_DescribeExportCommand(), exports);
    tslib_1.__exportStar(require_DescribeGlobalTableCommand(), exports);
    tslib_1.__exportStar(require_DescribeGlobalTableSettingsCommand(), exports);
    tslib_1.__exportStar(require_DescribeKinesisStreamingDestinationCommand(), exports);
    tslib_1.__exportStar(require_DescribeLimitsCommand(), exports);
    tslib_1.__exportStar(require_DescribeTableCommand(), exports);
    tslib_1.__exportStar(require_DescribeTableReplicaAutoScalingCommand(), exports);
    tslib_1.__exportStar(require_DescribeTimeToLiveCommand(), exports);
    tslib_1.__exportStar(require_DisableKinesisStreamingDestinationCommand(), exports);
    tslib_1.__exportStar(require_EnableKinesisStreamingDestinationCommand(), exports);
    tslib_1.__exportStar(require_ExecuteStatementCommand(), exports);
    tslib_1.__exportStar(require_ExecuteTransactionCommand(), exports);
    tslib_1.__exportStar(require_ExportTableToPointInTimeCommand(), exports);
    tslib_1.__exportStar(require_GetItemCommand(), exports);
    tslib_1.__exportStar(require_ListBackupsCommand(), exports);
    tslib_1.__exportStar(require_ListContributorInsightsCommand(), exports);
    tslib_1.__exportStar(require_ListExportsCommand(), exports);
    tslib_1.__exportStar(require_ListGlobalTablesCommand(), exports);
    tslib_1.__exportStar(require_ListTablesCommand(), exports);
    tslib_1.__exportStar(require_ListTagsOfResourceCommand(), exports);
    tslib_1.__exportStar(require_PutItemCommand(), exports);
    tslib_1.__exportStar(require_QueryCommand(), exports);
    tslib_1.__exportStar(require_RestoreTableFromBackupCommand(), exports);
    tslib_1.__exportStar(require_RestoreTableToPointInTimeCommand(), exports);
    tslib_1.__exportStar(require_ScanCommand(), exports);
    tslib_1.__exportStar(require_TagResourceCommand(), exports);
    tslib_1.__exportStar(require_TransactGetItemsCommand(), exports);
    tslib_1.__exportStar(require_TransactWriteItemsCommand(), exports);
    tslib_1.__exportStar(require_UntagResourceCommand(), exports);
    tslib_1.__exportStar(require_UpdateContinuousBackupsCommand(), exports);
    tslib_1.__exportStar(require_UpdateContributorInsightsCommand(), exports);
    tslib_1.__exportStar(require_UpdateGlobalTableCommand(), exports);
    tslib_1.__exportStar(require_UpdateGlobalTableSettingsCommand(), exports);
    tslib_1.__exportStar(require_UpdateItemCommand(), exports);
    tslib_1.__exportStar(require_UpdateTableCommand(), exports);
    tslib_1.__exportStar(require_UpdateTableReplicaAutoScalingCommand(), exports);
    tslib_1.__exportStar(require_UpdateTimeToLiveCommand(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/index.js
var require_models3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_models_0(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/Interfaces.js
var require_Interfaces2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/Interfaces.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListContributorInsightsPaginator.js
var require_ListContributorInsightsPaginator = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListContributorInsightsPaginator.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateListContributorInsights = void 0;
    var ListContributorInsightsCommand_1 = require_ListContributorInsightsCommand();
    var DynamoDB_1 = require_DynamoDB();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListContributorInsightsCommand_1.ListContributorInsightsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listContributorInsights(input, ...args);
    };
    async function* paginateListContributorInsights(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input['MaxResults'] = config.pageSize;
        if (config.client instanceof DynamoDB_1.DynamoDB) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error('Invalid client, expected DynamoDB | DynamoDBClient');
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListContributorInsights = paginateListContributorInsights;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListExportsPaginator.js
var require_ListExportsPaginator = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListExportsPaginator.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateListExports = void 0;
    var ListExportsCommand_1 = require_ListExportsCommand();
    var DynamoDB_1 = require_DynamoDB();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListExportsCommand_1.ListExportsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listExports(input, ...args);
    };
    async function* paginateListExports(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input['MaxResults'] = config.pageSize;
        if (config.client instanceof DynamoDB_1.DynamoDB) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error('Invalid client, expected DynamoDB | DynamoDBClient');
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListExports = paginateListExports;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListTablesPaginator.js
var require_ListTablesPaginator = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListTablesPaginator.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateListTables = void 0;
    var ListTablesCommand_1 = require_ListTablesCommand();
    var DynamoDB_1 = require_DynamoDB();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListTablesCommand_1.ListTablesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listTables(input, ...args);
    };
    async function* paginateListTables(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartTableName = token;
        input['Limit'] = config.pageSize;
        if (config.client instanceof DynamoDB_1.DynamoDB) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error('Invalid client, expected DynamoDB | DynamoDBClient');
        }
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedTableName;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListTables = paginateListTables;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/QueryPaginator.js
var require_QueryPaginator = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/QueryPaginator.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateQuery = void 0;
    var QueryCommand_1 = require_QueryCommand();
    var DynamoDB_1 = require_DynamoDB();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new QueryCommand_1.QueryCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.query(input, ...args);
    };
    async function* paginateQuery(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input['Limit'] = config.pageSize;
        if (config.client instanceof DynamoDB_1.DynamoDB) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error('Invalid client, expected DynamoDB | DynamoDBClient');
        }
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedKey;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateQuery = paginateQuery;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ScanPaginator.js
var require_ScanPaginator = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ScanPaginator.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateScan = void 0;
    var ScanCommand_1 = require_ScanCommand();
    var DynamoDB_1 = require_DynamoDB();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ScanCommand_1.ScanCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.scan(input, ...args);
    };
    async function* paginateScan(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input['Limit'] = config.pageSize;
        if (config.client instanceof DynamoDB_1.DynamoDB) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error('Invalid client, expected DynamoDB | DynamoDBClient');
        }
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedKey;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateScan = paginateScan;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/index.js
var require_pagination2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_Interfaces2(), exports);
    tslib_1.__exportStar(require_ListContributorInsightsPaginator(), exports);
    tslib_1.__exportStar(require_ListExportsPaginator(), exports);
    tslib_1.__exportStar(require_ListTablesPaginator(), exports);
    tslib_1.__exportStar(require_QueryPaginator(), exports);
    tslib_1.__exportStar(require_ScanPaginator(), exports);
  },
});

// node_modules/@aws-sdk/util-waiter/node_modules/tslib/tslib.js
var require_tslib15 = __commonJS({
  'node_modules/@aws-sdk/util-waiter/node_modules/tslib/tslib.js'(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function (factory) {
      var root =
        typeof global === 'object' ? global : typeof self === 'object' ? self : typeof this === 'object' ? this : {};
      if (typeof define === 'function' && define.amd) {
        define('tslib', ['exports'], function (exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === 'object' && typeof module2.exports === 'object') {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === 'function') {
            Object.defineProperty(exports2, '__esModule', { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function (id, v) {
          return (exports2[id] = previous ? previous(id, v) : v);
        };
      }
    })(function (exporter) {
      var extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      __extends = function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
      __assign =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function (decorators, target, key, desc) {
        var c = arguments.length,
          r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
          d;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function (thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g;
        return (
          (g = { next: verb(0), throw: verb(1), return: verb(2) }),
          typeof Symbol === 'function' &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError('Generator is already executing.');
          while (_)
            try {
              if (
                ((f = 1),
                y &&
                  (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function (m, o) {
        for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
      };
      __createBinding = Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          };
      __values = function (o) {
        var s = typeof Symbol === 'function' && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === 'number')
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            },
          };
        throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      };
      __read = function (o, n) {
        var m = typeof Symbol === 'function' && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i['return'])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
        return r;
      };
      __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function (v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      };
      __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = {}),
          verb('next'),
          verb('throw'),
          verb('return'),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        function verb(n) {
          if (g[n])
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume('next', value);
        }
        function reject(value) {
          resume('throw', value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function (o) {
        var i, p;
        return (
          (i = {}),
          verb('next'),
          verb('throw', function (e) {
            throw e;
          }),
          verb('return'),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p) ? { value: __await(o[n](v)), done: n === 'return' } : f ? f(v) : v;
              }
            : f;
        }
      };
      __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, 'raw', { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          };
      __importStar = function (mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      __importDefault = function (mod2) {
        return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
      };
      __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot read private member from an object whose class did not declare it');
        return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot write private member to an object whose class did not declare it');
        return kind === 'a' ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== 'object' && typeof receiver !== 'function'))
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === 'function' ? receiver === state : state.has(receiver);
      };
      exporter('__extends', __extends);
      exporter('__assign', __assign);
      exporter('__rest', __rest);
      exporter('__decorate', __decorate);
      exporter('__param', __param);
      exporter('__metadata', __metadata);
      exporter('__awaiter', __awaiter);
      exporter('__generator', __generator);
      exporter('__exportStar', __exportStar);
      exporter('__createBinding', __createBinding);
      exporter('__values', __values);
      exporter('__read', __read);
      exporter('__spread', __spread);
      exporter('__spreadArrays', __spreadArrays);
      exporter('__spreadArray', __spreadArray);
      exporter('__await', __await);
      exporter('__asyncGenerator', __asyncGenerator);
      exporter('__asyncDelegator', __asyncDelegator);
      exporter('__asyncValues', __asyncValues);
      exporter('__makeTemplateObject', __makeTemplateObject);
      exporter('__importStar', __importStar);
      exporter('__importDefault', __importDefault);
      exporter('__classPrivateFieldGet', __classPrivateFieldGet);
      exporter('__classPrivateFieldSet', __classPrivateFieldSet);
      exporter('__classPrivateFieldIn', __classPrivateFieldIn);
    });
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js
var require_sleep = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.sleep = void 0;
    var sleep = (seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    };
    exports.sleep = sleep;
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js
var require_waiter = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.checkExceptions = exports.WaiterState = exports.waiterServiceDefaults = void 0;
    exports.waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120,
    };
    var WaiterState;
    (function (WaiterState2) {
      WaiterState2['ABORTED'] = 'ABORTED';
      WaiterState2['FAILURE'] = 'FAILURE';
      WaiterState2['SUCCESS'] = 'SUCCESS';
      WaiterState2['RETRY'] = 'RETRY';
      WaiterState2['TIMEOUT'] = 'TIMEOUT';
    })((WaiterState = exports.WaiterState || (exports.WaiterState = {})));
    var checkExceptions = (result) => {
      if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(
          `${JSON.stringify({
            ...result,
            reason: 'Request was aborted',
          })}`
        );
        abortError.name = 'AbortError';
        throw abortError;
      } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(
          `${JSON.stringify({
            ...result,
            reason: 'Waiter has timed out',
          })}`
        );
        timeoutError.name = 'TimeoutError';
        throw timeoutError;
      } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({ result })}`);
      }
      return result;
    };
    exports.checkExceptions = checkExceptions;
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js
var require_poller = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.runPolling = void 0;
    var sleep_1 = require_sleep();
    var waiter_1 = require_waiter();
    var exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling) return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    };
    var randomInRange = (min, max) => min + Math.random() * (max - min);
    var runPolling = async (
      { minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal },
      input,
      acceptorChecks
    ) => {
      var _a;
      const { state } = await acceptorChecks(client, input);
      if (state !== waiter_1.WaiterState.RETRY) {
        return { state };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (
          ((_a = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null ||
          _a === void 0
            ? void 0
            : _a.aborted) ||
          (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)
        ) {
          return { state: waiter_1.WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: waiter_1.WaiterState.TIMEOUT };
        }
        await (0, sleep_1.sleep)(delay);
        const { state: state2 } = await acceptorChecks(client, input);
        if (state2 !== waiter_1.WaiterState.RETRY) {
          return { state: state2 };
        }
        currentAttempt += 1;
      }
    };
    exports.runPolling = runPolling;
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js
var require_validate2 = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.validateWaiterOptions = void 0;
    var validateWaiterOptions = (options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(
          `WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`
        );
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(
          `WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`
        );
      }
    };
    exports.validateWaiterOptions = validateWaiterOptions;
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js
var require_utils = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib15();
    tslib_1.__exportStar(require_sleep(), exports);
    tslib_1.__exportStar(require_validate2(), exports);
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js
var require_createWaiter = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.createWaiter = void 0;
    var poller_1 = require_poller();
    var utils_1 = require_utils();
    var waiter_1 = require_waiter();
    var abortTimeout = async (abortSignal) => {
      return new Promise((resolve) => {
        abortSignal.onabort = () => resolve({ state: waiter_1.WaiterState.ABORTED });
      });
    };
    var createWaiter = async (options, input, acceptorChecks) => {
      const params = {
        ...waiter_1.waiterServiceDefaults,
        ...options,
      };
      (0, utils_1.validateWaiterOptions)(params);
      const exitConditions = [(0, poller_1.runPolling)(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    };
    exports.createWaiter = createWaiter;
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/index.js
var require_dist_cjs118 = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib15();
    tslib_1.__exportStar(require_createWaiter(), exports);
    tslib_1.__exportStar(require_waiter(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableExists.js
var require_waitForTableExists = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableExists.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.waitUntilTableExists = exports.waitForTableExists = void 0;
    var util_waiter_1 = require_dist_cjs118();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeTableCommand_1.DescribeTableCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.Table.TableStatus;
          };
          if (returnComparator() === 'ACTIVE') {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {}
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == 'ResourceNotFoundException') {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForTableExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForTableExists = waitForTableExists;
    var waitUntilTableExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilTableExists = waitUntilTableExists;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableNotExists.js
var require_waitForTableNotExists = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableNotExists.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.waitUntilTableNotExists = exports.waitForTableNotExists = void 0;
    var util_waiter_1 = require_dist_cjs118();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeTableCommand_1.DescribeTableCommand(input));
        reason = result;
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == 'ResourceNotFoundException') {
          return { state: util_waiter_1.WaiterState.SUCCESS, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForTableNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForTableNotExists = waitForTableNotExists;
    var waitUntilTableNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilTableNotExists = waitUntilTableNotExists;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/index.js
var require_waiters = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_waitForTableExists(), exports);
    tslib_1.__exportStar(require_waitForTableNotExists(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/index.js
var require_dist_cjs119 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDBServiceException = void 0;
    var tslib_1 = require_tslib2();
    tslib_1.__exportStar(require_DynamoDB(), exports);
    tslib_1.__exportStar(require_DynamoDBClient(), exports);
    tslib_1.__exportStar(require_commands3(), exports);
    tslib_1.__exportStar(require_models3(), exports);
    tslib_1.__exportStar(require_pagination2(), exports);
    tslib_1.__exportStar(require_waiters(), exports);
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    Object.defineProperty(exports, 'DynamoDBServiceException', {
      enumerable: true,
      get: function () {
        return DynamoDBServiceException_1.DynamoDBServiceException;
      },
    });
  },
});

// node_modules/@aws-sdk/util-dynamodb/node_modules/tslib/tslib.js
var require_tslib16 = __commonJS({
  'node_modules/@aws-sdk/util-dynamodb/node_modules/tslib/tslib.js'(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function (factory) {
      var root =
        typeof global === 'object' ? global : typeof self === 'object' ? self : typeof this === 'object' ? this : {};
      if (typeof define === 'function' && define.amd) {
        define('tslib', ['exports'], function (exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === 'object' && typeof module2.exports === 'object') {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === 'function') {
            Object.defineProperty(exports2, '__esModule', { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function (id, v) {
          return (exports2[id] = previous ? previous(id, v) : v);
        };
      }
    })(function (exporter) {
      var extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      __extends = function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
      __assign =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function (decorators, target, key, desc) {
        var c = arguments.length,
          r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
          d;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function (thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g;
        return (
          (g = { next: verb(0), throw: verb(1), return: verb(2) }),
          typeof Symbol === 'function' &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError('Generator is already executing.');
          while (_)
            try {
              if (
                ((f = 1),
                y &&
                  (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function (m, o) {
        for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
      };
      __createBinding = Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          };
      __values = function (o) {
        var s = typeof Symbol === 'function' && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === 'number')
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            },
          };
        throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      };
      __read = function (o, n) {
        var m = typeof Symbol === 'function' && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i['return'])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
        return r;
      };
      __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function (v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      };
      __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = {}),
          verb('next'),
          verb('throw'),
          verb('return'),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        function verb(n) {
          if (g[n])
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume('next', value);
        }
        function reject(value) {
          resume('throw', value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function (o) {
        var i, p;
        return (
          (i = {}),
          verb('next'),
          verb('throw', function (e) {
            throw e;
          }),
          verb('return'),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p) ? { value: __await(o[n](v)), done: n === 'return' } : f ? f(v) : v;
              }
            : f;
        }
      };
      __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, 'raw', { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          };
      __importStar = function (mod2) {
        if (mod2 && mod2.__esModule) return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      __importDefault = function (mod2) {
        return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
      };
      __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot read private member from an object whose class did not declare it');
        return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot write private member to an object whose class did not declare it');
        return kind === 'a' ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== 'object' && typeof receiver !== 'function'))
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === 'function' ? receiver === state : state.has(receiver);
      };
      exporter('__extends', __extends);
      exporter('__assign', __assign);
      exporter('__rest', __rest);
      exporter('__decorate', __decorate);
      exporter('__param', __param);
      exporter('__metadata', __metadata);
      exporter('__awaiter', __awaiter);
      exporter('__generator', __generator);
      exporter('__exportStar', __exportStar);
      exporter('__createBinding', __createBinding);
      exporter('__values', __values);
      exporter('__read', __read);
      exporter('__spread', __spread);
      exporter('__spreadArrays', __spreadArrays);
      exporter('__spreadArray', __spreadArray);
      exporter('__await', __await);
      exporter('__asyncGenerator', __asyncGenerator);
      exporter('__asyncDelegator', __asyncDelegator);
      exporter('__asyncValues', __asyncValues);
      exporter('__makeTemplateObject', __makeTemplateObject);
      exporter('__importStar', __importStar);
      exporter('__importDefault', __importDefault);
      exporter('__classPrivateFieldGet', __classPrivateFieldGet);
      exporter('__classPrivateFieldSet', __classPrivateFieldSet);
      exporter('__classPrivateFieldIn', __classPrivateFieldIn);
    });
  },
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToAttr.js
var require_convertToAttr = __commonJS({
  'node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToAttr.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.convertToAttr = void 0;
    var convertToAttr = (data, options) => {
      var _a, _b, _c, _d, _e, _f;
      if (data === void 0) {
        throw new Error(`Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.`);
      } else if (data === null && typeof data === 'object') {
        return convertToNullAttr();
      } else if (Array.isArray(data)) {
        return convertToListAttr(data, options);
      } else if (
        ((_a = data === null || data === void 0 ? void 0 : data.constructor) === null || _a === void 0
          ? void 0
          : _a.name) === 'Set'
      ) {
        return convertToSetAttr(data, options);
      } else if (
        ((_b = data === null || data === void 0 ? void 0 : data.constructor) === null || _b === void 0
          ? void 0
          : _b.name) === 'Map'
      ) {
        return convertToMapAttrFromIterable(data, options);
      } else if (
        ((_c = data === null || data === void 0 ? void 0 : data.constructor) === null || _c === void 0
          ? void 0
          : _c.name) === 'Object' ||
        (!data.constructor && typeof data === 'object')
      ) {
        return convertToMapAttrFromEnumerableProps(data, options);
      } else if (isBinary(data)) {
        if (data.length === 0 && (options === null || options === void 0 ? void 0 : options.convertEmptyValues)) {
          return convertToNullAttr();
        }
        return convertToBinaryAttr(data);
      } else if (
        typeof data === 'boolean' ||
        ((_d = data === null || data === void 0 ? void 0 : data.constructor) === null || _d === void 0
          ? void 0
          : _d.name) === 'Boolean'
      ) {
        return { BOOL: data.valueOf() };
      } else if (
        typeof data === 'number' ||
        ((_e = data === null || data === void 0 ? void 0 : data.constructor) === null || _e === void 0
          ? void 0
          : _e.name) === 'Number'
      ) {
        return convertToNumberAttr(data);
      } else if (typeof data === 'bigint') {
        return convertToBigIntAttr(data);
      } else if (
        typeof data === 'string' ||
        ((_f = data === null || data === void 0 ? void 0 : data.constructor) === null || _f === void 0
          ? void 0
          : _f.name) === 'String'
      ) {
        if (data.length === 0 && (options === null || options === void 0 ? void 0 : options.convertEmptyValues)) {
          return convertToNullAttr();
        }
        return convertToStringAttr(data);
      } else if (
        (options === null || options === void 0 ? void 0 : options.convertClassInstanceToMap) &&
        typeof data === 'object'
      ) {
        return convertToMapAttrFromEnumerableProps(data, options);
      }
      throw new Error(
        `Unsupported type passed: ${data}. Pass options.convertClassInstanceToMap=true to marshall typeof object as map attribute.`
      );
    };
    exports.convertToAttr = convertToAttr;
    var convertToListAttr = (data, options) => ({
      L: data
        .filter(
          (item) =>
            !(options === null || options === void 0 ? void 0 : options.removeUndefinedValues) ||
            ((options === null || options === void 0 ? void 0 : options.removeUndefinedValues) && item !== void 0)
        )
        .map((item) => (0, exports.convertToAttr)(item, options)),
    });
    var convertToSetAttr = (set, options) => {
      const setToOperate = (options === null || options === void 0 ? void 0 : options.removeUndefinedValues)
        ? new Set([...set].filter((value) => value !== void 0))
        : set;
      if (
        !(options === null || options === void 0 ? void 0 : options.removeUndefinedValues) &&
        setToOperate.has(void 0)
      ) {
        throw new Error(`Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.`);
      }
      if (setToOperate.size === 0) {
        if (options === null || options === void 0 ? void 0 : options.convertEmptyValues) {
          return convertToNullAttr();
        }
        throw new Error(`Pass a non-empty set, or options.convertEmptyValues=true.`);
      }
      const item = setToOperate.values().next().value;
      if (typeof item === 'number') {
        return {
          NS: Array.from(setToOperate)
            .map(convertToNumberAttr)
            .map((item2) => item2.N),
        };
      } else if (typeof item === 'bigint') {
        return {
          NS: Array.from(setToOperate)
            .map(convertToBigIntAttr)
            .map((item2) => item2.N),
        };
      } else if (typeof item === 'string') {
        return {
          SS: Array.from(setToOperate)
            .map(convertToStringAttr)
            .map((item2) => item2.S),
        };
      } else if (isBinary(item)) {
        return {
          BS: Array.from(setToOperate)
            .map(convertToBinaryAttr)
            .map((item2) => item2.B),
        };
      } else {
        throw new Error(`Only Number Set (NS), Binary Set (BS) or String Set (SS) are allowed.`);
      }
    };
    var convertToMapAttrFromIterable = (data, options) => ({
      M: ((data2) => {
        const map = {};
        for (const [key, value] of data2) {
          if (
            typeof value !== 'function' &&
            (value !== void 0 || !(options === null || options === void 0 ? void 0 : options.removeUndefinedValues))
          ) {
            map[key] = (0, exports.convertToAttr)(value, options);
          }
        }
        return map;
      })(data),
    });
    var convertToMapAttrFromEnumerableProps = (data, options) => ({
      M: ((data2) => {
        const map = {};
        for (const key in data2) {
          const value = data2[key];
          if (
            typeof value !== 'function' &&
            (value !== void 0 || !(options === null || options === void 0 ? void 0 : options.removeUndefinedValues))
          ) {
            map[key] = (0, exports.convertToAttr)(value, options);
          }
        }
        return map;
      })(data),
    });
    var convertToNullAttr = () => ({ NULL: true });
    var convertToBinaryAttr = (data) => ({ B: data });
    var convertToStringAttr = (data) => ({ S: data.toString() });
    var convertToBigIntAttr = (data) => ({ N: data.toString() });
    var validateBigIntAndThrow = (errorPrefix) => {
      throw new Error(`${errorPrefix} ${typeof BigInt === 'function' ? 'Use BigInt.' : 'Pass string value instead.'} `);
    };
    var convertToNumberAttr = (num) => {
      if (
        [Number.NaN, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY]
          .map((val) => val.toString())
          .includes(num.toString())
      ) {
        throw new Error(`Special numeric value ${num.toString()} is not allowed`);
      } else if (num > Number.MAX_SAFE_INTEGER) {
        validateBigIntAndThrow(`Number ${num.toString()} is greater than Number.MAX_SAFE_INTEGER.`);
      } else if (num < Number.MIN_SAFE_INTEGER) {
        validateBigIntAndThrow(`Number ${num.toString()} is lesser than Number.MIN_SAFE_INTEGER.`);
      }
      return { N: num.toString() };
    };
    var isBinary = (data) => {
      const binaryTypes = [
        'ArrayBuffer',
        'Blob',
        'Buffer',
        'DataView',
        'File',
        'Int8Array',
        'Uint8Array',
        'Uint8ClampedArray',
        'Int16Array',
        'Uint16Array',
        'Int32Array',
        'Uint32Array',
        'Float32Array',
        'Float64Array',
        'BigInt64Array',
        'BigUint64Array',
      ];
      if (data === null || data === void 0 ? void 0 : data.constructor) {
        return binaryTypes.includes(data.constructor.name);
      }
      return false;
    };
  },
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToNative.js
var require_convertToNative = __commonJS({
  'node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToNative.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.convertToNative = void 0;
    var convertToNative = (data, options) => {
      for (const [key, value] of Object.entries(data)) {
        if (value !== void 0) {
          switch (key) {
            case 'NULL':
              return null;
            case 'BOOL':
              return Boolean(value);
            case 'N':
              return convertNumber(value, options);
            case 'B':
              return convertBinary(value);
            case 'S':
              return convertString(value);
            case 'L':
              return convertList(value, options);
            case 'M':
              return convertMap(value, options);
            case 'NS':
              return new Set(value.map((item) => convertNumber(item, options)));
            case 'BS':
              return new Set(value.map(convertBinary));
            case 'SS':
              return new Set(value.map(convertString));
            default:
              throw new Error(`Unsupported type passed: ${key}`);
          }
        }
      }
      throw new Error(`No value defined: ${JSON.stringify(data)}`);
    };
    exports.convertToNative = convertToNative;
    var convertNumber = (numString, options) => {
      if (options === null || options === void 0 ? void 0 : options.wrapNumbers) {
        return { value: numString };
      }
      const num = Number(numString);
      const infinityValues = [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY];
      if ((num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) && !infinityValues.includes(num)) {
        if (typeof BigInt === 'function') {
          try {
            return BigInt(numString);
          } catch (error) {
            throw new Error(`${numString} can't be converted to BigInt. Set options.wrapNumbers to get string value.`);
          }
        } else {
          throw new Error(`${numString} is outside SAFE_INTEGER bounds. Set options.wrapNumbers to get string value.`);
        }
      }
      return num;
    };
    var convertString = (stringValue) => stringValue;
    var convertBinary = (binaryValue) => binaryValue;
    var convertList = (list, options) => list.map((item) => (0, exports.convertToNative)(item, options));
    var convertMap = (map, options) =>
      Object.entries(map).reduce(
        (acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports.convertToNative)(value, options),
        }),
        {}
      );
  },
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/marshall.js
var require_marshall = __commonJS({
  'node_modules/@aws-sdk/util-dynamodb/dist-cjs/marshall.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.marshall = void 0;
    var convertToAttr_1 = require_convertToAttr();
    function marshall(data, options) {
      const attributeValue = (0, convertToAttr_1.convertToAttr)(data, options);
      const [key, value] = Object.entries(attributeValue)[0];
      switch (key) {
        case 'M':
        case 'L':
          return value;
        case 'SS':
        case 'NS':
        case 'BS':
        case 'S':
        case 'N':
        case 'B':
        case 'NULL':
        case 'BOOL':
        case '$unknown':
        default:
          return attributeValue;
      }
    }
    exports.marshall = marshall;
  },
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/models.js
var require_models4 = __commonJS({
  'node_modules/@aws-sdk/util-dynamodb/dist-cjs/models.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/unmarshall.js
var require_unmarshall = __commonJS({
  'node_modules/@aws-sdk/util-dynamodb/dist-cjs/unmarshall.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.unmarshall = void 0;
    var convertToNative_1 = require_convertToNative();
    var unmarshall = (data, options) => (0, convertToNative_1.convertToNative)({ M: data }, options);
    exports.unmarshall = unmarshall;
  },
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/index.js
var require_dist_cjs120 = __commonJS({
  'node_modules/@aws-sdk/util-dynamodb/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib16();
    tslib_1.__exportStar(require_convertToAttr(), exports);
    tslib_1.__exportStar(require_convertToNative(), exports);
    tslib_1.__exportStar(require_marshall(), exports);
    tslib_1.__exportStar(require_models4(), exports);
    tslib_1.__exportStar(require_unmarshall(), exports);
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/utils.js
var require_utils2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/utils.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.unmarshallOutput = exports.marshallInput = void 0;
    var util_dynamodb_1 = require_dist_cjs120();
    var processObj = (obj, processFunc, children) => {
      if (obj !== void 0) {
        if (!children || (Array.isArray(children) && children.length === 0)) {
          return processFunc(obj);
        } else {
          if (Array.isArray(children)) {
            return processKeysInObj(obj, processFunc, children);
          } else {
            return processAllKeysInObj(obj, processFunc, children.children);
          }
        }
      }
      return void 0;
    };
    var processKeyInObj = (obj, processFunc, children) => {
      if (Array.isArray(obj)) {
        return obj.map((item) => processObj(item, processFunc, children));
      }
      return processObj(obj, processFunc, children);
    };
    var processKeysInObj = (obj, processFunc, keyNodes) =>
      keyNodes.reduce(
        (acc, { key, children }) => ({
          ...acc,
          [key]: processKeyInObj(acc[key], processFunc, children),
        }),
        obj
      );
    var processAllKeysInObj = (obj, processFunc, children) =>
      Object.entries(obj).reduce(
        (acc, [key, value]) => ({
          ...acc,
          [key]: processKeyInObj(value, processFunc, children),
        }),
        {}
      );
    var marshallInput = (obj, keyNodes, options) => {
      const marshallFunc = (toMarshall) => (0, util_dynamodb_1.marshall)(toMarshall, options);
      return processKeysInObj(obj, marshallFunc, keyNodes);
    };
    exports.marshallInput = marshallInput;
    var unmarshallOutput = (obj, keyNodes, options) => {
      const unmarshallFunc = (toMarshall) => (0, util_dynamodb_1.unmarshall)(toMarshall, options);
      return processKeysInObj(obj, unmarshallFunc, keyNodes);
    };
    exports.unmarshallOutput = unmarshallOutput;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/baseCommand/DynamoDBDocumentClientCommand.js
var require_DynamoDBDocumentClientCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/baseCommand/DynamoDBDocumentClientCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDBDocumentClientCommand = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var utils_1 = require_utils2();
    var DynamoDBDocumentClientCommand = class extends smithy_client_1.Command {
      addMarshallingMiddleware(configuration) {
        const { marshallOptions, unmarshallOptions } = configuration.translateConfig || {};
        this.clientCommand.middlewareStack.add(
          (next) => async (args) => {
            args.input = (0, utils_1.marshallInput)(this.input, this.inputKeyNodes, marshallOptions);
            return next(args);
          },
          {
            name: 'DocumentMarshall',
            step: 'initialize',
            override: true,
          }
        );
        this.clientCommand.middlewareStack.add(
          (next) => async (args) => {
            const deserialized = await next(args);
            deserialized.output = (0, utils_1.unmarshallOutput)(
              deserialized.output,
              this.outputKeyNodes,
              unmarshallOptions
            );
            return deserialized;
          },
          {
            name: 'DocumentUnmarshall',
            step: 'deserialize',
            override: true,
          }
        );
      }
    };
    exports.DynamoDBDocumentClientCommand = DynamoDBDocumentClientCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js
var require_BatchExecuteStatementCommand2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.BatchExecuteStatementCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs119();
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    var BatchExecuteStatementCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [{ key: 'Statements', children: [{ key: 'Parameters' }] }];
        this.outputKeyNodes = [{ key: 'Responses', children: [{ key: 'Item' }] }];
        this.clientCommand = new client_dynamodb_1.BatchExecuteStatementCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.BatchExecuteStatementCommand = BatchExecuteStatementCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchGetCommand.js
var require_BatchGetCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchGetCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.BatchGetCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs119();
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    var BatchGetCommand2 = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: 'RequestItems',
            children: {
              children: [{ key: 'Keys' }],
            },
          },
        ];
        this.outputKeyNodes = [
          { key: 'Responses', children: {} },
          {
            key: 'UnprocessedKeys',
            children: {
              children: [{ key: 'Keys' }],
            },
          },
        ];
        this.clientCommand = new client_dynamodb_1.BatchGetItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.BatchGetCommand = BatchGetCommand2;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchWriteCommand.js
var require_BatchWriteCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchWriteCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.BatchWriteCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs119();
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    var BatchWriteCommand2 = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: 'RequestItems',
            children: {
              children: [
                { key: 'PutRequest', children: [{ key: 'Item' }] },
                { key: 'DeleteRequest', children: [{ key: 'Key' }] },
              ],
            },
          },
        ];
        this.outputKeyNodes = [
          {
            key: 'UnprocessedItems',
            children: {
              children: [
                { key: 'PutRequest', children: [{ key: 'Item' }] },
                { key: 'DeleteRequest', children: [{ key: 'Key' }] },
              ],
            },
          },
          {
            key: 'ItemCollectionMetrics',
            children: {
              children: [{ key: 'ItemCollectionKey' }],
            },
          },
        ];
        this.clientCommand = new client_dynamodb_1.BatchWriteItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.BatchWriteCommand = BatchWriteCommand2;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/DeleteCommand.js
var require_DeleteCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/DeleteCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DeleteCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs119();
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    var DeleteCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          { key: 'Key' },
          {
            key: 'Expected',
            children: {
              children: [{ key: 'Value' }, { key: 'AttributeValueList' }],
            },
          },
          { key: 'ExpressionAttributeValues' },
        ];
        this.outputKeyNodes = [
          { key: 'Attributes' },
          { key: 'ItemCollectionMetrics', children: [{ key: 'ItemCollectionKey' }] },
        ];
        this.clientCommand = new client_dynamodb_1.DeleteItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.DeleteCommand = DeleteCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js
var require_ExecuteStatementCommand2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ExecuteStatementCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs119();
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    var ExecuteStatementCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [{ key: 'Parameters' }];
        this.outputKeyNodes = [{ key: 'Items' }, { key: 'LastEvaluatedKey' }];
        this.clientCommand = new client_dynamodb_1.ExecuteStatementCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.ExecuteStatementCommand = ExecuteStatementCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js
var require_ExecuteTransactionCommand2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ExecuteTransactionCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs119();
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    var ExecuteTransactionCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [{ key: 'TransactStatements', children: [{ key: 'Parameters' }] }];
        this.outputKeyNodes = [{ key: 'Responses', children: [{ key: 'Item' }] }];
        this.clientCommand = new client_dynamodb_1.ExecuteTransactionCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.ExecuteTransactionCommand = ExecuteTransactionCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/GetCommand.js
var require_GetCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/GetCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs119();
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    var GetCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [{ key: 'Key' }];
        this.outputKeyNodes = [{ key: 'Item' }];
        this.clientCommand = new client_dynamodb_1.GetItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.GetCommand = GetCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/PutCommand.js
var require_PutCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/PutCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.PutCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs119();
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    var PutCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          { key: 'Item' },
          {
            key: 'Expected',
            children: {
              children: [{ key: 'Value' }, { key: 'AttributeValueList' }],
            },
          },
          { key: 'ExpressionAttributeValues' },
        ];
        this.outputKeyNodes = [
          { key: 'Attributes' },
          { key: 'ItemCollectionMetrics', children: [{ key: 'ItemCollectionKey' }] },
        ];
        this.clientCommand = new client_dynamodb_1.PutItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.PutCommand = PutCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/QueryCommand.js
var require_QueryCommand2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/QueryCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.QueryCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs119();
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    var QueryCommand2 = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: 'KeyConditions',
            children: {
              children: [{ key: 'AttributeValueList' }],
            },
          },
          {
            key: 'QueryFilter',
            children: {
              children: [{ key: 'AttributeValueList' }],
            },
          },
          { key: 'ExclusiveStartKey' },
          { key: 'ExpressionAttributeValues' },
        ];
        this.outputKeyNodes = [{ key: 'Items' }, { key: 'LastEvaluatedKey' }];
        this.clientCommand = new client_dynamodb_1.QueryCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.QueryCommand = QueryCommand2;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ScanCommand.js
var require_ScanCommand2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ScanCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ScanCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs119();
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    var ScanCommand2 = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: 'ScanFilter',
            children: {
              children: [{ key: 'AttributeValueList' }],
            },
          },
          { key: 'ExclusiveStartKey' },
          { key: 'ExpressionAttributeValues' },
        ];
        this.outputKeyNodes = [{ key: 'Items' }, { key: 'LastEvaluatedKey' }];
        this.clientCommand = new client_dynamodb_1.ScanCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.ScanCommand = ScanCommand2;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/TransactGetCommand.js
var require_TransactGetCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/TransactGetCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TransactGetCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs119();
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    var TransactGetCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [{ key: 'TransactItems', children: [{ key: 'Get', children: [{ key: 'Key' }] }] }];
        this.outputKeyNodes = [{ key: 'Responses', children: [{ key: 'Item' }] }];
        this.clientCommand = new client_dynamodb_1.TransactGetItemsCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.TransactGetCommand = TransactGetCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/TransactWriteCommand.js
var require_TransactWriteCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/TransactWriteCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TransactWriteCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs119();
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    var TransactWriteCommand2 = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: 'TransactItems',
            children: [
              { key: 'ConditionCheck', children: [{ key: 'Key' }, { key: 'ExpressionAttributeValues' }] },
              { key: 'Put', children: [{ key: 'Item' }, { key: 'ExpressionAttributeValues' }] },
              { key: 'Delete', children: [{ key: 'Key' }, { key: 'ExpressionAttributeValues' }] },
              { key: 'Update', children: [{ key: 'Key' }, { key: 'ExpressionAttributeValues' }] },
            ],
          },
        ];
        this.outputKeyNodes = [
          {
            key: 'ItemCollectionMetrics',
            children: {
              children: [{ key: 'ItemCollectionKey' }],
            },
          },
        ];
        this.clientCommand = new client_dynamodb_1.TransactWriteItemsCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.TransactWriteCommand = TransactWriteCommand2;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/UpdateCommand.js
var require_UpdateCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/UpdateCommand.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs119();
    var DynamoDBDocumentClientCommand_1 = require_DynamoDBDocumentClientCommand();
    var UpdateCommand2 = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          { key: 'Key' },
          {
            key: 'AttributeUpdates',
            children: {
              children: [{ key: 'Value' }],
            },
          },
          {
            key: 'Expected',
            children: {
              children: [{ key: 'Value' }, { key: 'AttributeValueList' }],
            },
          },
          { key: 'ExpressionAttributeValues' },
        ];
        this.outputKeyNodes = [
          { key: 'Attributes' },
          { key: 'ItemCollectionMetrics', children: [{ key: 'ItemCollectionKey' }] },
        ];
        this.clientCommand = new client_dynamodb_1.UpdateItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    exports.UpdateCommand = UpdateCommand2;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/DynamoDBDocumentClient.js
var require_DynamoDBDocumentClient = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/DynamoDBDocumentClient.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDBDocumentClient = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var DynamoDBDocumentClient4 = class extends smithy_client_1.Client {
      constructor(client, translateConfig) {
        super(client.config);
        this.config = client.config;
        this.config.translateConfig = translateConfig;
        this.middlewareStack = client.middlewareStack;
      }
      static from(client, translateConfig) {
        return new DynamoDBDocumentClient4(client, translateConfig);
      }
      destroy() {}
    };
    exports.DynamoDBDocumentClient = DynamoDBDocumentClient4;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/DynamoDBDocument.js
var require_DynamoDBDocument = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/DynamoDBDocument.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDBDocument = void 0;
    var BatchExecuteStatementCommand_1 = require_BatchExecuteStatementCommand2();
    var BatchGetCommand_1 = require_BatchGetCommand();
    var BatchWriteCommand_1 = require_BatchWriteCommand();
    var DeleteCommand_1 = require_DeleteCommand();
    var ExecuteStatementCommand_1 = require_ExecuteStatementCommand2();
    var ExecuteTransactionCommand_1 = require_ExecuteTransactionCommand2();
    var GetCommand_1 = require_GetCommand();
    var PutCommand_1 = require_PutCommand();
    var QueryCommand_1 = require_QueryCommand2();
    var ScanCommand_1 = require_ScanCommand2();
    var TransactGetCommand_1 = require_TransactGetCommand();
    var TransactWriteCommand_1 = require_TransactWriteCommand();
    var UpdateCommand_1 = require_UpdateCommand();
    var DynamoDBDocumentClient_1 = require_DynamoDBDocumentClient();
    var DynamoDBDocument = class extends DynamoDBDocumentClient_1.DynamoDBDocumentClient {
      static from(client, translateConfig) {
        return new DynamoDBDocument(client, translateConfig);
      }
      batchExecuteStatement(args, optionsOrCb, cb) {
        const command = new BatchExecuteStatementCommand_1.BatchExecuteStatementCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchGet(args, optionsOrCb, cb) {
        const command = new BatchGetCommand_1.BatchGetCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchWrite(args, optionsOrCb, cb) {
        const command = new BatchWriteCommand_1.BatchWriteCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      delete(args, optionsOrCb, cb) {
        const command = new DeleteCommand_1.DeleteCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      executeStatement(args, optionsOrCb, cb) {
        const command = new ExecuteStatementCommand_1.ExecuteStatementCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      executeTransaction(args, optionsOrCb, cb) {
        const command = new ExecuteTransactionCommand_1.ExecuteTransactionCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      get(args, optionsOrCb, cb) {
        const command = new GetCommand_1.GetCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      put(args, optionsOrCb, cb) {
        const command = new PutCommand_1.PutCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      query(args, optionsOrCb, cb) {
        const command = new QueryCommand_1.QueryCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      scan(args, optionsOrCb, cb) {
        const command = new ScanCommand_1.ScanCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      transactGet(args, optionsOrCb, cb) {
        const command = new TransactGetCommand_1.TransactGetCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      transactWrite(args, optionsOrCb, cb) {
        const command = new TransactWriteCommand_1.TransactWriteCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      update(args, optionsOrCb, cb) {
        const command = new UpdateCommand_1.UpdateCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object') throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.DynamoDBDocument = DynamoDBDocument;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/index.js
var require_commands4 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_BatchExecuteStatementCommand2(), exports);
    tslib_1.__exportStar(require_BatchGetCommand(), exports);
    tslib_1.__exportStar(require_BatchWriteCommand(), exports);
    tslib_1.__exportStar(require_DeleteCommand(), exports);
    tslib_1.__exportStar(require_ExecuteStatementCommand2(), exports);
    tslib_1.__exportStar(require_ExecuteTransactionCommand2(), exports);
    tslib_1.__exportStar(require_GetCommand(), exports);
    tslib_1.__exportStar(require_PutCommand(), exports);
    tslib_1.__exportStar(require_QueryCommand2(), exports);
    tslib_1.__exportStar(require_ScanCommand2(), exports);
    tslib_1.__exportStar(require_TransactGetCommand(), exports);
    tslib_1.__exportStar(require_TransactWriteCommand(), exports);
    tslib_1.__exportStar(require_UpdateCommand(), exports);
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/Interfaces.js
var require_Interfaces3 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/Interfaces.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/QueryPaginator.js
var require_QueryPaginator2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/QueryPaginator.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateQuery = void 0;
    var QueryCommand_1 = require_QueryCommand2();
    var DynamoDBDocument_1 = require_DynamoDBDocument();
    var DynamoDBDocumentClient_1 = require_DynamoDBDocumentClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new QueryCommand_1.QueryCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.query(input, ...args);
    };
    async function* paginateQuery(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input['Limit'] = config.pageSize;
        if (config.client instanceof DynamoDBDocument_1.DynamoDBDocument) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof DynamoDBDocumentClient_1.DynamoDBDocumentClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error('Invalid client, expected DynamoDBDocument | DynamoDBDocumentClient');
        }
        yield page;
        token = page.LastEvaluatedKey;
        hasNext = !!token;
      }
      return void 0;
    }
    exports.paginateQuery = paginateQuery;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/ScanPaginator.js
var require_ScanPaginator2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/ScanPaginator.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateScan = void 0;
    var ScanCommand_1 = require_ScanCommand2();
    var DynamoDBDocument_1 = require_DynamoDBDocument();
    var DynamoDBDocumentClient_1 = require_DynamoDBDocumentClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ScanCommand_1.ScanCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.scan(input, ...args);
    };
    async function* paginateScan(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input['Limit'] = config.pageSize;
        if (config.client instanceof DynamoDBDocument_1.DynamoDBDocument) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof DynamoDBDocumentClient_1.DynamoDBDocumentClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error('Invalid client, expected DynamoDBDocument | DynamoDBDocumentClient');
        }
        yield page;
        token = page.LastEvaluatedKey;
        hasNext = !!token;
      }
      return void 0;
    }
    exports.paginateScan = paginateScan;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/index.js
var require_pagination3 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_Interfaces3(), exports);
    tslib_1.__exportStar(require_QueryPaginator2(), exports);
    tslib_1.__exportStar(require_ScanPaginator2(), exports);
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/index.js
var require_dist_cjs121 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_DynamoDBDocument(), exports);
    tslib_1.__exportStar(require_DynamoDBDocumentClient(), exports);
    tslib_1.__exportStar(require_commands4(), exports);
    tslib_1.__exportStar(require_pagination3(), exports);
  },
});

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  'node_modules/lodash/_listCacheClear.js'(exports, module2) {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module2.exports = listCacheClear;
  },
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  'node_modules/lodash/eq.js'(exports, module2) {
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }
    module2.exports = eq;
  },
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  'node_modules/lodash/_assocIndexOf.js'(exports, module2) {
    var eq = require_eq();
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module2.exports = assocIndexOf;
  },
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  'node_modules/lodash/_listCacheDelete.js'(exports, module2) {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__,
        index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    module2.exports = listCacheDelete;
  },
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  'node_modules/lodash/_listCacheGet.js'(exports, module2) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data = this.__data__,
        index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    module2.exports = listCacheGet;
  },
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  'node_modules/lodash/_listCacheHas.js'(exports, module2) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module2.exports = listCacheHas;
  },
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  'node_modules/lodash/_listCacheSet.js'(exports, module2) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data = this.__data__,
        index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    module2.exports = listCacheSet;
  },
});

// node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  'node_modules/lodash/_ListCache.js'(exports, module2) {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index = -1,
        length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module2.exports = ListCache;
  },
});

// node_modules/lodash/_stackClear.js
var require_stackClear = __commonJS({
  'node_modules/lodash/_stackClear.js'(exports, module2) {
    var ListCache = require_ListCache();
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    module2.exports = stackClear;
  },
});

// node_modules/lodash/_stackDelete.js
var require_stackDelete = __commonJS({
  'node_modules/lodash/_stackDelete.js'(exports, module2) {
    function stackDelete(key) {
      var data = this.__data__,
        result = data['delete'](key);
      this.size = data.size;
      return result;
    }
    module2.exports = stackDelete;
  },
});

// node_modules/lodash/_stackGet.js
var require_stackGet = __commonJS({
  'node_modules/lodash/_stackGet.js'(exports, module2) {
    function stackGet(key) {
      return this.__data__.get(key);
    }
    module2.exports = stackGet;
  },
});

// node_modules/lodash/_stackHas.js
var require_stackHas = __commonJS({
  'node_modules/lodash/_stackHas.js'(exports, module2) {
    function stackHas(key) {
      return this.__data__.has(key);
    }
    module2.exports = stackHas;
  },
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  'node_modules/lodash/_freeGlobal.js'(exports, module2) {
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
    module2.exports = freeGlobal;
  },
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  'node_modules/lodash/_root.js'(exports, module2) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function('return this')();
    module2.exports = root;
  },
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  'node_modules/lodash/_Symbol.js'(exports, module2) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module2.exports = Symbol2;
  },
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  'node_modules/lodash/_getRawTag.js'(exports, module2) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {}
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module2.exports = getRawTag;
  },
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  'node_modules/lodash/_objectToString.js'(exports, module2) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module2.exports = objectToString;
  },
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  'node_modules/lodash/_baseGetTag.js'(exports, module2) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = '[object Null]';
    var undefinedTag = '[object Undefined]';
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module2.exports = baseGetTag;
  },
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  'node_modules/lodash/isObject.js'(exports, module2) {
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }
    module2.exports = isObject;
  },
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  'node_modules/lodash/isFunction.js'(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var isObject = require_isObject();
    var asyncTag = '[object AsyncFunction]';
    var funcTag = '[object Function]';
    var genTag = '[object GeneratorFunction]';
    var proxyTag = '[object Proxy]';
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module2.exports = isFunction;
  },
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  'node_modules/lodash/_coreJsData.js'(exports, module2) {
    var root = require_root();
    var coreJsData = root['__core-js_shared__'];
    module2.exports = coreJsData;
  },
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  'node_modules/lodash/_isMasked.js'(exports, module2) {
    var coreJsData = require_coreJsData();
    var maskSrcKey = (function () {
      var uid = /[^.]+$/.exec((coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || '');
      return uid ? 'Symbol(src)_1.' + uid : '';
    })();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module2.exports = isMasked;
  },
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  'node_modules/lodash/_toSource.js'(exports, module2) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return func + '';
        } catch (e) {}
      }
      return '';
    }
    module2.exports = toSource;
  },
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  'node_modules/lodash/_baseIsNative.js'(exports, module2) {
    var isFunction = require_isFunction();
    var isMasked = require_isMasked();
    var isObject = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp(
      '^' +
        funcToString
          .call(hasOwnProperty)
          .replace(reRegExpChar, '\\$&')
          .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') +
        '$'
    );
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module2.exports = baseIsNative;
  },
});

// node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  'node_modules/lodash/_getValue.js'(exports, module2) {
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    module2.exports = getValue;
  },
});

// node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  'node_modules/lodash/_getNative.js'(exports, module2) {
    var baseIsNative = require_baseIsNative();
    var getValue = require_getValue();
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    module2.exports = getNative;
  },
});

// node_modules/lodash/_Map.js
var require_Map = __commonJS({
  'node_modules/lodash/_Map.js'(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var Map2 = getNative(root, 'Map');
    module2.exports = Map2;
  },
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  'node_modules/lodash/_nativeCreate.js'(exports, module2) {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, 'create');
    module2.exports = nativeCreate;
  },
});

// node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  'node_modules/lodash/_hashClear.js'(exports, module2) {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module2.exports = hashClear;
  },
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  'node_modules/lodash/_hashDelete.js'(exports, module2) {
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module2.exports = hashDelete;
  },
});

// node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  'node_modules/lodash/_hashGet.js'(exports, module2) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = '__lodash_hash_undefined__';
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    module2.exports = hashGet;
  },
});

// node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  'node_modules/lodash/_hashHas.js'(exports, module2) {
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    module2.exports = hashHas;
  },
});

// node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  'node_modules/lodash/_hashSet.js'(exports, module2) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = '__lodash_hash_undefined__';
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module2.exports = hashSet;
  },
});

// node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  'node_modules/lodash/_Hash.js'(exports, module2) {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index = -1,
        length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module2.exports = Hash;
  },
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  'node_modules/lodash/_mapCacheClear.js'(exports, module2) {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        hash: new Hash(),
        map: new (Map2 || ListCache)(),
        string: new Hash(),
      };
    }
    module2.exports = mapCacheClear;
  },
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  'node_modules/lodash/_isKeyable.js'(exports, module2) {
    function isKeyable(value) {
      var type = typeof value;
      return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean'
        ? value !== '__proto__'
        : value === null;
    }
    module2.exports = isKeyable;
  },
});

// node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  'node_modules/lodash/_getMapData.js'(exports, module2) {
    var isKeyable = require_isKeyable();
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
    }
    module2.exports = getMapData;
  },
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  'node_modules/lodash/_mapCacheDelete.js'(exports, module2) {
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module2.exports = mapCacheDelete;
  },
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  'node_modules/lodash/_mapCacheGet.js'(exports, module2) {
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module2.exports = mapCacheGet;
  },
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  'node_modules/lodash/_mapCacheHas.js'(exports, module2) {
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module2.exports = mapCacheHas;
  },
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  'node_modules/lodash/_mapCacheSet.js'(exports, module2) {
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
        size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    module2.exports = mapCacheSet;
  },
});

// node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  'node_modules/lodash/_MapCache.js'(exports, module2) {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index = -1,
        length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module2.exports = MapCache;
  },
});

// node_modules/lodash/_stackSet.js
var require_stackSet = __commonJS({
  'node_modules/lodash/_stackSet.js'(exports, module2) {
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    var MapCache = require_MapCache();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    module2.exports = stackSet;
  },
});

// node_modules/lodash/_Stack.js
var require_Stack = __commonJS({
  'node_modules/lodash/_Stack.js'(exports, module2) {
    var ListCache = require_ListCache();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data = (this.__data__ = new ListCache(entries));
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module2.exports = Stack;
  },
});

// node_modules/lodash/_arrayEach.js
var require_arrayEach = __commonJS({
  'node_modules/lodash/_arrayEach.js'(exports, module2) {
    function arrayEach(array, iteratee) {
      var index = -1,
        length = array == null ? 0 : array.length;
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    module2.exports = arrayEach;
  },
});

// node_modules/lodash/_defineProperty.js
var require_defineProperty = __commonJS({
  'node_modules/lodash/_defineProperty.js'(exports, module2) {
    var getNative = require_getNative();
    var defineProperty = (function () {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    })();
    module2.exports = defineProperty;
  },
});

// node_modules/lodash/_baseAssignValue.js
var require_baseAssignValue = __commonJS({
  'node_modules/lodash/_baseAssignValue.js'(exports, module2) {
    var defineProperty = require_defineProperty();
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          configurable: true,
          enumerable: true,
          value: value,
          writable: true,
        });
      } else {
        object[key] = value;
      }
    }
    module2.exports = baseAssignValue;
  },
});

// node_modules/lodash/_assignValue.js
var require_assignValue = __commonJS({
  'node_modules/lodash/_assignValue.js'(exports, module2) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || (value === void 0 && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }
    module2.exports = assignValue;
  },
});

// node_modules/lodash/_copyObject.js
var require_copyObject = __commonJS({
  'node_modules/lodash/_copyObject.js'(exports, module2) {
    var assignValue = require_assignValue();
    var baseAssignValue = require_baseAssignValue();
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1,
        length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    module2.exports = copyObject;
  },
});

// node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  'node_modules/lodash/_baseTimes.js'(exports, module2) {
    function baseTimes(n, iteratee) {
      var index = -1,
        result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    module2.exports = baseTimes;
  },
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  'node_modules/lodash/isObjectLike.js'(exports, module2) {
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }
    module2.exports = isObjectLike;
  },
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  'node_modules/lodash/_baseIsArguments.js'(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var argsTag = '[object Arguments]';
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module2.exports = baseIsArguments;
  },
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  'node_modules/lodash/isArguments.js'(exports, module2) {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(
      (function () {
        return arguments;
      })()
    )
      ? baseIsArguments
      : function (value) {
          return (
            isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee')
          );
        };
    module2.exports = isArguments;
  },
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  'node_modules/lodash/isArray.js'(exports, module2) {
    var isArray = Array.isArray;
    module2.exports = isArray;
  },
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  'node_modules/lodash/stubFalse.js'(exports, module2) {
    function stubFalse() {
      return false;
    }
    module2.exports = stubFalse;
  },
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  'node_modules/lodash/isBuffer.js'(exports, module2) {
    var root = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module2 == 'object' && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module2.exports = isBuffer;
  },
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  'node_modules/lodash/_isIndex.js'(exports, module2) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return (
        !!length &&
        (type == 'number' || (type != 'symbol' && reIsUint.test(value))) &&
        value > -1 &&
        value % 1 == 0 &&
        value < length
      );
    }
    module2.exports = isIndex;
  },
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  'node_modules/lodash/isLength.js'(exports, module2) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module2.exports = isLength;
  },
});

// node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  'node_modules/lodash/_baseIsTypedArray.js'(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike = require_isObjectLike();
    var argsTag = '[object Arguments]';
    var arrayTag = '[object Array]';
    var boolTag = '[object Boolean]';
    var dateTag = '[object Date]';
    var errorTag = '[object Error]';
    var funcTag = '[object Function]';
    var mapTag = '[object Map]';
    var numberTag = '[object Number]';
    var objectTag = '[object Object]';
    var regexpTag = '[object RegExp]';
    var setTag = '[object Set]';
    var stringTag = '[object String]';
    var weakMapTag = '[object WeakMap]';
    var arrayBufferTag = '[object ArrayBuffer]';
    var dataViewTag = '[object DataView]';
    var float32Tag = '[object Float32Array]';
    var float64Tag = '[object Float64Array]';
    var int8Tag = '[object Int8Array]';
    var int16Tag = '[object Int16Array]';
    var int32Tag = '[object Int32Array]';
    var uint8Tag = '[object Uint8Array]';
    var uint8ClampedTag = '[object Uint8ClampedArray]';
    var uint16Tag = '[object Uint16Array]';
    var uint32Tag = '[object Uint32Array]';
    var typedArrayTags = {};
    typedArrayTags[float32Tag] =
      typedArrayTags[float64Tag] =
      typedArrayTags[int8Tag] =
      typedArrayTags[int16Tag] =
      typedArrayTags[int32Tag] =
      typedArrayTags[uint8Tag] =
      typedArrayTags[uint8ClampedTag] =
      typedArrayTags[uint16Tag] =
      typedArrayTags[uint32Tag] =
        true;
    typedArrayTags[argsTag] =
      typedArrayTags[arrayTag] =
      typedArrayTags[arrayBufferTag] =
      typedArrayTags[boolTag] =
      typedArrayTags[dataViewTag] =
      typedArrayTags[dateTag] =
      typedArrayTags[errorTag] =
      typedArrayTags[funcTag] =
      typedArrayTags[mapTag] =
      typedArrayTags[numberTag] =
      typedArrayTags[objectTag] =
      typedArrayTags[regexpTag] =
      typedArrayTags[setTag] =
      typedArrayTags[stringTag] =
      typedArrayTags[weakMapTag] =
        false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module2.exports = baseIsTypedArray;
  },
});

// node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  'node_modules/lodash/_baseUnary.js'(exports, module2) {
    function baseUnary(func) {
      return function (value) {
        return func(value);
      };
    }
    module2.exports = baseUnary;
  },
});

// node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  'node_modules/lodash/_nodeUtil.js'(exports, module2) {
    var freeGlobal = require_freeGlobal();
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module2 == 'object' && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = (function () {
      try {
        var types = freeModule && freeModule.require && freeModule.require('util').types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    })();
    module2.exports = nodeUtil;
  },
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  'node_modules/lodash/isTypedArray.js'(exports, module2) {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module2.exports = isTypedArray;
  },
});

// node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  'node_modules/lodash/_arrayLikeKeys.js'(exports, module2) {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;
      for (var key in value) {
        if (
          (inherited || hasOwnProperty.call(value, key)) &&
          !(
            skipIndexes &&
            (key == 'length' ||
              (isBuff && (key == 'offset' || key == 'parent')) ||
              (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
              isIndex(key, length))
          )
        ) {
          result.push(key);
        }
      }
      return result;
    }
    module2.exports = arrayLikeKeys;
  },
});

// node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  'node_modules/lodash/_isPrototype.js'(exports, module2) {
    var objectProto = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
      return value === proto;
    }
    module2.exports = isPrototype;
  },
});

// node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  'node_modules/lodash/_overArg.js'(exports, module2) {
    function overArg(func, transform) {
      return function (arg) {
        return func(transform(arg));
      };
    }
    module2.exports = overArg;
  },
});

// node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  'node_modules/lodash/_nativeKeys.js'(exports, module2) {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module2.exports = nativeKeys;
  },
});

// node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  'node_modules/lodash/_baseKeys.js'(exports, module2) {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }
    module2.exports = baseKeys;
  },
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  'node_modules/lodash/isArrayLike.js'(exports, module2) {
    var isFunction = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    module2.exports = isArrayLike;
  },
});

// node_modules/lodash/keys.js
var require_keys = __commonJS({
  'node_modules/lodash/keys.js'(exports, module2) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module2.exports = keys;
  },
});

// node_modules/lodash/_baseAssign.js
var require_baseAssign = __commonJS({
  'node_modules/lodash/_baseAssign.js'(exports, module2) {
    var copyObject = require_copyObject();
    var keys = require_keys();
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }
    module2.exports = baseAssign;
  },
});

// node_modules/lodash/_nativeKeysIn.js
var require_nativeKeysIn = __commonJS({
  'node_modules/lodash/_nativeKeysIn.js'(exports, module2) {
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    module2.exports = nativeKeysIn;
  },
});

// node_modules/lodash/_baseKeysIn.js
var require_baseKeysIn = __commonJS({
  'node_modules/lodash/_baseKeysIn.js'(exports, module2) {
    var isObject = require_isObject();
    var isPrototype = require_isPrototype();
    var nativeKeysIn = require_nativeKeysIn();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
        result = [];
      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    module2.exports = baseKeysIn;
  },
});

// node_modules/lodash/keysIn.js
var require_keysIn = __commonJS({
  'node_modules/lodash/keysIn.js'(exports, module2) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeysIn = require_baseKeysIn();
    var isArrayLike = require_isArrayLike();
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    module2.exports = keysIn;
  },
});

// node_modules/lodash/_baseAssignIn.js
var require_baseAssignIn = __commonJS({
  'node_modules/lodash/_baseAssignIn.js'(exports, module2) {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }
    module2.exports = baseAssignIn;
  },
});

// node_modules/lodash/_cloneBuffer.js
var require_cloneBuffer = __commonJS({
  'node_modules/lodash/_cloneBuffer.js'(exports, module2) {
    var root = require_root();
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module2 == 'object' && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    module2.exports = cloneBuffer;
  },
});

// node_modules/lodash/_copyArray.js
var require_copyArray = __commonJS({
  'node_modules/lodash/_copyArray.js'(exports, module2) {
    function copyArray(source, array) {
      var index = -1,
        length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    module2.exports = copyArray;
  },
});

// node_modules/lodash/_arrayFilter.js
var require_arrayFilter = __commonJS({
  'node_modules/lodash/_arrayFilter.js'(exports, module2) {
    function arrayFilter(array, predicate) {
      var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module2.exports = arrayFilter;
  },
});

// node_modules/lodash/stubArray.js
var require_stubArray = __commonJS({
  'node_modules/lodash/stubArray.js'(exports, module2) {
    function stubArray() {
      return [];
    }
    module2.exports = stubArray;
  },
});

// node_modules/lodash/_getSymbols.js
var require_getSymbols = __commonJS({
  'node_modules/lodash/_getSymbols.js'(exports, module2) {
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto = Object.prototype;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols
      ? stubArray
      : function (object) {
          if (object == null) {
            return [];
          }
          object = Object(object);
          return arrayFilter(nativeGetSymbols(object), function (symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
    module2.exports = getSymbols;
  },
});

// node_modules/lodash/_copySymbols.js
var require_copySymbols = __commonJS({
  'node_modules/lodash/_copySymbols.js'(exports, module2) {
    var copyObject = require_copyObject();
    var getSymbols = require_getSymbols();
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }
    module2.exports = copySymbols;
  },
});

// node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  'node_modules/lodash/_arrayPush.js'(exports, module2) {
    function arrayPush(array, values) {
      var index = -1,
        length = values.length,
        offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    module2.exports = arrayPush;
  },
});

// node_modules/lodash/_getPrototype.js
var require_getPrototype = __commonJS({
  'node_modules/lodash/_getPrototype.js'(exports, module2) {
    var overArg = require_overArg();
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    module2.exports = getPrototype;
  },
});

// node_modules/lodash/_getSymbolsIn.js
var require_getSymbolsIn = __commonJS({
  'node_modules/lodash/_getSymbolsIn.js'(exports, module2) {
    var arrayPush = require_arrayPush();
    var getPrototype = require_getPrototype();
    var getSymbols = require_getSymbols();
    var stubArray = require_stubArray();
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbolsIn = !nativeGetSymbols
      ? stubArray
      : function (object) {
          var result = [];
          while (object) {
            arrayPush(result, getSymbols(object));
            object = getPrototype(object);
          }
          return result;
        };
    module2.exports = getSymbolsIn;
  },
});

// node_modules/lodash/_copySymbolsIn.js
var require_copySymbolsIn = __commonJS({
  'node_modules/lodash/_copySymbolsIn.js'(exports, module2) {
    var copyObject = require_copyObject();
    var getSymbolsIn = require_getSymbolsIn();
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }
    module2.exports = copySymbolsIn;
  },
});

// node_modules/lodash/_baseGetAllKeys.js
var require_baseGetAllKeys = __commonJS({
  'node_modules/lodash/_baseGetAllKeys.js'(exports, module2) {
    var arrayPush = require_arrayPush();
    var isArray = require_isArray();
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    module2.exports = baseGetAllKeys;
  },
});

// node_modules/lodash/_getAllKeys.js
var require_getAllKeys = __commonJS({
  'node_modules/lodash/_getAllKeys.js'(exports, module2) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys = require_keys();
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    module2.exports = getAllKeys;
  },
});

// node_modules/lodash/_getAllKeysIn.js
var require_getAllKeysIn = __commonJS({
  'node_modules/lodash/_getAllKeysIn.js'(exports, module2) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbolsIn = require_getSymbolsIn();
    var keysIn = require_keysIn();
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }
    module2.exports = getAllKeysIn;
  },
});

// node_modules/lodash/_DataView.js
var require_DataView = __commonJS({
  'node_modules/lodash/_DataView.js'(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var DataView = getNative(root, 'DataView');
    module2.exports = DataView;
  },
});

// node_modules/lodash/_Promise.js
var require_Promise = __commonJS({
  'node_modules/lodash/_Promise.js'(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var Promise2 = getNative(root, 'Promise');
    module2.exports = Promise2;
  },
});

// node_modules/lodash/_Set.js
var require_Set = __commonJS({
  'node_modules/lodash/_Set.js'(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var Set2 = getNative(root, 'Set');
    module2.exports = Set2;
  },
});

// node_modules/lodash/_WeakMap.js
var require_WeakMap = __commonJS({
  'node_modules/lodash/_WeakMap.js'(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var WeakMap = getNative(root, 'WeakMap');
    module2.exports = WeakMap;
  },
});

// node_modules/lodash/_getTag.js
var require_getTag = __commonJS({
  'node_modules/lodash/_getTag.js'(exports, module2) {
    var DataView = require_DataView();
    var Map2 = require_Map();
    var Promise2 = require_Promise();
    var Set2 = require_Set();
    var WeakMap = require_WeakMap();
    var baseGetTag = require_baseGetTag();
    var toSource = require_toSource();
    var mapTag = '[object Map]';
    var objectTag = '[object Object]';
    var promiseTag = '[object Promise]';
    var setTag = '[object Set]';
    var weakMapTag = '[object WeakMap]';
    var dataViewTag = '[object DataView]';
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap);
    var getTag = baseGetTag;
    if (
      (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
      (Map2 && getTag(new Map2()) != mapTag) ||
      (Promise2 && getTag(Promise2.resolve()) != promiseTag) ||
      (Set2 && getTag(new Set2()) != setTag) ||
      (WeakMap && getTag(new WeakMap()) != weakMapTag)
    ) {
      getTag = function (value) {
        var result = baseGetTag(value),
          Ctor = result == objectTag ? value.constructor : void 0,
          ctorString = Ctor ? toSource(Ctor) : '';
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    module2.exports = getTag;
  },
});

// node_modules/lodash/_initCloneArray.js
var require_initCloneArray = __commonJS({
  'node_modules/lodash/_initCloneArray.js'(exports, module2) {
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function initCloneArray(array) {
      var length = array.length,
        result = new array.constructor(length);
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }
    module2.exports = initCloneArray;
  },
});

// node_modules/lodash/_Uint8Array.js
var require_Uint8Array = __commonJS({
  'node_modules/lodash/_Uint8Array.js'(exports, module2) {
    var root = require_root();
    var Uint8Array2 = root.Uint8Array;
    module2.exports = Uint8Array2;
  },
});

// node_modules/lodash/_cloneArrayBuffer.js
var require_cloneArrayBuffer = __commonJS({
  'node_modules/lodash/_cloneArrayBuffer.js'(exports, module2) {
    var Uint8Array2 = require_Uint8Array();
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    module2.exports = cloneArrayBuffer;
  },
});

// node_modules/lodash/_cloneDataView.js
var require_cloneDataView = __commonJS({
  'node_modules/lodash/_cloneDataView.js'(exports, module2) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    module2.exports = cloneDataView;
  },
});

// node_modules/lodash/_cloneRegExp.js
var require_cloneRegExp = __commonJS({
  'node_modules/lodash/_cloneRegExp.js'(exports, module2) {
    var reFlags = /\w*$/;
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    module2.exports = cloneRegExp;
  },
});

// node_modules/lodash/_cloneSymbol.js
var require_cloneSymbol = __commonJS({
  'node_modules/lodash/_cloneSymbol.js'(exports, module2) {
    var Symbol2 = require_Symbol();
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }
    module2.exports = cloneSymbol;
  },
});

// node_modules/lodash/_cloneTypedArray.js
var require_cloneTypedArray = __commonJS({
  'node_modules/lodash/_cloneTypedArray.js'(exports, module2) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    module2.exports = cloneTypedArray;
  },
});

// node_modules/lodash/_initCloneByTag.js
var require_initCloneByTag = __commonJS({
  'node_modules/lodash/_initCloneByTag.js'(exports, module2) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    var cloneDataView = require_cloneDataView();
    var cloneRegExp = require_cloneRegExp();
    var cloneSymbol = require_cloneSymbol();
    var cloneTypedArray = require_cloneTypedArray();
    var boolTag = '[object Boolean]';
    var dateTag = '[object Date]';
    var mapTag = '[object Map]';
    var numberTag = '[object Number]';
    var regexpTag = '[object RegExp]';
    var setTag = '[object Set]';
    var stringTag = '[object String]';
    var symbolTag = '[object Symbol]';
    var arrayBufferTag = '[object ArrayBuffer]';
    var dataViewTag = '[object DataView]';
    var float32Tag = '[object Float32Array]';
    var float64Tag = '[object Float64Array]';
    var int8Tag = '[object Int8Array]';
    var int16Tag = '[object Int16Array]';
    var int32Tag = '[object Int32Array]';
    var uint8Tag = '[object Uint8Array]';
    var uint8ClampedTag = '[object Uint8ClampedArray]';
    var uint16Tag = '[object Uint16Array]';
    var uint32Tag = '[object Uint32Array]';
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
          return new Ctor(+object);
        case dataViewTag:
          return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
          return cloneTypedArray(object, isDeep);
        case mapTag:
          return new Ctor();
        case numberTag:
        case stringTag:
          return new Ctor(object);
        case regexpTag:
          return cloneRegExp(object);
        case setTag:
          return new Ctor();
        case symbolTag:
          return cloneSymbol(object);
      }
    }
    module2.exports = initCloneByTag;
  },
});

// node_modules/lodash/_baseCreate.js
var require_baseCreate = __commonJS({
  'node_modules/lodash/_baseCreate.js'(exports, module2) {
    var isObject = require_isObject();
    var objectCreate = Object.create;
    var baseCreate = (function () {
      function object() {}
      return function (proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    })();
    module2.exports = baseCreate;
  },
});

// node_modules/lodash/_initCloneObject.js
var require_initCloneObject = __commonJS({
  'node_modules/lodash/_initCloneObject.js'(exports, module2) {
    var baseCreate = require_baseCreate();
    var getPrototype = require_getPrototype();
    var isPrototype = require_isPrototype();
    function initCloneObject(object) {
      return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    module2.exports = initCloneObject;
  },
});

// node_modules/lodash/_baseIsMap.js
var require_baseIsMap = __commonJS({
  'node_modules/lodash/_baseIsMap.js'(exports, module2) {
    var getTag = require_getTag();
    var isObjectLike = require_isObjectLike();
    var mapTag = '[object Map]';
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }
    module2.exports = baseIsMap;
  },
});

// node_modules/lodash/isMap.js
var require_isMap = __commonJS({
  'node_modules/lodash/isMap.js'(exports, module2) {
    var baseIsMap = require_baseIsMap();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsMap = nodeUtil && nodeUtil.isMap;
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
    module2.exports = isMap;
  },
});

// node_modules/lodash/_baseIsSet.js
var require_baseIsSet = __commonJS({
  'node_modules/lodash/_baseIsSet.js'(exports, module2) {
    var getTag = require_getTag();
    var isObjectLike = require_isObjectLike();
    var setTag = '[object Set]';
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }
    module2.exports = baseIsSet;
  },
});

// node_modules/lodash/isSet.js
var require_isSet = __commonJS({
  'node_modules/lodash/isSet.js'(exports, module2) {
    var baseIsSet = require_baseIsSet();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsSet = nodeUtil && nodeUtil.isSet;
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
    module2.exports = isSet;
  },
});

// node_modules/lodash/_baseClone.js
var require_baseClone = __commonJS({
  'node_modules/lodash/_baseClone.js'(exports, module2) {
    var Stack = require_Stack();
    var arrayEach = require_arrayEach();
    var assignValue = require_assignValue();
    var baseAssign = require_baseAssign();
    var baseAssignIn = require_baseAssignIn();
    var cloneBuffer = require_cloneBuffer();
    var copyArray = require_copyArray();
    var copySymbols = require_copySymbols();
    var copySymbolsIn = require_copySymbolsIn();
    var getAllKeys = require_getAllKeys();
    var getAllKeysIn = require_getAllKeysIn();
    var getTag = require_getTag();
    var initCloneArray = require_initCloneArray();
    var initCloneByTag = require_initCloneByTag();
    var initCloneObject = require_initCloneObject();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isMap = require_isMap();
    var isObject = require_isObject();
    var isSet = require_isSet();
    var keys = require_keys();
    var keysIn = require_keysIn();
    var CLONE_DEEP_FLAG = 1;
    var CLONE_FLAT_FLAG = 2;
    var CLONE_SYMBOLS_FLAG = 4;
    var argsTag = '[object Arguments]';
    var arrayTag = '[object Array]';
    var boolTag = '[object Boolean]';
    var dateTag = '[object Date]';
    var errorTag = '[object Error]';
    var funcTag = '[object Function]';
    var genTag = '[object GeneratorFunction]';
    var mapTag = '[object Map]';
    var numberTag = '[object Number]';
    var objectTag = '[object Object]';
    var regexpTag = '[object RegExp]';
    var setTag = '[object Set]';
    var stringTag = '[object String]';
    var symbolTag = '[object Symbol]';
    var weakMapTag = '[object WeakMap]';
    var arrayBufferTag = '[object ArrayBuffer]';
    var dataViewTag = '[object DataView]';
    var float32Tag = '[object Float32Array]';
    var float64Tag = '[object Float64Array]';
    var int8Tag = '[object Int8Array]';
    var int16Tag = '[object Int16Array]';
    var int32Tag = '[object Int32Array]';
    var uint8Tag = '[object Uint8Array]';
    var uint8ClampedTag = '[object Uint8ClampedArray]';
    var uint16Tag = '[object Uint16Array]';
    var uint32Tag = '[object Uint32Array]';
    var cloneableTags = {};
    cloneableTags[argsTag] =
      cloneableTags[arrayTag] =
      cloneableTags[arrayBufferTag] =
      cloneableTags[dataViewTag] =
      cloneableTags[boolTag] =
      cloneableTags[dateTag] =
      cloneableTags[float32Tag] =
      cloneableTags[float64Tag] =
      cloneableTags[int8Tag] =
      cloneableTags[int16Tag] =
      cloneableTags[int32Tag] =
      cloneableTags[mapTag] =
      cloneableTags[numberTag] =
      cloneableTags[objectTag] =
      cloneableTags[regexpTag] =
      cloneableTags[setTag] =
      cloneableTags[stringTag] =
      cloneableTags[symbolTag] =
      cloneableTags[uint8Tag] =
      cloneableTags[uint8ClampedTag] =
      cloneableTags[uint16Tag] =
      cloneableTags[uint32Tag] =
        true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
        isDeep = bitmask & CLONE_DEEP_FLAG,
        isFlat = bitmask & CLONE_FLAT_FLAG,
        isFull = bitmask & CLONE_SYMBOLS_FLAG;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
          isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = isFlat || isFunc ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      stack || (stack = new Stack());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);
      if (isSet(value)) {
        value.forEach(function (subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function (subValue, key2) {
          result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
        });
      }
      var keysFunc = isFull ? (isFlat ? getAllKeysIn : getAllKeys) : isFlat ? keysIn : keys;
      var props = isArr ? void 0 : keysFunc(value);
      arrayEach(props || value, function (subValue, key2) {
        if (props) {
          key2 = subValue;
          subValue = value[key2];
        }
        assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
      });
      return result;
    }
    module2.exports = baseClone;
  },
});

// node_modules/lodash/cloneDeep.js
var require_cloneDeep = __commonJS({
  'node_modules/lodash/cloneDeep.js'(exports, module2) {
    var baseClone = require_baseClone();
    var CLONE_DEEP_FLAG = 1;
    var CLONE_SYMBOLS_FLAG = 4;
    function cloneDeep3(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }
    module2.exports = cloneDeep3;
  },
});

// node_modules/crossfilter2/crossfilter.js
var require_crossfilter = __commonJS({
  'node_modules/crossfilter2/crossfilter.js'(exports, module2) {
    (function (global2, factory) {
      typeof exports === 'object' && typeof module2 !== 'undefined'
        ? (module2.exports = factory())
        : typeof define === 'function' && define.amd
        ? define(factory)
        : ((global2 = global2 || self), (global2.crossfilter = factory()));
    })(exports, function () {
      'use strict';
      let array8 = arrayUntyped,
        array16 = arrayUntyped,
        array32 = arrayUntyped,
        arrayLengthen = arrayLengthenUntyped,
        arrayWiden = arrayWidenUntyped;
      if (typeof Uint8Array !== 'undefined') {
        array8 = function (n) {
          return new Uint8Array(n);
        };
        array16 = function (n) {
          return new Uint16Array(n);
        };
        array32 = function (n) {
          return new Uint32Array(n);
        };
        arrayLengthen = function (array, length) {
          if (array.length >= length) return array;
          var copy = new array.constructor(length);
          copy.set(array);
          return copy;
        };
        arrayWiden = function (array, width) {
          var copy;
          switch (width) {
            case 16:
              copy = array16(array.length);
              break;
            case 32:
              copy = array32(array.length);
              break;
            default:
              throw new Error('invalid array width!');
          }
          copy.set(array);
          return copy;
        };
      }
      function arrayUntyped(n) {
        var array = new Array(n),
          i = -1;
        while (++i < n) array[i] = 0;
        return array;
      }
      function arrayLengthenUntyped(array, length) {
        var n = array.length;
        while (n < length) array[n++] = 0;
        return array;
      }
      function arrayWidenUntyped(array, width) {
        if (width > 32) throw new Error('invalid array width!');
        return array;
      }
      function bitarray(n) {
        this.length = n;
        this.subarrays = 1;
        this.width = 8;
        this.masks = {
          0: 0,
        };
        this[0] = array8(n);
      }
      bitarray.prototype.lengthen = function (n) {
        var i, len;
        for (i = 0, len = this.subarrays; i < len; ++i) {
          this[i] = arrayLengthen(this[i], n);
        }
        this.length = n;
      };
      bitarray.prototype.add = function () {
        var m, w, one, i, len;
        for (i = 0, len = this.subarrays; i < len; ++i) {
          m = this.masks[i];
          w = this.width - 32 * i;
          one = (~m & (m + 1)) >>> 0;
          if (w >= 32 && !one) {
            continue;
          }
          if (w < 32 && one & (1 << w)) {
            this[i] = arrayWiden(this[i], (w <<= 1));
            this.width = 32 * i + w;
          }
          this.masks[i] |= one;
          return {
            offset: i,
            one,
          };
        }
        this[this.subarrays] = array8(this.length);
        this.masks[this.subarrays] = 1;
        this.width += 8;
        return {
          offset: this.subarrays++,
          one: 1,
        };
      };
      bitarray.prototype.copy = function (dest, src) {
        var i, len;
        for (i = 0, len = this.subarrays; i < len; ++i) {
          this[i][dest] = this[i][src];
        }
      };
      bitarray.prototype.truncate = function (n) {
        var i, len;
        for (i = 0, len = this.subarrays; i < len; ++i) {
          for (var j = this.length - 1; j >= n; j--) {
            this[i][j] = 0;
          }
        }
        this.length = n;
      };
      bitarray.prototype.zero = function (n) {
        var i, len;
        for (i = 0, len = this.subarrays; i < len; ++i) {
          if (this[i][n]) {
            return false;
          }
        }
        return true;
      };
      bitarray.prototype.zeroExcept = function (n, offset, zero) {
        var i, len;
        for (i = 0, len = this.subarrays; i < len; ++i) {
          if (i === offset ? this[i][n] & zero : this[i][n]) {
            return false;
          }
        }
        return true;
      };
      bitarray.prototype.zeroExceptMask = function (n, mask) {
        var i, len;
        for (i = 0, len = this.subarrays; i < len; ++i) {
          if (this[i][n] & mask[i]) {
            return false;
          }
        }
        return true;
      };
      bitarray.prototype.only = function (n, offset, one) {
        var i, len;
        for (i = 0, len = this.subarrays; i < len; ++i) {
          if (this[i][n] != (i === offset ? one : 0)) {
            return false;
          }
        }
        return true;
      };
      bitarray.prototype.onlyExcept = function (n, offset, zero, onlyOffset, onlyOne) {
        var mask;
        var i, len;
        for (i = 0, len = this.subarrays; i < len; ++i) {
          mask = this[i][n];
          if (i === offset) mask = (mask & zero) >>> 0;
          if (mask != (i === onlyOffset ? onlyOne : 0)) {
            return false;
          }
        }
        return true;
      };
      var xfilterArray = {
        array8: arrayUntyped,
        array16: arrayUntyped,
        array32: arrayUntyped,
        arrayLengthen: arrayLengthenUntyped,
        arrayWiden: arrayWidenUntyped,
        bitarray,
      };
      const filterExact = (bisect2, value) => {
        return function (values) {
          var n = values.length;
          return [bisect2.left(values, value, 0, n), bisect2.right(values, value, 0, n)];
        };
      };
      const filterRange = (bisect2, range) => {
        var min = range[0],
          max = range[1];
        return function (values) {
          var n = values.length;
          return [bisect2.left(values, min, 0, n), bisect2.left(values, max, 0, n)];
        };
      };
      const filterAll = (values) => {
        return [0, values.length];
      };
      var xfilterFilter = {
        filterExact,
        filterRange,
        filterAll,
      };
      var cr_identity = (d) => {
        return d;
      };
      var cr_null = () => {
        return null;
      };
      var cr_zero = () => {
        return 0;
      };
      function heap_by(f) {
        function heap(a, lo, hi) {
          var n = hi - lo,
            i = (n >>> 1) + 1;
          while (--i > 0) sift(a, i, n, lo);
          return a;
        }
        function sort(a, lo, hi) {
          var n = hi - lo,
            t;
          while (--n > 0) (t = a[lo]), (a[lo] = a[lo + n]), (a[lo + n] = t), sift(a, 1, n, lo);
          return a;
        }
        function sift(a, i, n, lo) {
          var d = a[--lo + i],
            x = f(d),
            child;
          while ((child = i << 1) <= n) {
            if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;
            if (x <= f(a[lo + child])) break;
            a[lo + i] = a[lo + child];
            i = child;
          }
          a[lo + i] = d;
        }
        heap.sort = sort;
        return heap;
      }
      const h = heap_by(cr_identity);
      h.by = heap_by;
      function heapselect_by(f) {
        var heap = h.by(f);
        function heapselect(a, lo, hi, k) {
          var queue = new Array((k = Math.min(hi - lo, k))),
            min,
            i,
            d;
          for (i = 0; i < k; ++i) queue[i] = a[lo++];
          heap(queue, 0, k);
          if (lo < hi) {
            min = f(queue[0]);
            do {
              if (f((d = a[lo])) > min) {
                queue[0] = d;
                min = f(heap(queue, 0, k)[0]);
              }
            } while (++lo < hi);
          }
          return queue;
        }
        return heapselect;
      }
      const h$1 = heapselect_by(cr_identity);
      h$1.by = heapselect_by;
      function bisect_by(f) {
        function bisectLeft(a, x, lo, hi) {
          while (lo < hi) {
            var mid = (lo + hi) >>> 1;
            if (f(a[mid]) < x) lo = mid + 1;
            else hi = mid;
          }
          return lo;
        }
        function bisectRight(a, x, lo, hi) {
          while (lo < hi) {
            var mid = (lo + hi) >>> 1;
            if (x < f(a[mid])) hi = mid;
            else lo = mid + 1;
          }
          return lo;
        }
        bisectRight.right = bisectRight;
        bisectRight.left = bisectLeft;
        return bisectRight;
      }
      const bisect = bisect_by(cr_identity);
      bisect.by = bisect_by;
      var permute = (array, index, deep2) => {
        for (var i = 0, n = index.length, copy = deep2 ? JSON.parse(JSON.stringify(array)) : new Array(n); i < n; ++i) {
          copy[i] = array[index[i]];
        }
        return copy;
      };
      const reduceIncrement = (p) => {
        return p + 1;
      };
      const reduceDecrement = (p) => {
        return p - 1;
      };
      const reduceAdd = (f) => {
        return function (p, v) {
          return p + +f(v);
        };
      };
      const reduceSubtract = (f) => {
        return function (p, v) {
          return p - f(v);
        };
      };
      var xfilterReduce = {
        reduceIncrement,
        reduceDecrement,
        reduceAdd,
        reduceSubtract,
      };
      function deep(t, e, i, n, r) {
        for (r in ((n = (i = i.split('.')).splice(-1, 1)), i)) e = e[i[r]] = e[i[r]] || {};
        return t(e, n);
      }
      const get = (obj, prop) => {
        const value = obj[prop];
        return typeof value === 'function' ? value.call(obj) : value;
      };
      const reg = /\[([\w\d]+)\]/g;
      var result = (obj, path) => {
        return deep(get, obj, path.replace(reg, '.$1'));
      };
      var REMOVED_INDEX = -1;
      crossfilter2.heap = h;
      crossfilter2.heapselect = h$1;
      crossfilter2.bisect = bisect;
      crossfilter2.permute = permute;
      function crossfilter2() {
        var crossfilter3 = {
          add,
          remove: removeData,
          dimension,
          groupAll,
          size,
          all,
          allFiltered,
          onChange,
          isElementFiltered,
        };
        var data = [],
          n = 0,
          filters,
          filterListeners = [],
          dataListeners = [],
          removeDataListeners = [],
          callbacks = [];
        filters = new xfilterArray.bitarray(0);
        function add(newData) {
          var n0 = n,
            n1 = newData.length;
          if (n1) {
            data = data.concat(newData);
            filters.lengthen((n += n1));
            dataListeners.forEach(function (l) {
              l(newData, n0, n1);
            });
            triggerOnChange('dataAdded');
          }
          return crossfilter3;
        }
        function removeData(predicate) {
          var newIndex = new Array(n),
            removed = [],
            usePred = typeof predicate === 'function',
            shouldRemove = function (i) {
              return usePred ? predicate(data[i], i) : filters.zero(i);
            };
          for (var index1 = 0, index2 = 0; index1 < n; ++index1) {
            if (shouldRemove(index1)) {
              removed.push(index1);
              newIndex[index1] = REMOVED_INDEX;
            } else {
              newIndex[index1] = index2++;
            }
          }
          filterListeners.forEach(function (l) {
            l(-1, -1, [], removed, true);
          });
          removeDataListeners.forEach(function (l) {
            l(newIndex);
          });
          for (var index3 = 0, index4 = 0; index3 < n; ++index3) {
            if (newIndex[index3] !== REMOVED_INDEX) {
              if (index3 !== index4) filters.copy(index4, index3), (data[index4] = data[index3]);
              ++index4;
            }
          }
          data.length = n = index4;
          filters.truncate(index4);
          triggerOnChange('dataRemoved');
        }
        function maskForDimensions(dimensions) {
          var n2,
            d,
            len,
            id,
            mask = Array(filters.subarrays);
          for (n2 = 0; n2 < filters.subarrays; n2++) {
            mask[n2] = ~0;
          }
          for (d = 0, len = dimensions.length; d < len; d++) {
            id = dimensions[d].id();
            mask[id >> 7] &= ~(1 << (id & 63));
          }
          return mask;
        }
        function isElementFiltered(i, ignore_dimensions) {
          var mask = maskForDimensions(ignore_dimensions || []);
          return filters.zeroExceptMask(i, mask);
        }
        function dimension(value, iterable) {
          if (typeof value === 'string') {
            var accessorPath = value;
            value = function (d) {
              return result(d, accessorPath);
            };
          }
          var dimension2 = {
            filter,
            filterExact: filterExact2,
            filterRange: filterRange2,
            filterFunction,
            filterAll: filterAll2,
            currentFilter,
            hasCurrentFilter,
            top,
            bottom,
            group,
            groupAll: groupAll2,
            dispose,
            remove: dispose,
            accessor: value,
            id: function () {
              return id;
            },
          };
          var one,
            zero,
            offset,
            id,
            values,
            index,
            newValues,
            newIndex,
            iterablesIndexCount,
            iterablesIndexFilterStatus,
            iterablesEmptyRows = [],
            sortRange = function (n2) {
              return cr_range(n2).sort(function (A, B) {
                var a = newValues[A],
                  b = newValues[B];
                return a < b ? -1 : a > b ? 1 : A - B;
              });
            },
            refilter = xfilterFilter.filterAll,
            refilterFunction,
            filterValue,
            filterValuePresent,
            indexListeners = [],
            dimensionGroups = [],
            lo0 = 0,
            hi0 = 0,
            t = 0,
            k;
          dataListeners.unshift(preAdd);
          dataListeners.push(postAdd);
          removeDataListeners.push(removeData2);
          var tmp = filters.add();
          offset = tmp.offset;
          one = tmp.one;
          zero = ~one;
          id = (offset << 7) | (Math.log(one) / Math.log(2));
          preAdd(data, 0, n);
          postAdd(data, 0, n);
          function preAdd(newData, n0, n1) {
            var newIterablesIndexCount, newIterablesIndexFilterStatus;
            if (iterable) {
              t = 0;
              j = 0;
              k = [];
              for (var i0 = 0; i0 < newData.length; i0++) {
                for (j = 0, k = value(newData[i0]); j < k.length; j++) {
                  t++;
                }
              }
              newValues = [];
              newIterablesIndexCount = cr_range(newData.length);
              newIterablesIndexFilterStatus = cr_index(t, 1);
              var unsortedIndex = cr_range(t);
              for (var l = 0, index1 = 0; index1 < newData.length; index1++) {
                k = value(newData[index1]);
                if (!k.length) {
                  newIterablesIndexCount[index1] = 0;
                  iterablesEmptyRows.push(index1 + n0);
                  continue;
                }
                newIterablesIndexCount[index1] = k.length;
                for (j = 0; j < k.length; j++) {
                  newValues.push(k[j]);
                  unsortedIndex[l] = index1;
                  l++;
                }
              }
              var sortMap = sortRange(t);
              newValues = permute(newValues, sortMap);
              newIndex = permute(unsortedIndex, sortMap);
            } else {
              newValues = newData.map(value);
              newIndex = sortRange(n1);
              newValues = permute(newValues, newIndex);
            }
            var bounds = refilter(newValues),
              lo1 = bounds[0],
              hi1 = bounds[1];
            var index2, index3, index4;
            if (iterable) {
              n1 = t;
              if (refilterFunction) {
                for (index2 = 0; index2 < n1; ++index2) {
                  if (!refilterFunction(newValues[index2], index2)) {
                    if (--newIterablesIndexCount[newIndex[index2]] === 0) {
                      filters[offset][newIndex[index2] + n0] |= one;
                    }
                    newIterablesIndexFilterStatus[index2] = 1;
                  }
                }
              } else {
                for (index3 = 0; index3 < lo1; ++index3) {
                  if (--newIterablesIndexCount[newIndex[index3]] === 0) {
                    filters[offset][newIndex[index3] + n0] |= one;
                  }
                  newIterablesIndexFilterStatus[index3] = 1;
                }
                for (index4 = hi1; index4 < n1; ++index4) {
                  if (--newIterablesIndexCount[newIndex[index4]] === 0) {
                    filters[offset][newIndex[index4] + n0] |= one;
                  }
                  newIterablesIndexFilterStatus[index4] = 1;
                }
              }
            } else {
              if (refilterFunction) {
                for (index2 = 0; index2 < n1; ++index2) {
                  if (!refilterFunction(newValues[index2], index2)) {
                    filters[offset][newIndex[index2] + n0] |= one;
                  }
                }
              } else {
                for (index3 = 0; index3 < lo1; ++index3) {
                  filters[offset][newIndex[index3] + n0] |= one;
                }
                for (index4 = hi1; index4 < n1; ++index4) {
                  filters[offset][newIndex[index4] + n0] |= one;
                }
              }
            }
            if (!n0) {
              values = newValues;
              index = newIndex;
              iterablesIndexCount = newIterablesIndexCount;
              iterablesIndexFilterStatus = newIterablesIndexFilterStatus;
              lo0 = lo1;
              hi0 = hi1;
              return;
            }
            var oldValues = values,
              oldIndex = index,
              oldIterablesIndexFilterStatus = iterablesIndexFilterStatus,
              old_n0,
              i1 = 0;
            i0 = 0;
            if (iterable) {
              old_n0 = n0;
              n0 = oldValues.length;
              n1 = t;
            }
            values = iterable ? new Array(n0 + n1) : new Array(n);
            index = iterable ? new Array(n0 + n1) : cr_index(n, n);
            if (iterable) iterablesIndexFilterStatus = cr_index(n0 + n1, 1);
            if (iterable) {
              var oldiiclength = iterablesIndexCount.length;
              iterablesIndexCount = xfilterArray.arrayLengthen(iterablesIndexCount, n);
              for (var j = 0; j + oldiiclength < n; j++) {
                iterablesIndexCount[j + oldiiclength] = newIterablesIndexCount[j];
              }
            }
            var index5 = 0;
            for (; i0 < n0 && i1 < n1; ++index5) {
              if (oldValues[i0] < newValues[i1]) {
                values[index5] = oldValues[i0];
                if (iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];
                index[index5] = oldIndex[i0++];
              } else {
                values[index5] = newValues[i1];
                if (iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];
                index[index5] = newIndex[i1++] + (iterable ? old_n0 : n0);
              }
            }
            for (; i0 < n0; ++i0, ++index5) {
              values[index5] = oldValues[i0];
              if (iterable) iterablesIndexFilterStatus[index5] = oldIterablesIndexFilterStatus[i0];
              index[index5] = oldIndex[i0];
            }
            for (; i1 < n1; ++i1, ++index5) {
              values[index5] = newValues[i1];
              if (iterable) iterablesIndexFilterStatus[index5] = newIterablesIndexFilterStatus[i1];
              index[index5] = newIndex[i1] + (iterable ? old_n0 : n0);
            }
            (bounds = refilter(values)), (lo0 = bounds[0]), (hi0 = bounds[1]);
          }
          function postAdd(newData, n0, n1) {
            indexListeners.forEach(function (l) {
              l(newValues, newIndex, n0, n1);
            });
            newValues = newIndex = null;
          }
          function removeData2(reIndex) {
            if (iterable) {
              for (var i0 = 0, i1 = 0; i0 < iterablesEmptyRows.length; i0++) {
                if (reIndex[iterablesEmptyRows[i0]] !== REMOVED_INDEX) {
                  iterablesEmptyRows[i1] = reIndex[iterablesEmptyRows[i0]];
                  i1++;
                }
              }
              iterablesEmptyRows.length = i1;
              for (i0 = 0, i1 = 0; i0 < n; i0++) {
                if (reIndex[i0] !== REMOVED_INDEX) {
                  if (i1 !== i0) iterablesIndexCount[i1] = iterablesIndexCount[i0];
                  i1++;
                }
              }
              iterablesIndexCount = iterablesIndexCount.slice(0, i1);
            }
            var n0 = values.length;
            for (var i = 0, j = 0, oldDataIndex; i < n0; ++i) {
              oldDataIndex = index[i];
              if (reIndex[oldDataIndex] !== REMOVED_INDEX) {
                if (i !== j) values[j] = values[i];
                index[j] = reIndex[oldDataIndex];
                if (iterable) {
                  iterablesIndexFilterStatus[j] = iterablesIndexFilterStatus[i];
                }
                ++j;
              }
            }
            values.length = j;
            if (iterable) iterablesIndexFilterStatus = iterablesIndexFilterStatus.slice(0, j);
            while (j < n0) index[j++] = 0;
            var bounds = refilter(values);
            (lo0 = bounds[0]), (hi0 = bounds[1]);
          }
          function filterIndexBounds(bounds) {
            var lo1 = bounds[0],
              hi1 = bounds[1];
            if (refilterFunction) {
              refilterFunction = null;
              filterIndexFunction(function (d, i2) {
                return lo1 <= i2 && i2 < hi1;
              }, bounds[0] === 0 && bounds[1] === values.length);
              lo0 = lo1;
              hi0 = hi1;
              return dimension2;
            }
            var i,
              j,
              k2,
              added = [],
              removed = [],
              valueIndexAdded = [],
              valueIndexRemoved = [];
            if (lo1 < lo0) {
              for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {
                added.push(index[i]);
                valueIndexAdded.push(i);
              }
            } else if (lo1 > lo0) {
              for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {
                removed.push(index[i]);
                valueIndexRemoved.push(i);
              }
            }
            if (hi1 > hi0) {
              for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {
                added.push(index[i]);
                valueIndexAdded.push(i);
              }
            } else if (hi1 < hi0) {
              for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {
                removed.push(index[i]);
                valueIndexRemoved.push(i);
              }
            }
            if (!iterable) {
              for (i = 0; i < added.length; i++) {
                filters[offset][added[i]] ^= one;
              }
              for (i = 0; i < removed.length; i++) {
                filters[offset][removed[i]] ^= one;
              }
            } else {
              var newAdded = [];
              var newRemoved = [];
              for (i = 0; i < added.length; i++) {
                iterablesIndexCount[added[i]]++;
                iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;
                if (iterablesIndexCount[added[i]] === 1) {
                  filters[offset][added[i]] ^= one;
                  newAdded.push(added[i]);
                }
              }
              for (i = 0; i < removed.length; i++) {
                iterablesIndexCount[removed[i]]--;
                iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;
                if (iterablesIndexCount[removed[i]] === 0) {
                  filters[offset][removed[i]] ^= one;
                  newRemoved.push(removed[i]);
                }
              }
              added = newAdded;
              removed = newRemoved;
              if (refilter === xfilterFilter.filterAll) {
                for (i = 0; i < iterablesEmptyRows.length; i++) {
                  if (filters[offset][(k2 = iterablesEmptyRows[i])] & one) {
                    filters[offset][k2] ^= one;
                    added.push(k2);
                  }
                }
              } else {
                for (i = 0; i < iterablesEmptyRows.length; i++) {
                  if (!(filters[offset][(k2 = iterablesEmptyRows[i])] & one)) {
                    filters[offset][k2] ^= one;
                    removed.push(k2);
                  }
                }
              }
            }
            lo0 = lo1;
            hi0 = hi1;
            filterListeners.forEach(function (l) {
              l(one, offset, added, removed);
            });
            triggerOnChange('filtered');
            return dimension2;
          }
          function filter(range) {
            return range == null
              ? filterAll2()
              : Array.isArray(range)
              ? filterRange2(range)
              : typeof range === 'function'
              ? filterFunction(range)
              : filterExact2(range);
          }
          function filterExact2(value2) {
            filterValue = value2;
            filterValuePresent = true;
            return filterIndexBounds((refilter = xfilterFilter.filterExact(bisect, value2))(values));
          }
          function filterRange2(range) {
            filterValue = range;
            filterValuePresent = true;
            return filterIndexBounds((refilter = xfilterFilter.filterRange(bisect, range))(values));
          }
          function filterAll2() {
            filterValue = void 0;
            filterValuePresent = false;
            return filterIndexBounds((refilter = xfilterFilter.filterAll)(values));
          }
          function filterFunction(f) {
            filterValue = f;
            filterValuePresent = true;
            refilterFunction = f;
            refilter = xfilterFilter.filterAll;
            filterIndexFunction(f, false);
            var bounds = refilter(values);
            (lo0 = bounds[0]), (hi0 = bounds[1]);
            return dimension2;
          }
          function filterIndexFunction(f, filterAll3) {
            var i,
              k2,
              x,
              added = [],
              removed = [],
              valueIndexAdded = [],
              valueIndexRemoved = [],
              indexLength = values.length;
            if (!iterable) {
              for (i = 0; i < indexLength; ++i) {
                if (!(filters[offset][(k2 = index[i])] & one) ^ !!(x = f(values[i], i))) {
                  if (x) added.push(k2);
                  else removed.push(k2);
                }
              }
            }
            if (iterable) {
              for (i = 0; i < indexLength; ++i) {
                if (f(values[i], i)) {
                  added.push(index[i]);
                  valueIndexAdded.push(i);
                } else {
                  removed.push(index[i]);
                  valueIndexRemoved.push(i);
                }
              }
            }
            if (!iterable) {
              for (i = 0; i < added.length; i++) {
                if (filters[offset][added[i]] & one) filters[offset][added[i]] &= zero;
              }
              for (i = 0; i < removed.length; i++) {
                if (!(filters[offset][removed[i]] & one)) filters[offset][removed[i]] |= one;
              }
            } else {
              var newAdded = [];
              var newRemoved = [];
              for (i = 0; i < added.length; i++) {
                if (iterablesIndexFilterStatus[valueIndexAdded[i]] === 1) {
                  iterablesIndexCount[added[i]]++;
                  iterablesIndexFilterStatus[valueIndexAdded[i]] = 0;
                  if (iterablesIndexCount[added[i]] === 1) {
                    filters[offset][added[i]] ^= one;
                    newAdded.push(added[i]);
                  }
                }
              }
              for (i = 0; i < removed.length; i++) {
                if (iterablesIndexFilterStatus[valueIndexRemoved[i]] === 0) {
                  iterablesIndexCount[removed[i]]--;
                  iterablesIndexFilterStatus[valueIndexRemoved[i]] = 1;
                  if (iterablesIndexCount[removed[i]] === 0) {
                    filters[offset][removed[i]] ^= one;
                    newRemoved.push(removed[i]);
                  }
                }
              }
              added = newAdded;
              removed = newRemoved;
              if (filterAll3) {
                for (i = 0; i < iterablesEmptyRows.length; i++) {
                  if (filters[offset][(k2 = iterablesEmptyRows[i])] & one) {
                    filters[offset][k2] ^= one;
                    added.push(k2);
                  }
                }
              } else {
                for (i = 0; i < iterablesEmptyRows.length; i++) {
                  if (!(filters[offset][(k2 = iterablesEmptyRows[i])] & one)) {
                    filters[offset][k2] ^= one;
                    removed.push(k2);
                  }
                }
              }
            }
            filterListeners.forEach(function (l) {
              l(one, offset, added, removed);
            });
            triggerOnChange('filtered');
          }
          function currentFilter() {
            return filterValue;
          }
          function hasCurrentFilter() {
            return filterValuePresent;
          }
          function top(k2, top_offset) {
            var array = [],
              i = hi0,
              j,
              toSkip = 0;
            if (top_offset && top_offset > 0) toSkip = top_offset;
            while (--i >= lo0 && k2 > 0) {
              if (filters.zero((j = index[i]))) {
                if (toSkip > 0) {
                  --toSkip;
                } else {
                  array.push(data[j]);
                  --k2;
                }
              }
            }
            if (iterable) {
              for (i = 0; i < iterablesEmptyRows.length && k2 > 0; i++) {
                if (filters.zero((j = iterablesEmptyRows[i]))) {
                  if (toSkip > 0) {
                    --toSkip;
                  } else {
                    array.push(data[j]);
                    --k2;
                  }
                }
              }
            }
            return array;
          }
          function bottom(k2, bottom_offset) {
            var array = [],
              i,
              j,
              toSkip = 0;
            if (bottom_offset && bottom_offset > 0) toSkip = bottom_offset;
            if (iterable) {
              for (i = 0; i < iterablesEmptyRows.length && k2 > 0; i++) {
                if (filters.zero((j = iterablesEmptyRows[i]))) {
                  if (toSkip > 0) {
                    --toSkip;
                  } else {
                    array.push(data[j]);
                    --k2;
                  }
                }
              }
            }
            i = lo0;
            while (i < hi0 && k2 > 0) {
              if (filters.zero((j = index[i]))) {
                if (toSkip > 0) {
                  --toSkip;
                } else {
                  array.push(data[j]);
                  --k2;
                }
              }
              i++;
            }
            return array;
          }
          function group(key) {
            var group2 = {
              top: top2,
              all: all2,
              reduce,
              reduceCount,
              reduceSum,
              order,
              orderNatural,
              size: size2,
              dispose: dispose2,
              remove: dispose2,
            };
            dimensionGroups.push(group2);
            var groups,
              groupIndex,
              groupWidth = 8,
              groupCapacity = capacity(groupWidth),
              k2 = 0,
              select,
              heap,
              reduceAdd2,
              reduceRemove,
              reduceInitial,
              update = cr_null,
              reset = cr_null,
              resetNeeded = true,
              groupAll3 = key === cr_null,
              n0old;
            if (arguments.length < 1) key = cr_identity;
            filterListeners.push(update);
            indexListeners.push(add2);
            removeDataListeners.push(removeData3);
            add2(values, index, 0, n);
            function add2(newValues2, newIndex2, n0, n1) {
              if (iterable) {
                n0old = n0;
                n0 = values.length - newValues2.length;
                n1 = newValues2.length;
              }
              var oldGroups = groups,
                reIndex = iterable ? [] : cr_index(k2, groupCapacity),
                add3 = reduceAdd2,
                remove = reduceRemove,
                initial = reduceInitial,
                k0 = k2,
                i0 = 0,
                i1 = 0,
                j,
                g0,
                x0,
                x1,
                g,
                x;
              if (resetNeeded) add3 = initial = cr_null;
              if (resetNeeded) remove = initial = cr_null;
              (groups = new Array(k2)), (k2 = 0);
              if (iterable) {
                groupIndex = k0 ? groupIndex : [];
              } else {
                groupIndex = k0 > 1 ? xfilterArray.arrayLengthen(groupIndex, n) : cr_index(n, groupCapacity);
              }
              if (k0) x0 = (g0 = oldGroups[0]).key;
              while (i1 < n1 && !((x1 = key(newValues2[i1])) >= x1)) ++i1;
              while (i1 < n1) {
                if (g0 && x0 <= x1) {
                  (g = g0), (x = x0);
                  reIndex[i0] = k2;
                  g0 = oldGroups[++i0];
                  if (g0) x0 = g0.key;
                } else {
                  (g = { key: x1, value: initial() }), (x = x1);
                }
                groups[k2] = g;
                while (x1 <= x) {
                  j = newIndex2[i1] + (iterable ? n0old : n0);
                  if (iterable) {
                    if (groupIndex[j]) {
                      groupIndex[j].push(k2);
                    } else {
                      groupIndex[j] = [k2];
                    }
                  } else {
                    groupIndex[j] = k2;
                  }
                  g.value = add3(g.value, data[j], true);
                  if (!filters.zeroExcept(j, offset, zero)) g.value = remove(g.value, data[j], false);
                  if (++i1 >= n1) break;
                  x1 = key(newValues2[i1]);
                }
                groupIncrement();
              }
              while (i0 < k0) {
                groups[(reIndex[i0] = k2)] = oldGroups[i0++];
                groupIncrement();
              }
              if (iterable) {
                for (var index1 = 0; index1 < n; index1++) {
                  if (!groupIndex[index1]) {
                    groupIndex[index1] = [];
                  }
                }
              }
              if (k2 > i0) {
                if (iterable) {
                  for (i0 = 0; i0 < n0old; ++i0) {
                    for (index1 = 0; index1 < groupIndex[i0].length; index1++) {
                      groupIndex[i0][index1] = reIndex[groupIndex[i0][index1]];
                    }
                  }
                } else {
                  for (i0 = 0; i0 < n0; ++i0) {
                    groupIndex[i0] = reIndex[groupIndex[i0]];
                  }
                }
              }
              j = filterListeners.indexOf(update);
              if (k2 > 1 || iterable) {
                update = updateMany;
                reset = resetMany;
              } else {
                if (!k2 && groupAll3) {
                  k2 = 1;
                  groups = [{ key: null, value: initial() }];
                }
                if (k2 === 1) {
                  update = updateOne;
                  reset = resetOne;
                } else {
                  update = cr_null;
                  reset = cr_null;
                }
                groupIndex = null;
              }
              filterListeners[j] = update;
              function groupIncrement() {
                if (iterable) {
                  k2++;
                  return;
                }
                if (++k2 === groupCapacity) {
                  reIndex = xfilterArray.arrayWiden(reIndex, (groupWidth <<= 1));
                  groupIndex = xfilterArray.arrayWiden(groupIndex, groupWidth);
                  groupCapacity = capacity(groupWidth);
                }
              }
            }
            function removeData3(reIndex) {
              if (k2 > 1 || iterable) {
                var oldK = k2,
                  oldGroups = groups,
                  seenGroups = cr_index(oldK, oldK),
                  i,
                  i0,
                  j;
                if (!iterable) {
                  for (i = 0, j = 0; i < n; ++i) {
                    if (reIndex[i] !== REMOVED_INDEX) {
                      seenGroups[(groupIndex[j] = groupIndex[i])] = 1;
                      ++j;
                    }
                  }
                } else {
                  for (i = 0, j = 0; i < n; ++i) {
                    if (reIndex[i] !== REMOVED_INDEX) {
                      groupIndex[j] = groupIndex[i];
                      for (i0 = 0; i0 < groupIndex[j].length; i0++) {
                        seenGroups[groupIndex[j][i0]] = 1;
                      }
                      ++j;
                    }
                  }
                  groupIndex = groupIndex.slice(0, j);
                }
                (groups = []), (k2 = 0);
                for (i = 0; i < oldK; ++i) {
                  if (seenGroups[i]) {
                    seenGroups[i] = k2++;
                    groups.push(oldGroups[i]);
                  }
                }
                if (k2 > 1 || iterable) {
                  if (!iterable) {
                    for (i = 0; i < j; ++i) groupIndex[i] = seenGroups[groupIndex[i]];
                  } else {
                    for (i = 0; i < j; ++i) {
                      for (i0 = 0; i0 < groupIndex[i].length; ++i0) {
                        groupIndex[i][i0] = seenGroups[groupIndex[i][i0]];
                      }
                    }
                  }
                } else {
                  groupIndex = null;
                }
                filterListeners[filterListeners.indexOf(update)] =
                  k2 > 1 || iterable
                    ? ((reset = resetMany), (update = updateMany))
                    : k2 === 1
                    ? ((reset = resetOne), (update = updateOne))
                    : (reset = update = cr_null);
              } else if (k2 === 1) {
                if (groupAll3) return;
                for (var index3 = 0; index3 < n; ++index3) if (reIndex[index3] !== REMOVED_INDEX) return;
                (groups = []), (k2 = 0);
                filterListeners[filterListeners.indexOf(update)] = update = reset = cr_null;
              }
            }
            function updateMany(filterOne, filterOffset, added, removed, notFilter) {
              if ((filterOne === one && filterOffset === offset) || resetNeeded) return;
              var i, j, k3, n2, g;
              if (iterable) {
                for (i = 0, n2 = added.length; i < n2; ++i) {
                  if (filters.zeroExcept((k3 = added[i]), offset, zero)) {
                    for (j = 0; j < groupIndex[k3].length; j++) {
                      g = groups[groupIndex[k3][j]];
                      g.value = reduceAdd2(g.value, data[k3], false, j);
                    }
                  }
                }
                for (i = 0, n2 = removed.length; i < n2; ++i) {
                  if (filters.onlyExcept((k3 = removed[i]), offset, zero, filterOffset, filterOne)) {
                    for (j = 0; j < groupIndex[k3].length; j++) {
                      g = groups[groupIndex[k3][j]];
                      g.value = reduceRemove(g.value, data[k3], notFilter, j);
                    }
                  }
                }
                return;
              }
              for (i = 0, n2 = added.length; i < n2; ++i) {
                if (filters.zeroExcept((k3 = added[i]), offset, zero)) {
                  g = groups[groupIndex[k3]];
                  g.value = reduceAdd2(g.value, data[k3], false);
                }
              }
              for (i = 0, n2 = removed.length; i < n2; ++i) {
                if (filters.onlyExcept((k3 = removed[i]), offset, zero, filterOffset, filterOne)) {
                  g = groups[groupIndex[k3]];
                  g.value = reduceRemove(g.value, data[k3], notFilter);
                }
              }
            }
            function updateOne(filterOne, filterOffset, added, removed, notFilter) {
              if ((filterOne === one && filterOffset === offset) || resetNeeded) return;
              var i,
                k3,
                n2,
                g = groups[0];
              for (i = 0, n2 = added.length; i < n2; ++i) {
                if (filters.zeroExcept((k3 = added[i]), offset, zero)) {
                  g.value = reduceAdd2(g.value, data[k3], false);
                }
              }
              for (i = 0, n2 = removed.length; i < n2; ++i) {
                if (filters.onlyExcept((k3 = removed[i]), offset, zero, filterOffset, filterOne)) {
                  g.value = reduceRemove(g.value, data[k3], notFilter);
                }
              }
            }
            function resetMany() {
              var i, j, g;
              for (i = 0; i < k2; ++i) {
                groups[i].value = reduceInitial();
              }
              if (iterable) {
                for (i = 0; i < n; ++i) {
                  for (j = 0; j < groupIndex[i].length; j++) {
                    g = groups[groupIndex[i][j]];
                    g.value = reduceAdd2(g.value, data[i], true, j);
                  }
                }
                for (i = 0; i < n; ++i) {
                  if (!filters.zeroExcept(i, offset, zero)) {
                    for (j = 0; j < groupIndex[i].length; j++) {
                      g = groups[groupIndex[i][j]];
                      g.value = reduceRemove(g.value, data[i], false, j);
                    }
                  }
                }
                return;
              }
              for (i = 0; i < n; ++i) {
                g = groups[groupIndex[i]];
                g.value = reduceAdd2(g.value, data[i], true);
              }
              for (i = 0; i < n; ++i) {
                if (!filters.zeroExcept(i, offset, zero)) {
                  g = groups[groupIndex[i]];
                  g.value = reduceRemove(g.value, data[i], false);
                }
              }
            }
            function resetOne() {
              var i,
                g = groups[0];
              g.value = reduceInitial();
              for (i = 0; i < n; ++i) {
                g.value = reduceAdd2(g.value, data[i], true);
              }
              for (i = 0; i < n; ++i) {
                if (!filters.zeroExcept(i, offset, zero)) {
                  g.value = reduceRemove(g.value, data[i], false);
                }
              }
            }
            function all2() {
              if (resetNeeded) reset(), (resetNeeded = false);
              return groups;
            }
            function top2(k3) {
              var top3 = select(all2(), 0, groups.length, k3);
              return heap.sort(top3, 0, top3.length);
            }
            function reduce(add3, remove, initial) {
              reduceAdd2 = add3;
              reduceRemove = remove;
              reduceInitial = initial;
              resetNeeded = true;
              return group2;
            }
            function reduceCount() {
              return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, cr_zero);
            }
            function reduceSum(value2) {
              return reduce(xfilterReduce.reduceAdd(value2), xfilterReduce.reduceSubtract(value2), cr_zero);
            }
            function order(value2) {
              select = h$1.by(valueOf);
              heap = h.by(valueOf);
              function valueOf(d) {
                return value2(d.value);
              }
              return group2;
            }
            function orderNatural() {
              return order(cr_identity);
            }
            function size2() {
              return k2;
            }
            function dispose2() {
              var i = filterListeners.indexOf(update);
              if (i >= 0) filterListeners.splice(i, 1);
              i = indexListeners.indexOf(add2);
              if (i >= 0) indexListeners.splice(i, 1);
              i = removeDataListeners.indexOf(removeData3);
              if (i >= 0) removeDataListeners.splice(i, 1);
              i = dimensionGroups.indexOf(group2);
              if (i >= 0) dimensionGroups.splice(i, 1);
              return group2;
            }
            return reduceCount().orderNatural();
          }
          function groupAll2() {
            var g = group(cr_null),
              all2 = g.all;
            delete g.all;
            delete g.top;
            delete g.order;
            delete g.orderNatural;
            delete g.size;
            g.value = function () {
              return all2()[0].value;
            };
            return g;
          }
          function dispose() {
            dimensionGroups.forEach(function (group2) {
              group2.dispose();
            });
            var i = dataListeners.indexOf(preAdd);
            if (i >= 0) dataListeners.splice(i, 1);
            i = dataListeners.indexOf(postAdd);
            if (i >= 0) dataListeners.splice(i, 1);
            i = removeDataListeners.indexOf(removeData2);
            if (i >= 0) removeDataListeners.splice(i, 1);
            filters.masks[offset] &= zero;
            return filterAll2();
          }
          return dimension2;
        }
        function groupAll() {
          var group = {
            reduce,
            reduceCount,
            reduceSum,
            value,
            dispose,
            remove: dispose,
          };
          var reduceValue,
            reduceAdd2,
            reduceRemove,
            reduceInitial,
            resetNeeded = true;
          filterListeners.push(update);
          dataListeners.push(add2);
          add2(data, 0);
          function add2(newData, n0) {
            var i;
            if (resetNeeded) return;
            for (i = n0; i < n; ++i) {
              reduceValue = reduceAdd2(reduceValue, data[i], true);
              if (!filters.zero(i)) {
                reduceValue = reduceRemove(reduceValue, data[i], false);
              }
            }
          }
          function update(filterOne, filterOffset, added, removed, notFilter) {
            var i, k, n2;
            if (resetNeeded) return;
            for (i = 0, n2 = added.length; i < n2; ++i) {
              if (filters.zero((k = added[i]))) {
                reduceValue = reduceAdd2(reduceValue, data[k], notFilter);
              }
            }
            for (i = 0, n2 = removed.length; i < n2; ++i) {
              if (filters.only((k = removed[i]), filterOffset, filterOne)) {
                reduceValue = reduceRemove(reduceValue, data[k], notFilter);
              }
            }
          }
          function reset() {
            var i;
            reduceValue = reduceInitial();
            for (i = 0; i < n; ++i) {
              reduceValue = reduceAdd2(reduceValue, data[i], true);
              if (!filters.zero(i)) {
                reduceValue = reduceRemove(reduceValue, data[i], false);
              }
            }
          }
          function reduce(add3, remove, initial) {
            reduceAdd2 = add3;
            reduceRemove = remove;
            reduceInitial = initial;
            resetNeeded = true;
            return group;
          }
          function reduceCount() {
            return reduce(xfilterReduce.reduceIncrement, xfilterReduce.reduceDecrement, cr_zero);
          }
          function reduceSum(value2) {
            return reduce(xfilterReduce.reduceAdd(value2), xfilterReduce.reduceSubtract(value2), cr_zero);
          }
          function value() {
            if (resetNeeded) reset(), (resetNeeded = false);
            return reduceValue;
          }
          function dispose() {
            var i = filterListeners.indexOf(update);
            if (i >= 0) filterListeners.splice(i, 1);
            i = dataListeners.indexOf(add2);
            if (i >= 0) dataListeners.splice(i, 1);
            return group;
          }
          return reduceCount();
        }
        function size() {
          return n;
        }
        function all() {
          return data;
        }
        function allFiltered(ignore_dimensions) {
          var array = [],
            i = 0,
            mask = maskForDimensions(ignore_dimensions || []);
          for (i = 0; i < n; i++) {
            if (filters.zeroExceptMask(i, mask)) {
              array.push(data[i]);
            }
          }
          return array;
        }
        function onChange(cb) {
          if (typeof cb !== 'function') {
            console.warn('onChange callback parameter must be a function!');
            return;
          }
          callbacks.push(cb);
          return function () {
            callbacks.splice(callbacks.indexOf(cb), 1);
          };
        }
        function triggerOnChange(eventName) {
          for (var i = 0; i < callbacks.length; i++) {
            callbacks[i](eventName);
          }
        }
        return arguments.length ? add(arguments[0]) : crossfilter3;
      }
      function cr_index(n, m) {
        return (m < 257 ? xfilterArray.array8 : m < 65537 ? xfilterArray.array16 : xfilterArray.array32)(n);
      }
      function cr_range(n) {
        var range = cr_index(n, n);
        for (var i = -1; ++i < n; ) range[i] = i;
        return range;
      }
      function capacity(w) {
        return w === 8 ? 256 : w === 16 ? 65536 : 4294967296;
      }
      var version = '1.5.4';
      crossfilter2.version = version;
      return crossfilter2;
    });
  },
});

// lambda/filterParse/index.ts
var filterParse_exports = {};
__export(filterParse_exports, {
  default: () => filterParse_default,
  handler: () => handler,
});
module.exports = __toCommonJS(filterParse_exports);
var import_aws_serverless_express = __toESM(require('aws-serverless-express'));

// lambda/filterParse/app.ts
var import_lib_dynamodb3 = __toESM(require_dist_cjs121());
var import_middleware = __toESM(require('aws-serverless-express/middleware'));
var import_body_parser = __toESM(require('body-parser'));
var import_express = __toESM(require('express'));

// node_modules/zod/lib/index.mjs
var util;
(function (util2) {
  function assertEqual(_cond) {}
  util2.assertEqual = assertEqual;
  function assertNever(_x) {
    throw new Error();
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== 'number');
    const filtered = {};
    for (const k of validKeys) {
      filtered[k] = obj[k];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function (e) {
      return obj[e];
    });
  };
  util2.objectKeys =
    typeof Object.keys === 'function'
      ? (obj) => Object.keys(obj)
      : (object) => {
          const keys = [];
          for (const key in object) {
            if (Object.prototype.hasOwnProperty.call(object, key)) {
              keys.push(key);
            }
          }
          return keys;
        };
  util2.find = (arr, checker) => {
    for (const item of arr) {
      if (checker(item)) return item;
    }
    return void 0;
  };
  util2.isInteger =
    typeof Number.isInteger === 'function'
      ? (val) => Number.isInteger(val)
      : (val) => typeof val === 'number' && isFinite(val) && Math.floor(val) === val;
  function joinValues(array, separator = ' | ') {
    return array.map((val) => (typeof val === 'string' ? `'${val}'` : val)).join(separator);
  }
  util2.joinValues = joinValues;
})(util || (util = {}));
var ZodParsedType = util.arrayToEnum([
  'string',
  'nan',
  'number',
  'integer',
  'float',
  'boolean',
  'date',
  'bigint',
  'symbol',
  'function',
  'undefined',
  'null',
  'array',
  'object',
  'unknown',
  'promise',
  'void',
  'never',
  'map',
  'set',
]);
var getParsedType = (data) => {
  const t = typeof data;
  switch (t) {
    case 'undefined':
      return ZodParsedType.undefined;
    case 'string':
      return ZodParsedType.string;
    case 'number':
      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case 'boolean':
      return ZodParsedType.boolean;
    case 'function':
      return ZodParsedType.function;
    case 'bigint':
      return ZodParsedType.bigint;
    case 'object':
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === 'function' && data.catch && typeof data.catch === 'function') {
        return ZodParsedType.promise;
      }
      if (typeof Map !== 'undefined' && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== 'undefined' && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== 'undefined' && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
};
var ZodIssueCode = util.arrayToEnum([
  'invalid_type',
  'invalid_literal',
  'custom',
  'invalid_union',
  'invalid_union_discriminator',
  'invalid_enum_value',
  'unrecognized_keys',
  'invalid_arguments',
  'invalid_return_type',
  'invalid_date',
  'invalid_string',
  'too_small',
  'too_big',
  'invalid_intersection_types',
  'not_multiple_of',
]);
var quotelessJson = (obj) => {
  const json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, '$1:');
};
var ZodError = class extends Error {
  constructor(issues) {
    super();
    this.issues = [];
    this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = 'ZodError';
    this.issues = issues;
  }
  get errors() {
    return this.issues;
  }
  format(_mapper) {
    const mapper =
      _mapper ||
      function (issue) {
        return issue.message;
      };
    const fieldErrors = { _errors: [] };
    const processError = (error) => {
      for (const issue of error.issues) {
        if (issue.code === 'invalid_union') {
          issue.unionErrors.map(processError);
        } else if (issue.code === 'invalid_return_type') {
          processError(issue.returnTypeError);
        } else if (issue.code === 'invalid_arguments') {
          processError(issue.argumentsError);
        } else if (issue.path.length === 0) {
          fieldErrors._errors.push(mapper(issue));
        } else {
          let curr = fieldErrors;
          let i = 0;
          while (i < issue.path.length) {
            const el = issue.path[i];
            const terminal = i === issue.path.length - 1;
            if (!terminal) {
              curr[el] = curr[el] || { _errors: [] };
            } else {
              curr[el] = curr[el] || { _errors: [] };
              curr[el]._errors.push(mapper(issue));
            }
            curr = curr[el];
            i++;
          }
        }
      }
    };
    processError(this);
    return fieldErrors;
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub of this.issues) {
      if (sub.path.length > 0) {
        fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
        fieldErrors[sub.path[0]].push(mapper(sub));
      } else {
        formErrors.push(mapper(sub));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
};
ZodError.create = (issues) => {
  const error = new ZodError(issues);
  return error;
};
var defaultErrorMap = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      if (issue.received === ZodParsedType.undefined) {
        message = 'Required';
      } else {
        message = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ', ')}`;
      break;
    case ZodIssueCode.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode.invalid_string:
      if (typeof issue.validation === 'object') {
        if ('startsWith' in issue.validation) {
          message = `Invalid input: must start with "${issue.validation.startsWith}"`;
        } else if ('endsWith' in issue.validation) {
          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
        } else {
          util.assertNever(issue.validation);
        }
      } else if (issue.validation !== 'regex') {
        message = `Invalid ${issue.validation}`;
      } else {
        message = 'Invalid';
      }
      break;
    case ZodIssueCode.too_small:
      if (issue.type === 'array')
        message = `Array must contain ${issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === 'string')
        message = `String must contain ${issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === 'number')
        message = `Number must be greater than ${issue.inclusive ? `or equal to ` : ``}${issue.minimum}`;
      else if (issue.type === 'date')
        message = `Date must be greater than ${issue.inclusive ? `or equal to ` : ``}${new Date(issue.minimum)}`;
      else message = 'Invalid input';
      break;
    case ZodIssueCode.too_big:
      if (issue.type === 'array')
        message = `Array must contain ${issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === 'string')
        message = `String must contain ${issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === 'number')
        message = `Number must be less than ${issue.inclusive ? `or equal to ` : ``}${issue.maximum}`;
      else if (issue.type === 'date')
        message = `Date must be smaller than ${issue.inclusive ? `or equal to ` : ``}${new Date(issue.maximum)}`;
      else message = 'Invalid input';
      break;
    case ZodIssueCode.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    default:
      message = _ctx.defaultError;
      util.assertNever(issue);
  }
  return { message };
};
var overrideErrorMap = defaultErrorMap;
function setErrorMap(map) {
  overrideErrorMap = map;
}
function getErrorMap() {
  return overrideErrorMap;
}
var makeIssue = (params) => {
  const { data, path, errorMaps, issueData } = params;
  const fullPath = [...path, ...(issueData.path || [])];
  const fullIssue = {
    ...issueData,
    path: fullPath,
  };
  let errorMessage = '';
  const maps = errorMaps
    .filter((m) => !!m)
    .slice()
    .reverse();
  for (const map of maps) {
    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: issueData.message || errorMessage,
  };
};
var EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), defaultErrorMap].filter((x) => !!x),
  });
  ctx.common.issues.push(issue);
}
var ParseStatus = class {
  constructor() {
    this.value = 'valid';
  }
  dirty() {
    if (this.value === 'valid') this.value = 'dirty';
  }
  abort() {
    if (this.value !== 'aborted') this.value = 'aborted';
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s of results) {
      if (s.status === 'aborted') return INVALID;
      if (s.status === 'dirty') status.dirty();
      arrayValue.push(s.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      syncPairs.push({
        key: await pair.key,
        value: await pair.value,
      });
    }
    return ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === 'aborted') return INVALID;
      if (value.status === 'aborted') return INVALID;
      if (key.status === 'dirty') status.dirty();
      if (value.status === 'dirty') status.dirty();
      if (typeof value.value !== 'undefined' || pair.alwaysSet) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
};
var INVALID = Object.freeze({
  status: 'aborted',
});
var DIRTY = (value) => ({ status: 'dirty', value });
var OK = (value) => ({ status: 'valid', value });
var isAborted = (x) => x.status === 'aborted';
var isDirty = (x) => x.status === 'dirty';
var isValid = (x) => x.status === 'valid';
var isAsync = (x) => typeof Promise !== void 0 && x instanceof Promise;
var jsonStringifyReplacer = (_, value) => {
  if (typeof value === 'bigint') {
    return value.toString();
  }
  return value;
};
var errorUtil;
(function (errorUtil2) {
  errorUtil2.errToObj = (message) => (typeof message === 'string' ? { message } : message || {});
  errorUtil2.toString = (message) =>
    typeof message === 'string' ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));
var ParseInputLazyPath = class {
  constructor(parent, value, path, key) {
    this.parent = parent;
    this.data = value;
    this._path = path;
    this._key = key;
  }
  get path() {
    return this._path.concat(this._key);
  }
};
var handleResult = (ctx, result) => {
  if (isValid(result)) {
    return { success: true, data: result.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error('Validation failed but no issues detected.');
    }
    const error = new ZodError(ctx.common.issues);
    return { success: false, error };
  }
};
function processCreateParams(params) {
  if (!params) return {};
  const { errorMap, invalid_type_error, required_error, description } = params;
  if (errorMap && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid" or "required" in conjunction with custom error map.`);
  }
  if (errorMap) return { errorMap, description };
  const customMap = (iss, ctx) => {
    if (iss.code !== 'invalid_type') return { message: ctx.defaultError };
    if (typeof ctx.data === 'undefined') {
      return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
    }
    return {
      message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError,
    };
  };
  return { errorMap: customMap, description };
}
var ZodType = class {
  constructor(def) {
    this.spa = this.safeParseAsync;
    this.superRefine = this._refinement;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.default = this.default.bind(this);
    this.describe = this.describe.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
  }
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return (
      ctx || {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent,
      }
    );
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus(),
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent,
      },
    };
  }
  _parseSync(input) {
    const result = this._parse(input);
    if (isAsync(result)) {
      throw new Error('Synchronous parse encountered promise.');
    }
    return result;
  }
  _parseAsync(input) {
    const result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    const result = this.safeParse(data, params);
    if (result.success) return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    var _a;
    const ctx = {
      common: {
        issues: [],
        async:
          (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data),
    };
    const result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result);
  }
  async parseAsync(data, params) {
    const result = await this.safeParseAsync(data, params);
    if (result.success) return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
        async: true,
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data),
    };
    const maybeAsyncResult = this._parse({ data, path: [], parent: ctx });
    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result);
  }
  refine(check, message) {
    const getIssueProperties = (val) => {
      if (typeof message === 'string' || typeof message === 'undefined') {
        return { message };
      } else if (typeof message === 'function') {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result = check(val);
      const setError = () =>
        ctx.addIssue({
          code: ZodIssueCode.custom,
          ...getIssueProperties(val),
        });
      if (typeof Promise !== 'undefined' && result instanceof Promise) {
        return result.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === 'function' ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: 'refinement', refinement },
    });
  }
  optional() {
    return ZodOptional.create(this);
  }
  nullable() {
    return ZodNullable.create(this);
  }
  nullish() {
    return this.optional().nullable();
  }
  array() {
    return ZodArray.create(this);
  }
  promise() {
    return ZodPromise.create(this);
  }
  or(option) {
    return ZodUnion.create([this, option]);
  }
  and(incoming) {
    return ZodIntersection.create(this, incoming);
  }
  transform(transform) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: 'transform', transform },
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === 'function' ? def : () => def;
    return new ZodDefault({
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault,
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description,
    });
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
};
var cuidRegex = /^c[^\s-]{8,}$/i;
var uuidRegex =
  /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
var emailRegex =
  /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
var ZodString = class extends ZodType {
  constructor() {
    super(...arguments);
    this._regex = (regex, validation, message) =>
      this.refinement((data) => regex.test(data), {
        validation,
        code: ZodIssueCode.invalid_string,
        ...errorUtil.errToObj(message),
      });
    this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));
    this.trim = () =>
      new ZodString({
        ...this._def,
        checks: [...this._def.checks, { kind: 'trim' }],
      });
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.string,
        received: ctx2.parsedType,
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === 'min') {
        if (input.data.length < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: 'string',
            inclusive: true,
            message: check.message,
          });
          status.dirty();
        }
      } else if (check.kind === 'max') {
        if (input.data.length > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: 'string',
            inclusive: true,
            message: check.message,
          });
          status.dirty();
        }
      } else if (check.kind === 'email') {
        if (!emailRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: 'email',
            code: ZodIssueCode.invalid_string,
            message: check.message,
          });
          status.dirty();
        }
      } else if (check.kind === 'uuid') {
        if (!uuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: 'uuid',
            code: ZodIssueCode.invalid_string,
            message: check.message,
          });
          status.dirty();
        }
      } else if (check.kind === 'cuid') {
        if (!cuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: 'cuid',
            code: ZodIssueCode.invalid_string,
            message: check.message,
          });
          status.dirty();
        }
      } else if (check.kind === 'url') {
        try {
          new URL(input.data);
        } catch (_a) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: 'url',
            code: ZodIssueCode.invalid_string,
            message: check.message,
          });
          status.dirty();
        }
      } else if (check.kind === 'regex') {
        check.regex.lastIndex = 0;
        const testResult = check.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: 'regex',
            code: ZodIssueCode.invalid_string,
            message: check.message,
          });
          status.dirty();
        }
      } else if (check.kind === 'trim') {
        input.data = input.data.trim();
      } else if (check.kind === 'startsWith') {
        if (!input.data.startsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { startsWith: check.value },
            message: check.message,
          });
          status.dirty();
        }
      } else if (check.kind === 'endsWith') {
        if (!input.data.endsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { endsWith: check.value },
            message: check.message,
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _addCheck(check) {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, check],
    });
  }
  email(message) {
    return this._addCheck({ kind: 'email', ...errorUtil.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: 'url', ...errorUtil.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: 'uuid', ...errorUtil.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: 'cuid', ...errorUtil.errToObj(message) });
  }
  regex(regex, message) {
    return this._addCheck({
      kind: 'regex',
      regex,
      ...errorUtil.errToObj(message),
    });
  }
  startsWith(value, message) {
    return this._addCheck({
      kind: 'startsWith',
      value,
      ...errorUtil.errToObj(message),
    });
  }
  endsWith(value, message) {
    return this._addCheck({
      kind: 'endsWith',
      value,
      ...errorUtil.errToObj(message),
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: 'min',
      value: minLength,
      ...errorUtil.errToObj(message),
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: 'max',
      value: maxLength,
      ...errorUtil.errToObj(message),
    });
  }
  length(len, message) {
    return this.min(len, message).max(len, message);
  }
  get isEmail() {
    return !!this._def.checks.find((ch) => ch.kind === 'email');
  }
  get isURL() {
    return !!this._def.checks.find((ch) => ch.kind === 'url');
  }
  get isUUID() {
    return !!this._def.checks.find((ch) => ch.kind === 'uuid');
  }
  get isCUID() {
    return !!this._def.checks.find((ch) => ch.kind === 'cuid');
  }
  get minLength() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === 'min') {
        if (min === null || ch.value > min) min = ch.value;
      }
    }
    return min;
  }
  get maxLength() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === 'max') {
        if (max === null || ch.value < max) max = ch.value;
      }
    }
    return max;
  }
};
ZodString.create = (params) => {
  return new ZodString({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodString,
    ...processCreateParams(params),
  });
};
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split('.')[1] || '').length;
  const stepDecCount = (step.toString().split('.')[1] || '').length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = parseInt(val.toFixed(decCount).replace('.', ''));
  const stepInt = parseInt(step.toFixed(decCount).replace('.', ''));
  return (valInt % stepInt) / Math.pow(10, decCount);
}
var ZodNumber = class extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType,
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === 'int') {
        if (!util.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: 'integer',
            received: 'float',
            message: check.message,
          });
          status.dirty();
        }
      } else if (check.kind === 'min') {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: 'number',
            inclusive: check.inclusive,
            message: check.message,
          });
          status.dirty();
        }
      } else if (check.kind === 'max') {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: 'number',
            inclusive: check.inclusive,
            message: check.message,
          });
          status.dirty();
        }
      } else if (check.kind === 'multipleOf') {
        if (floatSafeRemainder(input.data, check.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message,
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit('min', value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit('min', value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit('max', value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit('max', value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message),
        },
      ],
    });
  }
  _addCheck(check) {
    return new ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check],
    });
  }
  int(message) {
    return this._addCheck({
      kind: 'int',
      message: errorUtil.toString(message),
    });
  }
  positive(message) {
    return this._addCheck({
      kind: 'min',
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message),
    });
  }
  negative(message) {
    return this._addCheck({
      kind: 'max',
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message),
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: 'max',
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message),
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: 'min',
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message),
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: 'multipleOf',
      value,
      message: errorUtil.toString(message),
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === 'min') {
        if (min === null || ch.value > min) min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === 'max') {
        if (max === null || ch.value < max) max = ch.value;
      }
    }
    return max;
  }
  get isInt() {
    return !!this._def.checks.find((ch) => ch.kind === 'int');
  }
};
ZodNumber.create = (params) => {
  return new ZodNumber({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodNumber,
    ...processCreateParams(params),
  });
};
var ZodBigInt = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.bigint) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.bigint,
        received: ctx.parsedType,
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodBigInt.create = (params) => {
  return new ZodBigInt({
    typeName: ZodFirstPartyTypeKind.ZodBigInt,
    ...processCreateParams(params),
  });
};
var ZodBoolean = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType,
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodBoolean.create = (params) => {
  return new ZodBoolean({
    typeName: ZodFirstPartyTypeKind.ZodBoolean,
    ...processCreateParams(params),
  });
};
var ZodDate = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.date) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx2.parsedType,
      });
      return INVALID;
    }
    if (isNaN(input.data.getTime())) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_date,
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === 'min') {
        if (input.data.getTime() < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            message: check.message,
            inclusive: true,
            minimum: check.value,
            type: 'date',
          });
          status.dirty();
        }
      } else if (check.kind === 'max') {
        if (input.data.getTime() > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            message: check.message,
            inclusive: true,
            maximum: check.value,
            type: 'date',
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return {
      status: status.value,
      value: new Date(input.data.getTime()),
    };
  }
  _addCheck(check) {
    return new ZodDate({
      ...this._def,
      checks: [...this._def.checks, check],
    });
  }
  min(minDate, message) {
    return this._addCheck({
      kind: 'min',
      value: minDate.getTime(),
      message: errorUtil.toString(message),
    });
  }
  max(maxDate, message) {
    return this._addCheck({
      kind: 'max',
      value: maxDate.getTime(),
      message: errorUtil.toString(message),
    });
  }
  get minDate() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === 'min') {
        if (min === null || ch.value > min) min = ch.value;
      }
    }
    return min != null ? new Date(min) : null;
  }
  get maxDate() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === 'max') {
        if (max === null || ch.value < max) max = ch.value;
      }
    }
    return max != null ? new Date(max) : null;
  }
};
ZodDate.create = (params) => {
  return new ZodDate({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodDate,
    ...processCreateParams(params),
  });
};
var ZodUndefined = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType,
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodUndefined.create = (params) => {
  return new ZodUndefined({
    typeName: ZodFirstPartyTypeKind.ZodUndefined,
    ...processCreateParams(params),
  });
};
var ZodNull = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType,
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodNull.create = (params) => {
  return new ZodNull({
    typeName: ZodFirstPartyTypeKind.ZodNull,
    ...processCreateParams(params),
  });
};
var ZodAny = class extends ZodType {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodAny.create = (params) => {
  return new ZodAny({
    typeName: ZodFirstPartyTypeKind.ZodAny,
    ...processCreateParams(params),
  });
};
var ZodUnknown = class extends ZodType {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodUnknown.create = (params) => {
  return new ZodUnknown({
    typeName: ZodFirstPartyTypeKind.ZodUnknown,
    ...processCreateParams(params),
  });
};
var ZodNever = class extends ZodType {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType,
    });
    return INVALID;
  }
};
ZodNever.create = (params) => {
  return new ZodNever({
    typeName: ZodFirstPartyTypeKind.ZodNever,
    ...processCreateParams(params),
  });
};
var ZodVoid = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType,
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodVoid.create = (params) => {
  return new ZodVoid({
    typeName: ZodFirstPartyTypeKind.ZodVoid,
    ...processCreateParams(params),
  });
};
var ZodArray = class extends ZodType {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def = this._def;
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType,
      });
      return INVALID;
    }
    if (def.minLength !== null) {
      if (ctx.data.length < def.minLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minLength.value,
          type: 'array',
          inclusive: true,
          message: def.minLength.message,
        });
        status.dirty();
      }
    }
    if (def.maxLength !== null) {
      if (ctx.data.length > def.maxLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxLength.value,
          type: 'array',
          inclusive: true,
          message: def.maxLength.message,
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all(
        ctx.data.map((item, i) => {
          return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        })
      ).then((result2) => {
        return ParseStatus.mergeArray(status, result2);
      });
    }
    const result = ctx.data.map((item, i) => {
      return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
    });
    return ParseStatus.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message) },
    });
  }
  max(maxLength, message) {
    return new ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message) },
    });
  }
  length(len, message) {
    return this.min(len, message).max(len, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodArray.create = (schema, params) => {
  return new ZodArray({
    type: schema,
    minLength: null,
    maxLength: null,
    typeName: ZodFirstPartyTypeKind.ZodArray,
    ...processCreateParams(params),
  });
};
var objectUtil;
(function (objectUtil2) {
  objectUtil2.mergeShapes = (first, second) => {
    return {
      ...first,
      ...second,
    };
  };
})(objectUtil || (objectUtil = {}));
var AugmentFactory = (def) => (augmentation) => {
  return new ZodObject({
    ...def,
    shape: () => ({
      ...def.shape(),
      ...augmentation,
    }),
  });
};
function deepPartialify(schema) {
  if (schema instanceof ZodObject) {
    const newShape = {};
    for (const key in schema.shape) {
      const fieldSchema = schema.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema._def,
      shape: () => newShape,
    });
  } else if (schema instanceof ZodArray) {
    return ZodArray.create(deepPartialify(schema.element));
  } else if (schema instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodTuple) {
    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
  } else {
    return schema;
  }
}
var ZodObject = class extends ZodType {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = AugmentFactory(this._def);
    this.extend = AugmentFactory(this._def);
  }
  _getCached() {
    if (this._cached !== null) return this._cached;
    const shape = this._def.shape();
    const keys = util.objectKeys(shape);
    return (this._cached = { shape, keys });
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType,
      });
      return INVALID;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const extraKeys = [];
    for (const key in ctx.data) {
      if (!shapeKeys.includes(key)) {
        extraKeys.push(key);
      }
    }
    const pairs = [];
    for (const key of shapeKeys) {
      const keyValidator = shape[key];
      const value = ctx.data[key];
      pairs.push({
        key: { status: 'valid', value: key },
        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data,
      });
    }
    if (this._def.catchall instanceof ZodNever) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === 'passthrough') {
        for (const key of extraKeys) {
          pairs.push({
            key: { status: 'valid', value: key },
            value: { status: 'valid', value: ctx.data[key] },
          });
        }
      } else if (unknownKeys === 'strict') {
        if (extraKeys.length > 0) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.unrecognized_keys,
            keys: extraKeys,
          });
          status.dirty();
        }
      } else if (unknownKeys === 'strip');
      else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key of extraKeys) {
        const value = ctx.data[key];
        pairs.push({
          key: { status: 'valid', value: key },
          value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
          alwaysSet: key in ctx.data,
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve()
        .then(async () => {
          const syncPairs = [];
          for (const pair of pairs) {
            const key = await pair.key;
            syncPairs.push({
              key,
              value: await pair.value,
              alwaysSet: pair.alwaysSet,
            });
          }
          return syncPairs;
        })
        .then((syncPairs) => {
          return ParseStatus.mergeObjectSync(status, syncPairs);
        });
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    errorUtil.errToObj;
    return new ZodObject({
      ...this._def,
      unknownKeys: 'strict',
      ...(message !== void 0
        ? {
            errorMap: (issue, ctx) => {
              var _a, _b, _c, _d;
              const defaultError =
                (_c =
                  (_b = (_a = this._def).errorMap) === null || _b === void 0
                    ? void 0
                    : _b.call(_a, issue, ctx).message) !== null && _c !== void 0
                  ? _c
                  : ctx.defaultError;
              if (issue.code === 'unrecognized_keys')
                return {
                  message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,
                };
              return {
                message: defaultError,
              };
            },
          }
        : {}),
    });
  }
  strip() {
    return new ZodObject({
      ...this._def,
      unknownKeys: 'strip',
    });
  }
  passthrough() {
    return new ZodObject({
      ...this._def,
      unknownKeys: 'passthrough',
    });
  }
  setKey(key, schema) {
    return this.augment({ [key]: schema });
  }
  merge(merging) {
    const merged = new ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      typeName: ZodFirstPartyTypeKind.ZodObject,
    });
    return merged;
  }
  catchall(index) {
    return new ZodObject({
      ...this._def,
      catchall: index,
    });
  }
  pick(mask) {
    const shape = {};
    util.objectKeys(mask).map((key) => {
      if (this.shape[key]) shape[key] = this.shape[key];
    });
    return new ZodObject({
      ...this._def,
      shape: () => shape,
    });
  }
  omit(mask) {
    const shape = {};
    util.objectKeys(this.shape).map((key) => {
      if (util.objectKeys(mask).indexOf(key) === -1) {
        shape[key] = this.shape[key];
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => shape,
    });
  }
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    const newShape = {};
    if (mask) {
      util.objectKeys(this.shape).map((key) => {
        if (util.objectKeys(mask).indexOf(key) === -1) {
          newShape[key] = this.shape[key];
        } else {
          newShape[key] = this.shape[key].optional();
        }
      });
      return new ZodObject({
        ...this._def,
        shape: () => newShape,
      });
    } else {
      for (const key in this.shape) {
        const fieldSchema = this.shape[key];
        newShape[key] = fieldSchema.optional();
      }
    }
    return new ZodObject({
      ...this._def,
      shape: () => newShape,
    });
  }
  required() {
    const newShape = {};
    for (const key in this.shape) {
      const fieldSchema = this.shape[key];
      let newField = fieldSchema;
      while (newField instanceof ZodOptional) {
        newField = newField._def.innerType;
      }
      newShape[key] = newField;
    }
    return new ZodObject({
      ...this._def,
      shape: () => newShape,
    });
  }
  keyof() {
    return createZodEnum(util.objectKeys(this.shape));
  }
};
ZodObject.create = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: 'strip',
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params),
  });
};
ZodObject.strictCreate = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: 'strict',
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params),
  });
};
ZodObject.lazycreate = (shape, params) => {
  return new ZodObject({
    shape,
    unknownKeys: 'strip',
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params),
  });
};
var ZodUnion = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results) {
      for (const result of results) {
        if (result.result.status === 'valid') {
          return result.result;
        }
      }
      for (const result of results) {
        if (result.result.status === 'dirty') {
          ctx.common.issues.push(...result.ctx.common.issues);
          return result.result;
        }
      }
      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors,
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return Promise.all(
        options.map(async (option) => {
          const childCtx = {
            ...ctx,
            common: {
              ...ctx.common,
              issues: [],
            },
            parent: null,
          };
          return {
            result: await option._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx,
            }),
            ctx: childCtx,
          };
        })
      ).then(handleResults);
    } else {
      let dirty = void 0;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: [],
          },
          parent: null,
        };
        const result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx,
        });
        if (result.status === 'valid') {
          return result;
        } else if (result.status === 'dirty' && !dirty) {
          dirty = { result, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError(issues2));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors,
      });
      return INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
};
ZodUnion.create = (types, params) => {
  return new ZodUnion({
    options: types,
    typeName: ZodFirstPartyTypeKind.ZodUnion,
    ...processCreateParams(params),
  });
};
var ZodDiscriminatedUnion = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType,
      });
      return INVALID;
    }
    const discriminator = this.discriminator;
    const discriminatorValue = ctx.data[discriminator];
    const option = this.options.get(discriminatorValue);
    if (!option) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union_discriminator,
        options: this.validDiscriminatorValues,
        path: [discriminator],
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return option._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx,
      });
    } else {
      return option._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx,
      });
    }
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get validDiscriminatorValues() {
    return Array.from(this.options.keys());
  }
  get options() {
    return this._def.options;
  }
  static create(discriminator, types, params) {
    const options = /* @__PURE__ */ new Map();
    try {
      types.forEach((type) => {
        const discriminatorValue = type.shape[discriminator].value;
        options.set(discriminatorValue, type);
      });
    } catch (e) {
      throw new Error('The discriminator value could not be extracted from all the provided schemas');
    }
    if (options.size !== types.length) {
      throw new Error('Some of the discriminator values are not unique');
    }
    return new ZodDiscriminatedUnion({
      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
      discriminator,
      options,
      ...processCreateParams(params),
    });
  }
};
function mergeValues(a, b) {
  const aType = getParsedType(a);
  const bType = getParsedType(b);
  if (a === b) {
    return { valid: true, data: a };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b);
    const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a, ...b };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a[key], b[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a.length !== b.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0; index < a.length; index++) {
      const itemA = a[index];
      const itemB = b[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
    return { valid: true, data: a };
  } else {
    return { valid: false };
  }
}
var ZodIntersection = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight)) {
        return INVALID;
      }
      const merged = mergeValues(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_intersection_types,
        });
        return INVALID;
      }
      if (isDirty(parsedLeft) || isDirty(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx,
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx,
        }),
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(
        this._def.left._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx,
        }),
        this._def.right._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx,
        })
      );
    }
  }
};
ZodIntersection.create = (left, right, params) => {
  return new ZodIntersection({
    left,
    right,
    typeName: ZodFirstPartyTypeKind.ZodIntersection,
    ...processCreateParams(params),
  });
};
var ZodTuple = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType,
      });
      return INVALID;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        type: 'array',
      });
      return INVALID;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        type: 'array',
      });
      status.dirty();
    }
    const items = ctx.data
      .map((item, itemIndex) => {
        const schema = this._def.items[itemIndex] || this._def.rest;
        if (!schema) return null;
        return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
      })
      .filter((x) => !!x);
    if (ctx.common.async) {
      return Promise.all(items).then((results) => {
        return ParseStatus.mergeArray(status, results);
      });
    } else {
      return ParseStatus.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new ZodTuple({
      ...this._def,
      rest,
    });
  }
};
ZodTuple.create = (schemas, params) => {
  return new ZodTuple({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params),
  });
};
var ZodRecord = class extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType,
      });
      return INVALID;
    }
    const pairs = [];
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    for (const key in ctx.data) {
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
      });
    }
    if (ctx.common.async) {
      return ParseStatus.mergeObjectAsync(status, pairs);
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get element() {
    return this._def.valueType;
  }
  static create(first, second, third) {
    if (second instanceof ZodType) {
      return new ZodRecord({
        keyType: first,
        valueType: second,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(third),
      });
    }
    return new ZodRecord({
      keyType: ZodString.create(),
      valueType: first,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(second),
    });
  }
};
var ZodMap = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType,
      });
      return INVALID;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key, value], index) => {
      return {
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, 'key'])),
        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, 'value'])),
      };
    });
    if (ctx.common.async) {
      const finalMap = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          if (key.status === 'aborted' || value.status === 'aborted') {
            return INVALID;
          }
          if (key.status === 'dirty' || value.status === 'dirty') {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = /* @__PURE__ */ new Map();
      for (const pair of pairs) {
        const key = pair.key;
        const value = pair.value;
        if (key.status === 'aborted' || value.status === 'aborted') {
          return INVALID;
        }
        if (key.status === 'dirty' || value.status === 'dirty') {
          status.dirty();
        }
        finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
};
ZodMap.create = (keyType, valueType, params) => {
  return new ZodMap({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind.ZodMap,
    ...processCreateParams(params),
  });
};
var ZodSet = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType,
      });
      return INVALID;
    }
    const def = this._def;
    if (def.minSize !== null) {
      if (ctx.data.size < def.minSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minSize.value,
          type: 'set',
          inclusive: true,
          message: def.minSize.message,
        });
        status.dirty();
      }
    }
    if (def.maxSize !== null) {
      if (ctx.data.size > def.maxSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxSize.value,
          type: 'set',
          inclusive: true,
          message: def.maxSize.message,
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = /* @__PURE__ */ new Set();
      for (const element of elements2) {
        if (element.status === 'aborted') return INVALID;
        if (element.status === 'dirty') status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i) =>
      valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i))
    );
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message) {
    return new ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message) },
    });
  }
  max(maxSize, message) {
    return new ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message) },
    });
  }
  size(size, message) {
    return this.min(size, message).max(size, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodSet.create = (valueType, params) => {
  return new ZodSet({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind.ZodSet,
    ...processCreateParams(params),
  });
};
var ZodFunction = class extends ZodType {
  constructor() {
    super(...arguments);
    this.validate = this.implement;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.function) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType,
      });
      return INVALID;
    }
    function makeArgsIssue(args, error) {
      return makeIssue({
        data: args,
        path: ctx.path,
        errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), defaultErrorMap].filter(
          (x) => !!x
        ),
        issueData: {
          code: ZodIssueCode.invalid_arguments,
          argumentsError: error,
        },
      });
    }
    function makeReturnsIssue(returns, error) {
      return makeIssue({
        data: returns,
        path: ctx.path,
        errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), defaultErrorMap].filter(
          (x) => !!x
        ),
        issueData: {
          code: ZodIssueCode.invalid_return_type,
          returnTypeError: error,
        },
      });
    }
    const params = { errorMap: ctx.common.contextualErrorMap };
    const fn = ctx.data;
    if (this._def.returns instanceof ZodPromise) {
      return OK(async (...args) => {
        const error = new ZodError([]);
        const parsedArgs = await this._def.args.parseAsync(args, params).catch((e) => {
          error.addIssue(makeArgsIssue(args, e));
          throw error;
        });
        const result = await fn(...parsedArgs);
        const parsedReturns = await this._def.returns._def.type.parseAsync(result, params).catch((e) => {
          error.addIssue(makeReturnsIssue(result, e));
          throw error;
        });
        return parsedReturns;
      });
    } else {
      return OK((...args) => {
        const parsedArgs = this._def.args.safeParse(args, params);
        if (!parsedArgs.success) {
          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
        }
        const result = fn(...parsedArgs.data);
        const parsedReturns = this._def.returns.safeParse(result, params);
        if (!parsedReturns.success) {
          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
        }
        return parsedReturns.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new ZodFunction({
      ...this._def,
      args: ZodTuple.create(items).rest(ZodUnknown.create()),
    });
  }
  returns(returnType) {
    return new ZodFunction({
      ...this._def,
      returns: returnType,
    });
  }
  implement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  strictImplement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
};
ZodFunction.create = (args, returns, params) => {
  return new ZodFunction({
    args: args ? args.rest(ZodUnknown.create()) : ZodTuple.create([]).rest(ZodUnknown.create()),
    returns: returns || ZodUnknown.create(),
    typeName: ZodFirstPartyTypeKind.ZodFunction,
    ...processCreateParams(params),
  });
};
var ZodLazy = class extends ZodType {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
};
ZodLazy.create = (getter, params) => {
  return new ZodLazy({
    getter,
    typeName: ZodFirstPartyTypeKind.ZodLazy,
    ...processCreateParams(params),
  });
};
var ZodLiteral = class extends ZodType {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_literal,
        expected: this._def.value,
      });
      return INVALID;
    }
    return { status: 'valid', value: input.data };
  }
  get value() {
    return this._def.value;
  }
};
ZodLiteral.create = (value, params) => {
  return new ZodLiteral({
    value,
    typeName: ZodFirstPartyTypeKind.ZodLiteral,
    ...processCreateParams(params),
  });
};
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params),
  });
}
var ZodEnum = class extends ZodType {
  _parse(input) {
    if (typeof input.data !== 'string') {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type,
      });
      return INVALID;
    }
    if (this._def.values.indexOf(input.data) === -1) {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues,
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
};
ZodEnum.create = createZodEnum;
var ZodNativeEnum = class extends ZodType {
  _parse(input) {
    const nativeEnumValues = util.getValidEnumValues(this._def.values);
    const ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type,
      });
      return INVALID;
    }
    if (nativeEnumValues.indexOf(input.data) === -1) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues,
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
};
ZodNativeEnum.create = (values, params) => {
  return new ZodNativeEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
    ...processCreateParams(params),
  });
};
var ZodPromise = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType,
      });
      return INVALID;
    }
    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(
      promisified.then((data) => {
        return this._def.type.parseAsync(data, {
          path: ctx.path,
          errorMap: ctx.common.contextualErrorMap,
        });
      })
    );
  }
};
ZodPromise.create = (schema, params) => {
  return new ZodPromise({
    type: schema,
    typeName: ZodFirstPartyTypeKind.ZodPromise,
    ...processCreateParams(params),
  });
};
var ZodEffects = class extends ZodType {
  innerType() {
    return this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    if (effect.type === 'preprocess') {
      const processed = effect.transform(ctx.data);
      if (ctx.common.async) {
        return Promise.resolve(processed).then((processed2) => {
          return this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx,
          });
        });
      } else {
        return this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx,
        });
      }
    }
    const checkCtx = {
      addIssue: (arg) => {
        addIssueToContext(ctx, arg);
        if (arg.fatal) {
          status.abort();
        } else {
          status.dirty();
        }
      },
      get path() {
        return ctx.path;
      },
    };
    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
    if (effect.type === 'refinement') {
      const executeRefinement = (acc) => {
        const result = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result);
        }
        if (result instanceof Promise) {
          throw new Error('Async refinement encountered during synchronous parse operation. Use .parseAsync instead.');
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx,
        });
        if (inner.status === 'aborted') return INVALID;
        if (inner.status === 'dirty') status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === 'aborted') return INVALID;
          if (inner.status === 'dirty') status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === 'transform') {
      if (ctx.common.async === false) {
        const base = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx,
        });
        if (!isValid(base)) return base;
        const result = effect.transform(base.value, checkCtx);
        if (result instanceof Promise) {
          throw new Error(
            `Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`
          );
        }
        return { status: status.value, value: result };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
          if (!isValid(base)) return base;
          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({
            status: status.value,
            value: result,
          }));
        });
      }
    }
    util.assertNever(effect);
  }
};
ZodEffects.create = (schema, effect, params) => {
  return new ZodEffects({
    schema,
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    effect,
    ...processCreateParams(params),
  });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
  return new ZodEffects({
    schema,
    effect: { type: 'preprocess', transform: preprocess },
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    ...processCreateParams(params),
  });
};
var ZodOptional = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.undefined) {
      return OK(void 0);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodOptional.create = (type, params) => {
  return new ZodOptional({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params),
  });
};
var ZodNullable = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.null) {
      return OK(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodNullable.create = (type, params) => {
  return new ZodNullable({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodNullable,
    ...processCreateParams(params),
  });
};
var ZodDefault = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx,
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
};
ZodDefault.create = (type, params) => {
  return new ZodOptional({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params),
  });
};
var ZodNaN = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType,
      });
      return INVALID;
    }
    return { status: 'valid', value: input.data };
  }
};
ZodNaN.create = (params) => {
  return new ZodNaN({
    typeName: ZodFirstPartyTypeKind.ZodNaN,
    ...processCreateParams(params),
  });
};
var custom = (check, params = {}, fatal) => {
  if (check)
    return ZodAny.create().superRefine((data, ctx) => {
      if (!check(data)) {
        const p = typeof params === 'function' ? params(data) : params;
        const p2 = typeof p === 'string' ? { message: p } : p;
        ctx.addIssue({ code: 'custom', ...p2, fatal });
      }
    });
  return ZodAny.create();
};
var late = {
  object: ZodObject.lazycreate,
};
var ZodFirstPartyTypeKind;
(function (ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2['ZodString'] = 'ZodString';
  ZodFirstPartyTypeKind2['ZodNumber'] = 'ZodNumber';
  ZodFirstPartyTypeKind2['ZodNaN'] = 'ZodNaN';
  ZodFirstPartyTypeKind2['ZodBigInt'] = 'ZodBigInt';
  ZodFirstPartyTypeKind2['ZodBoolean'] = 'ZodBoolean';
  ZodFirstPartyTypeKind2['ZodDate'] = 'ZodDate';
  ZodFirstPartyTypeKind2['ZodUndefined'] = 'ZodUndefined';
  ZodFirstPartyTypeKind2['ZodNull'] = 'ZodNull';
  ZodFirstPartyTypeKind2['ZodAny'] = 'ZodAny';
  ZodFirstPartyTypeKind2['ZodUnknown'] = 'ZodUnknown';
  ZodFirstPartyTypeKind2['ZodNever'] = 'ZodNever';
  ZodFirstPartyTypeKind2['ZodVoid'] = 'ZodVoid';
  ZodFirstPartyTypeKind2['ZodArray'] = 'ZodArray';
  ZodFirstPartyTypeKind2['ZodObject'] = 'ZodObject';
  ZodFirstPartyTypeKind2['ZodUnion'] = 'ZodUnion';
  ZodFirstPartyTypeKind2['ZodDiscriminatedUnion'] = 'ZodDiscriminatedUnion';
  ZodFirstPartyTypeKind2['ZodIntersection'] = 'ZodIntersection';
  ZodFirstPartyTypeKind2['ZodTuple'] = 'ZodTuple';
  ZodFirstPartyTypeKind2['ZodRecord'] = 'ZodRecord';
  ZodFirstPartyTypeKind2['ZodMap'] = 'ZodMap';
  ZodFirstPartyTypeKind2['ZodSet'] = 'ZodSet';
  ZodFirstPartyTypeKind2['ZodFunction'] = 'ZodFunction';
  ZodFirstPartyTypeKind2['ZodLazy'] = 'ZodLazy';
  ZodFirstPartyTypeKind2['ZodLiteral'] = 'ZodLiteral';
  ZodFirstPartyTypeKind2['ZodEnum'] = 'ZodEnum';
  ZodFirstPartyTypeKind2['ZodEffects'] = 'ZodEffects';
  ZodFirstPartyTypeKind2['ZodNativeEnum'] = 'ZodNativeEnum';
  ZodFirstPartyTypeKind2['ZodOptional'] = 'ZodOptional';
  ZodFirstPartyTypeKind2['ZodNullable'] = 'ZodNullable';
  ZodFirstPartyTypeKind2['ZodDefault'] = 'ZodDefault';
  ZodFirstPartyTypeKind2['ZodPromise'] = 'ZodPromise';
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
var instanceOfType = (
  cls,
  params = {
    message: `Input not instance of ${cls.name}`,
  }
) => custom((data) => data instanceof cls, params, true);
var stringType = ZodString.create;
var numberType = ZodNumber.create;
var nanType = ZodNaN.create;
var bigIntType = ZodBigInt.create;
var booleanType = ZodBoolean.create;
var dateType = ZodDate.create;
var undefinedType = ZodUndefined.create;
var nullType = ZodNull.create;
var anyType = ZodAny.create;
var unknownType = ZodUnknown.create;
var neverType = ZodNever.create;
var voidType = ZodVoid.create;
var arrayType = ZodArray.create;
var objectType = ZodObject.create;
var strictObjectType = ZodObject.strictCreate;
var unionType = ZodUnion.create;
var discriminatedUnionType = ZodDiscriminatedUnion.create;
var intersectionType = ZodIntersection.create;
var tupleType = ZodTuple.create;
var recordType = ZodRecord.create;
var mapType = ZodMap.create;
var setType = ZodSet.create;
var functionType = ZodFunction.create;
var lazyType = ZodLazy.create;
var literalType = ZodLiteral.create;
var enumType = ZodEnum.create;
var nativeEnumType = ZodNativeEnum.create;
var promiseType = ZodPromise.create;
var effectsType = ZodEffects.create;
var optionalType = ZodOptional.create;
var nullableType = ZodNullable.create;
var preprocessType = ZodEffects.createWithPreprocess;
var ostring = () => stringType().optional();
var onumber = () => numberType().optional();
var oboolean = () => booleanType().optional();
var mod = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  getParsedType,
  ZodParsedType,
  makeIssue,
  EMPTY_PATH,
  addIssueToContext,
  ParseStatus,
  INVALID,
  DIRTY,
  OK,
  isAborted,
  isDirty,
  isValid,
  isAsync,
  jsonStringifyReplacer,
  ZodType,
  ZodString,
  ZodNumber,
  ZodBigInt,
  ZodBoolean,
  ZodDate,
  ZodUndefined,
  ZodNull,
  ZodAny,
  ZodUnknown,
  ZodNever,
  ZodVoid,
  ZodArray,
  get objectUtil() {
    return objectUtil;
  },
  ZodObject,
  ZodUnion,
  ZodDiscriminatedUnion,
  ZodIntersection,
  ZodTuple,
  ZodRecord,
  ZodMap,
  ZodSet,
  ZodFunction,
  ZodLazy,
  ZodLiteral,
  ZodEnum,
  ZodNativeEnum,
  ZodPromise,
  ZodEffects,
  ZodTransformer: ZodEffects,
  ZodOptional,
  ZodNullable,
  ZodDefault,
  ZodNaN,
  custom,
  Schema: ZodType,
  ZodSchema: ZodType,
  late,
  get ZodFirstPartyTypeKind() {
    return ZodFirstPartyTypeKind;
  },
  any: anyType,
  array: arrayType,
  bigint: bigIntType,
  boolean: booleanType,
  date: dateType,
  discriminatedUnion: discriminatedUnionType,
  effect: effectsType,
  enum: enumType,
  function: functionType,
  instanceof: instanceOfType,
  intersection: intersectionType,
  lazy: lazyType,
  literal: literalType,
  map: mapType,
  nan: nanType,
  nativeEnum: nativeEnumType,
  never: neverType,
  null: nullType,
  nullable: nullableType,
  number: numberType,
  object: objectType,
  oboolean,
  onumber,
  optional: optionalType,
  ostring,
  preprocess: preprocessType,
  promise: promiseType,
  record: recordType,
  set: setType,
  strictObject: strictObjectType,
  string: stringType,
  transformer: effectsType,
  tuple: tupleType,
  undefined: undefinedType,
  union: unionType,
  unknown: unknownType,
  void: voidType,
  ZodIssueCode,
  quotelessJson,
  ZodError,
  defaultErrorMap,
  setErrorMap,
  getErrorMap,
});

// lambda/shared/dynamo.ts
var import_client_dynamodb = __toESM(require_dist_cjs119());
var import_lib_dynamodb = __toESM(require_dist_cjs121());

// src/aws-exports.js
var awsmobile = {
  aws_project_region: 'eu-west-1',
  aws_cloud_logic_custom: [
    {
      name: 'filterParseApi',
      endpoint: 'https://m51wpqp30h.execute-api.eu-west-1.amazonaws.com/develop',
      region: 'eu-west-1',
    },
  ],
  aws_appsync_graphqlEndpoint: 'https://lcdsxuudovbofpfaxsi7vihc3q.appsync-api.eu-west-1.amazonaws.com/graphql',
  aws_appsync_region: 'eu-west-1',
  aws_appsync_authenticationType: 'AMAZON_COGNITO_USER_POOLS',
  aws_appsync_apiKey: 'da2-vyepxblpnzaevf6kvnypdmv74a',
  aws_cognito_identity_pool_id: 'eu-west-1:9bbbcc97-2d17-4089-9f99-7518bd178c68',
  aws_cognito_region: 'eu-west-1',
  aws_user_pools_id: 'eu-west-1_bkCfPDviC',
  aws_user_pools_web_client_id: '2qs2u0fg4cpbb2a1khs96rb75t',
  oauth: {
    domain: 'tesseract74mo7u6u13ostdr72dhmoc6dv6-develop.auth.eu-west-1.amazoncognito.com',
    scope: ['phone', 'email', 'openid', 'profile', 'aws.cognito.signin.user.admin'],
    redirectSignIn:
      'http://localhost:3000/login/,https://develop.d1m9105kyx4cvx.amplifyapp.com/login/,https://portal.dev.actual-experience.com/login/,https://www.portal.dev.actual-experience.com/login/',
    redirectSignOut:
      'http://localhost:3000/logout/,https://develop.d1m9105kyx4cvx.amplifyapp.com/logout/,https://portal.dev.actual-experience.com/logout/,https://portal.dev.actual-experience.com/logout/',
    responseType: 'code',
  },
  federationTarget: 'COGNITO_USER_POOLS',
  aws_cognito_username_attributes: ['EMAIL'],
  aws_cognito_social_providers: [],
  aws_cognito_signup_attributes: ['EMAIL'],
  aws_cognito_mfa_configuration: 'OFF',
  aws_cognito_mfa_types: ['SMS'],
  aws_cognito_password_protection_settings: {
    passwordPolicyMinLength: 8,
    passwordPolicyCharacters: [],
  },
  aws_cognito_verification_mechanisms: ['EMAIL'],
  aws_user_files_s3_bucket: 'tesseract1754e22f7d684346832b03c4b95cd4dd80750-develop',
  aws_user_files_s3_bucket_region: 'eu-west-1',
};
var aws_exports_default = awsmobile;

// lambda/shared/dynamo.ts
var getDynamoClient = (tokens) => {
  const opts = {
    region: aws_exports_default.aws_project_region,
  };
  if (tokens) {
    opts.credentials = tokens;
  }
  return new import_client_dynamodb.DynamoDBClient(opts);
};
var defaultScanOptions = {
  ExpressionAttributeNames: { '#key': '_deleted' },
  ExpressionAttributeValues: { ':value': true },
  FilterExpression: '#key <> :value',
  ReturnConsumedCapacity: 'TOTAL',
};
var scanDynamoTable = async (table, scanOptions = defaultScanOptions, tokens, ddClient) => {
  try {
    const dynamoDocClient = ddClient ?? import_lib_dynamodb.DynamoDBDocumentClient.from(getDynamoClient(tokens));
    const scanParams = {
      TableName: table,
      ...scanOptions,
    };
    const res = await dynamoDocClient.send(new import_lib_dynamodb.ScanCommand(scanParams));
    if (res.LastEvaluatedKey && res.Items) {
      let key = res.LastEvaluatedKey;
      while (key) {
        scanParams.ExclusiveStartKey = key;
        const pagination = await dynamoDocClient.send(new import_lib_dynamodb.ScanCommand(scanParams));
        if (pagination.Items) {
          res.Items = [...res.Items, ...pagination.Items];
        }
        key = pagination.LastEvaluatedKey;
      }
    }
    return res;
  } catch (err) {
    console.error(err);
    throw err;
  }
};
var queryDynamoTable = async (
  table,
  index,
  field,
  query,
  queryExtras = {
    names: {},
    values: {},
  },
  tokens,
  ddClient
) => {
  try {
    const dynamoDocClient = ddClient ?? import_lib_dynamodb.DynamoDBDocumentClient.from(getDynamoClient(tokens));
    const queryParams = {
      TableName: table,
      ExpressionAttributeNames: { '#key': field, ...queryExtras.names },
      ExpressionAttributeValues: { ':value': query, ...queryExtras.values },
      KeyConditionExpression: '#key = :value',
      Limit: 50,
    };
    if (queryExtras.conditions) {
      queryParams.FilterExpression = queryExtras.conditions;
    }
    if (index) {
      queryParams.IndexName = index;
    }
    const res = await dynamoDocClient.send(new import_lib_dynamodb.QueryCommand(queryParams));
    if (res.LastEvaluatedKey && res.Items) {
      let key = res.LastEvaluatedKey;
      while (key) {
        queryParams.ExclusiveStartKey = key;
        const pagination = await dynamoDocClient.send(new import_lib_dynamodb.QueryCommand(queryParams));
        if (pagination.Items) {
          res.Items = [...res.Items, ...pagination.Items];
        }
        key = pagination.LastEvaluatedKey;
        await wait(100);
      }
    }
    return res;
  } catch (err) {
    console.error(err);
    throw err;
  }
};
var queryDynamoTableBatch = async (table, index, field, ids, ddClient, tokens) => {
  const dynamoDocClient = ddClient ?? import_lib_dynamodb.DynamoDBDocumentClient.from(getDynamoClient(tokens));
  try {
    let items = [];
    while (ids.length) {
      const primaryKeys = ids.splice(0, 100);
      const queryParams = {
        RequestItems: {
          [table]: { Keys: primaryKeys.map((id) => ({ id })) },
        },
      };
      const resp = await dynamoDocClient.send(new import_lib_dynamodb.BatchGetCommand(queryParams));
      items = [...items, ...(resp.Responses?.[table] ?? [])];
    }
    return items;
  } catch (err) {
    console.error(err);
    throw err;
  }
};
var wait = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// amplify/#current-cloud-backend/awscloudformation/build/root-cloudformation-stack.json
var root_cloudformation_stack_default = {
  Description: 'Root Stack for AWS Amplify Console',
  AWSTemplateFormatVersion: '2010-09-09',
  Parameters: {
    DeploymentBucketName: {
      Type: 'String',
      Default: 'DeploymentBucket',
      Description: 'Name of the common deployment bucket provided by the parent stack',
    },
    AuthRoleName: {
      Type: 'String',
      Default: 'AuthRoleName',
      Description: 'Name of the common deployment bucket provided by the parent stack',
    },
    UnauthRoleName: {
      Type: 'String',
      Default: 'UnAuthRoleName',
      Description: 'Name of the common deployment bucket provided by the parent stack',
    },
  },
  Outputs: {
    Region: {
      Description: 'CloudFormation provider root stack Region',
      Value: {
        Ref: 'AWS::Region',
      },
      Export: {
        Name: {
          'Fn::Sub': '${AWS::StackName}-Region',
        },
      },
    },
    StackName: {
      Description: 'CloudFormation provider root stack ID',
      Value: {
        Ref: 'AWS::StackName',
      },
      Export: {
        Name: {
          'Fn::Sub': '${AWS::StackName}-StackName',
        },
      },
    },
    StackId: {
      Description: 'CloudFormation provider root stack name',
      Value: {
        Ref: 'AWS::StackId',
      },
      Export: {
        Name: {
          'Fn::Sub': '${AWS::StackName}-StackId',
        },
      },
    },
    AuthRoleArn: {
      Value: {
        'Fn::GetAtt': ['AuthRole', 'Arn'],
      },
    },
    UnauthRoleArn: {
      Value: {
        'Fn::GetAtt': ['UnauthRole', 'Arn'],
      },
    },
    DeploymentBucketName: {
      Description: 'CloudFormation provider root stack deployment bucket name',
      Value: {
        Ref: 'DeploymentBucketName',
      },
      Export: {
        Name: {
          'Fn::Sub': '${AWS::StackName}-DeploymentBucketName',
        },
      },
    },
    AuthRoleName: {
      Value: {
        Ref: 'AuthRole',
      },
    },
    UnauthRoleName: {
      Value: {
        Ref: 'UnauthRole',
      },
    },
  },
  Resources: {
    DeploymentBucket: {
      Type: 'AWS::S3::Bucket',
      Properties: {
        BucketName: {
          Ref: 'DeploymentBucketName',
        },
        BucketEncryption: {
          ServerSideEncryptionConfiguration: [
            {
              ServerSideEncryptionByDefault: {
                SSEAlgorithm: 'AES256',
              },
            },
          ],
        },
      },
      UpdateReplacePolicy: 'Retain',
      DeletionPolicy: 'Retain',
    },
    AuthRole: {
      Type: 'AWS::IAM::Role',
      Properties: {
        AssumeRolePolicyDocument: {
          Version: '2012-10-17',
          Statement: [
            {
              Sid: '',
              Effect: 'Deny',
              Principal: {
                Federated: 'cognito-identity.amazonaws.com',
              },
              Action: 'sts:AssumeRoleWithWebIdentity',
            },
          ],
        },
        RoleName: {
          Ref: 'AuthRoleName',
        },
      },
    },
    UnauthRole: {
      Type: 'AWS::IAM::Role',
      Properties: {
        AssumeRolePolicyDocument: {
          Version: '2012-10-17',
          Statement: [
            {
              Sid: '',
              Effect: 'Deny',
              Principal: {
                Federated: 'cognito-identity.amazonaws.com',
              },
              Action: 'sts:AssumeRoleWithWebIdentity',
            },
          ],
        },
        RoleName: {
          Ref: 'UnauthRoleName',
        },
      },
    },
    APIGatewayAuthStack: {
      Type: 'AWS::CloudFormation::Stack',
      Properties: {
        TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/api/APIGatewayAuthStack.json',
        Parameters: {
          authRoleName: {
            Ref: 'AuthRoleName',
          },
          unauthRoleName: {
            Ref: 'UnauthRoleName',
          },
          env: 'develop',
          filterParseApi: {
            'Fn::GetAtt': ['apifilterParseApi', 'Outputs.ApiId'],
          },
        },
      },
    },
    apifilterParseApi: {
      Type: 'AWS::CloudFormation::Stack',
      Properties: {
        TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/api/filterParseApi-cloudformation-template.json',
        Parameters: {
          functionfilterParseLambdaName: {
            'Fn::GetAtt': ['functionfilterParseLambda', 'Outputs.Name'],
          },
          functionfilterParseLambdaArn: {
            'Fn::GetAtt': ['functionfilterParseLambda', 'Outputs.Arn'],
          },
          env: 'develop',
        },
      },
    },
    apitesseract: {
      Type: 'AWS::CloudFormation::Stack',
      Properties: {
        TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/api/cloudformation-template.json',
        Parameters: {
          AppSyncApiName: 'tesseract',
          DynamoDBBillingMode: 'PAY_PER_REQUEST',
          DynamoDBEnableServerSideEncryption: false,
          AuthCognitoUserPoolId: {
            'Fn::GetAtt': ['authtesseract32b8060e', 'Outputs.UserPoolId'],
          },
          authRoleName: {
            Ref: 'AuthRoleName',
          },
          unauthRoleName: {
            Ref: 'UnauthRoleName',
          },
          S3DeploymentBucket: 'amplify-tesseract-develop-80750-deployment',
          S3DeploymentRootKey: 'amplify-appsync-files/cae96e5047ba8782ab3d58b4df183a7bb88f54d0',
          env: 'develop',
        },
      },
    },
    authtesseract32b8060e: {
      Type: 'AWS::CloudFormation::Stack',
      Properties: {
        TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/auth/tesseract32b8060e-cloudformation-template.json',
        Parameters: {
          identityPoolName: 'tesseract32b8060e_identitypool_32b8060e',
          allowUnauthenticatedIdentities: true,
          resourceNameTruncated: 'tesser32b8060e',
          userPoolName: 'tesseract32b8060e_userpool_32b8060e',
          autoVerifiedAttributes: 'email',
          mfaConfiguration: 'OFF',
          mfaTypes: 'SMS Text Message',
          smsAuthenticationMessage: 'Your authentication code is {####}',
          smsVerificationMessage: 'Your verification code is {####}',
          emailVerificationSubject: 'Your verification code',
          emailVerificationMessage: 'Your verification code is {####}',
          defaultPasswordPolicy: false,
          passwordPolicyMinLength: 8,
          passwordPolicyCharacters: '',
          requiredAttributes: 'email',
          aliasAttributes: '',
          userpoolClientGenerateSecret: false,
          userpoolClientRefreshTokenValidity: '7',
          userpoolClientWriteAttributes: 'email',
          userpoolClientReadAttributes: 'email',
          userpoolClientLambdaRole: 'tesser32b8060e_userpoolclient_lambda_role',
          userpoolClientSetAttributes: false,
          sharedId: '32b8060e',
          resourceName: 'tesseract32b8060e',
          authSelections: 'identityPoolAndUserPool',
          useDefault: 'manual',
          usernameAttributes: 'email',
          triggers: '{}',
          userPoolGroupList: '',
          serviceName: 'Cognito',
          usernameCaseSensitive: false,
          useEnabledMfas: true,
          authRoleArn: {
            'Fn::GetAtt': ['AuthRole', 'Arn'],
          },
          unauthRoleArn: {
            'Fn::GetAtt': ['UnauthRole', 'Arn'],
          },
          breakCircularDependency: true,
          dependsOn: '',
          thirdPartyAuth: true,
          authProviders: '',
          userPoolGroups: false,
          adminQueries: false,
          hostedUI: true,
          hostedUIDomainName: 'tesseract74mo7u6u13ostdr72dhmoc6dv6',
          authProvidersUserPool: '',
          hostedUIProviderMeta: '[]',
          parentStack: {
            Ref: 'AWS::StackId',
          },
          permissions: '',
          hostedUIProviderCreds: '[]',
          oAuthMetadata:
            '{"AllowedOAuthFlows":["code"],"AllowedOAuthScopes":["phone","email","openid","profile","aws.cognito.signin.user.admin"],"CallbackURLs":["http://localhost:3000/login/","https://develop.d1m9105kyx4cvx.amplifyapp.com/login/","https://portal.dev.actual-experience.com/login/","https://www.portal.dev.actual-experience.com/login/"],"LogoutURLs":["http://localhost:3000/logout/","https://develop.d1m9105kyx4cvx.amplifyapp.com/logout/","https://portal.dev.actual-experience.com/logout/","https://portal.dev.actual-experience.com/logout/"]}',
          env: 'develop',
        },
      },
    },
    customcustomResource5376c971: {
      Type: 'AWS::CloudFormation::Stack',
      Properties: {
        TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/custom/customResource5376c971-cloudformation-template.json',
        Parameters: {
          authtesseract32b8060eIdentityPoolId: {
            'Fn::GetAtt': ['authtesseract32b8060e', 'Outputs.IdentityPoolId'],
          },
          authtesseract32b8060eIdentityPoolName: {
            'Fn::GetAtt': ['authtesseract32b8060e', 'Outputs.IdentityPoolName'],
          },
          authtesseract32b8060eHostedUIDomain: {
            'Fn::GetAtt': ['authtesseract32b8060e', 'Outputs.HostedUIDomain'],
          },
          authtesseract32b8060eOAuthMetadata: {
            'Fn::GetAtt': ['authtesseract32b8060e', 'Outputs.OAuthMetadata'],
          },
          authtesseract32b8060eUserPoolId: {
            'Fn::GetAtt': ['authtesseract32b8060e', 'Outputs.UserPoolId'],
          },
          authtesseract32b8060eUserPoolArn: {
            'Fn::GetAtt': ['authtesseract32b8060e', 'Outputs.UserPoolArn'],
          },
          authtesseract32b8060eUserPoolName: {
            'Fn::GetAtt': ['authtesseract32b8060e', 'Outputs.UserPoolName'],
          },
          authtesseract32b8060eAppClientIDWeb: {
            'Fn::GetAtt': ['authtesseract32b8060e', 'Outputs.AppClientIDWeb'],
          },
          authtesseract32b8060eAppClientID: {
            'Fn::GetAtt': ['authtesseract32b8060e', 'Outputs.AppClientID'],
          },
          storagetesseractdevelopBucketName: {
            'Fn::GetAtt': ['storagetesseractdevelop', 'Outputs.BucketName'],
          },
          storagetesseractdevelopRegion: {
            'Fn::GetAtt': ['storagetesseractdevelop', 'Outputs.Region'],
          },
          apitesseractGraphQLAPIKeyOutput: {
            'Fn::GetAtt': ['apitesseract', 'Outputs.GraphQLAPIKeyOutput'],
          },
          apitesseractGraphQLAPIIdOutput: {
            'Fn::GetAtt': ['apitesseract', 'Outputs.GraphQLAPIIdOutput'],
          },
          apitesseractGraphQLAPIEndpointOutput: {
            'Fn::GetAtt': ['apitesseract', 'Outputs.GraphQLAPIEndpointOutput'],
          },
          env: 'develop',
        },
      },
    },
    functionduLambda: {
      Type: 'AWS::CloudFormation::Stack',
      Properties: {
        TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/function/duLambda-cloudformation-template.json',
        Parameters: {
          deploymentBucketName: 'amplify-tesseract-develop-80750-deployment',
          s3Key: 'amplify-builds/duLambda-584c2f484d30396e5152-build.zip',
          apitesseractGraphQLAPIIdOutput: {
            'Fn::GetAtt': ['apitesseract', 'Outputs.GraphQLAPIIdOutput'],
          },
          env: 'develop',
        },
      },
    },
    functiondynamoDelete: {
      Type: 'AWS::CloudFormation::Stack',
      Properties: {
        TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/function/dynamoDelete-cloudformation-template.json',
        Parameters: {
          deploymentBucketName: 'amplify-tesseract-develop-80750-deployment',
          s3Key: 'amplify-builds/dynamoDelete-764c735a322b36446179-build.zip',
          apitesseractGraphQLAPIIdOutput: {
            'Fn::GetAtt': ['apitesseract', 'Outputs.GraphQLAPIIdOutput'],
          },
          apitesseractGraphQLAPIEndpointOutput: {
            'Fn::GetAtt': ['apitesseract', 'Outputs.GraphQLAPIEndpointOutput'],
          },
          apitesseractGraphQLAPIKeyOutput: {
            'Fn::GetAtt': ['apitesseract', 'Outputs.GraphQLAPIKeyOutput'],
          },
          env: 'develop',
        },
      },
    },
    functionfilterParseLambda: {
      Type: 'AWS::CloudFormation::Stack',
      Properties: {
        TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/function/filterParseLambda-cloudformation-template.json',
        Parameters: {
          deploymentBucketName: 'amplify-tesseract-develop-80750-deployment',
          s3Key: 'amplify-builds/filterParseLambda-795a417254655276592f-build.zip',
          env: 'develop',
        },
      },
    },
    functionparseLambda: {
      Type: 'AWS::CloudFormation::Stack',
      Properties: {
        TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/function/parseLambda-cloudformation-template.json',
        Parameters: {
          deploymentBucketName: 'amplify-tesseract-develop-80750-deployment',
          s3Key: 'amplify-builds/parseLambda-34573635396c38525952-build.zip',
          apitesseractGraphQLAPIIdOutput: {
            'Fn::GetAtt': ['apitesseract', 'Outputs.GraphQLAPIIdOutput'],
          },
          apitesseractGraphQLAPIEndpointOutput: {
            'Fn::GetAtt': ['apitesseract', 'Outputs.GraphQLAPIEndpointOutput'],
          },
          apitesseractGraphQLAPIKeyOutput: {
            'Fn::GetAtt': ['apitesseract', 'Outputs.GraphQLAPIKeyOutput'],
          },
          env: 'develop',
        },
      },
    },
    functionpublishLambda: {
      Type: 'AWS::CloudFormation::Stack',
      Properties: {
        TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/function/publishLambda-cloudformation-template.json',
        Parameters: {
          deploymentBucketName: 'amplify-tesseract-develop-80750-deployment',
          s3Key: 'amplify-builds/publishLambda-476572684b6c78737a59-build.zip',
          storagetesseractdevelopBucketName: {
            'Fn::GetAtt': ['storagetesseractdevelop', 'Outputs.BucketName'],
          },
          env: 'develop',
        },
      },
    },
    storagetesseractdevelop: {
      Type: 'AWS::CloudFormation::Stack',
      Properties: {
        TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/storage/cloudformation-template.json',
        Parameters: {
          bucketName: 'tesseract1754e22f7d684346832b03c4b95cd4dd',
          selectedGuestPermissions: '',
          selectedAuthenticatedPermissions: 's3:PutObject,s3:GetObject,s3:ListBucket,s3:DeleteObject',
          unauthRoleName: {
            Ref: 'UnauthRoleName',
          },
          authRoleName: {
            Ref: 'AuthRoleName',
          },
          s3PrivatePolicy: 'Private_policy_1ac40e45',
          s3ProtectedPolicy: 'Protected_policy_1ac40e45',
          s3PublicPolicy: 'Public_policy_1ac40e45',
          s3ReadPolicy: 'read_policy_1ac40e45',
          s3UploadsPolicy: 'Uploads_policy_1ac40e45',
          authPolicyName: 's3_amplify_1ac40e45',
          unauthPolicyName: 's3_amplify_1ac40e45',
          AuthenticatedAllowList: 'ALLOW',
          GuestAllowList: 'DISALLOW',
          s3PermissionsAuthenticatedPrivate: 's3:PutObject,s3:GetObject,s3:DeleteObject',
          s3PermissionsAuthenticatedProtected: 's3:PutObject,s3:GetObject,s3:DeleteObject',
          s3PermissionsAuthenticatedPublic: 's3:PutObject,s3:GetObject,s3:DeleteObject',
          s3PermissionsAuthenticatedUploads: 's3:PutObject',
          s3PermissionsGuestPublic: 'DISALLOW',
          s3PermissionsGuestUploads: 'DISALLOW',
          env: 'develop',
        },
      },
    },
    UpdateRolesWithIDPFunction: {
      DependsOn: ['AuthRole', 'UnauthRole', 'authtesseract32b8060e'],
      Type: 'AWS::Lambda::Function',
      Properties: {
        Code: {
          ZipFile: {
            'Fn::Join': [
              '\n',
              [
                "const response = require('cfn-response');",
                "const aws = require('aws-sdk');",
                'let responseData = {};',
                'exports.handler = function(event, context) {',
                '  try {',
                '    let authRoleName = event.ResourceProperties.authRoleName;',
                '    let unauthRoleName = event.ResourceProperties.unauthRoleName;',
                '    let idpId = event.ResourceProperties.idpId;',
                '    let promises = [];',
                '    let getPromises = [];',
                "    let authParamsJson = { 'Version': '2012-10-17','Statement': [{'Effect': 'Allow','Principal': {'Federated': 'cognito-identity.amazonaws.com'},'Action': 'sts:AssumeRoleWithWebIdentity','Condition': {'StringEquals': {'cognito-identity.amazonaws.com:aud': idpId},'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'authenticated'}}}]};",
                "    let unauthParamsJson = { 'Version': '2012-10-17','Statement': [{'Effect': 'Allow','Principal': {'Federated': 'cognito-identity.amazonaws.com'},'Action': 'sts:AssumeRoleWithWebIdentity','Condition': {'StringEquals': {'cognito-identity.amazonaws.com:aud': idpId},'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'unauthenticated'}}}]};",
                "    if (event.RequestType == 'Delete') {",
                '        delete authParamsJson.Statement[0].Condition;',
                '        delete unauthParamsJson.Statement[0].Condition;',
                '        let authParams = { PolicyDocument: JSON.stringify(authParamsJson),RoleName: authRoleName};',
                '        let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson),RoleName: unauthRoleName};',
                "        const iam = new aws.IAM({ apiVersion: '2010-05-08', region: event.ResourceProperties.region});",
                '        getPromises.push(iam.getRole({RoleName: authParams.RoleName}).promise());',
                '        getPromises.push(iam.getRole({RoleName: unauthParams.RoleName}).promise());',
                '        Promise.all(getPromises)',
                '         .then((res) => {',
                "        console.log('in res' , res)",
                '           promises.push(iam.updateAssumeRolePolicy(authParams).promise());',
                '           promises.push(iam.updateAssumeRolePolicy(unauthParams).promise());',
                '           return Promise.all(promises)',
                '             .then((res) => {',
                '               console.log("delete response data" + JSON.stringify(res));',
                '               response.send(event, context, response.SUCCESS, {});',
                '             });',
                '          })',
                '           .catch((err) => {',
                '             console.log(err.stack);',
                '             responseData = {Error: err};',
                '             response.send(event, context, response.SUCCESS, responseData);',
                '             })',
                '    }',
                "    if (event.RequestType == 'Update' || event.RequestType == 'Create') {",
                "       const iam = new aws.IAM({ apiVersion: '2010-05-08', region: event.ResourceProperties.region});",
                '        let authParams = { PolicyDocument: JSON.stringify(authParamsJson),RoleName: authRoleName};',
                '        let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson),RoleName: unauthRoleName};',
                '        promises.push(iam.updateAssumeRolePolicy(authParams).promise());',
                '        promises.push(iam.updateAssumeRolePolicy(unauthParams).promise());',
                '        Promise.all(promises)',
                '         .then((res) => {',
                '            console.log("createORupdate" + res);',
                '            console.log("response data" + JSON.stringify(res));',
                '            response.send(event, context, response.SUCCESS, {});',
                '         });',
                '    }',
                '  } catch(err) {',
                '       console.log(err.stack);',
                '       responseData = {Error: err};',
                '       response.send(event, context, response.FAILED, responseData);',
                '       throw err;',
                '  }',
                '};',
              ],
            ],
          },
        },
        Handler: 'index.handler',
        Runtime: 'nodejs14.x',
        Timeout: 300,
        Role: {
          'Fn::GetAtt': ['UpdateRolesWithIDPFunctionRole', 'Arn'],
        },
      },
    },
    UpdateRolesWithIDPFunctionOutputs: {
      Type: 'Custom::LambdaCallout',
      Properties: {
        ServiceToken: {
          'Fn::GetAtt': ['UpdateRolesWithIDPFunction', 'Arn'],
        },
        region: {
          Ref: 'AWS::Region',
        },
        idpId: {
          'Fn::GetAtt': ['authtesseract32b8060e', 'Outputs.IdentityPoolId'],
        },
        authRoleName: {
          Ref: 'AuthRole',
        },
        unauthRoleName: {
          Ref: 'UnauthRole',
        },
      },
    },
    UpdateRolesWithIDPFunctionRole: {
      Type: 'AWS::IAM::Role',
      Properties: {
        RoleName: {
          'Fn::Join': [
            '',
            [
              {
                Ref: 'AuthRole',
              },
              '-idp',
            ],
          ],
        },
        AssumeRolePolicyDocument: {
          Version: '2012-10-17',
          Statement: [
            {
              Effect: 'Allow',
              Principal: {
                Service: ['lambda.amazonaws.com'],
              },
              Action: ['sts:AssumeRole'],
            },
          ],
        },
        Policies: [
          {
            PolicyName: 'UpdateRolesWithIDPFunctionPolicy',
            PolicyDocument: {
              Version: '2012-10-17',
              Statement: [
                {
                  Effect: 'Allow',
                  Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents'],
                  Resource: 'arn:aws:logs:*:*:*',
                },
                {
                  Effect: 'Allow',
                  Action: ['iam:UpdateAssumeRolePolicy', 'iam:GetRole'],
                  Resource: {
                    'Fn::GetAtt': ['AuthRole', 'Arn'],
                  },
                },
                {
                  Effect: 'Allow',
                  Action: ['iam:UpdateAssumeRolePolicy', 'iam:GetRole'],
                  Resource: {
                    'Fn::GetAtt': ['UnauthRole', 'Arn'],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  },
};

// amplify/backend/amplify-meta.json
var amplify_meta_default = {
  providers: {
    awscloudformation: {
      AuthRoleName: 'amplify-tesseract-develop-80750-authRole',
      UnauthRoleArn: 'arn:aws:iam::507548201851:role/amplify-tesseract-develop-80750-unauthRole',
      AuthRoleArn: 'arn:aws:iam::507548201851:role/amplify-tesseract-develop-80750-authRole',
      Region: 'eu-west-1',
      DeploymentBucketName: 'amplify-tesseract-develop-80750-deployment',
      UnauthRoleName: 'amplify-tesseract-develop-80750-unauthRole',
      StackName: 'amplify-tesseract-develop-80750',
      StackId:
        'arn:aws:cloudformation:eu-west-1:507548201851:stack/amplify-tesseract-develop-80750/47a30e90-358e-11ed-9729-06d78840e543',
      AmplifyAppId: 'd1m9105kyx4cvx',
      APIGatewayAuthURL:
        'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/api/APIGatewayAuthStack.json',
    },
  },
  api: {
    filterParseApi: {
      dependsOn: [
        {
          attributes: ['Name', 'Arn'],
          category: 'function',
          resourceName: 'filterParseLambda',
        },
      ],
      providerPlugin: 'awscloudformation',
      service: 'API Gateway',
      output: {
        ApiName: 'filterParseApi',
        RootUrl: 'https://m51wpqp30h.execute-api.eu-west-1.amazonaws.com/develop',
        ApiId: 'm51wpqp30h',
      },
      lastPushTimeStamp: '2023-03-09T12:26:49.541Z',
      providerMetadata: {
        s3TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/api/filterParseApi-cloudformation-template.json',
        logicalId: 'apifilterParseApi',
      },
      lastPushDirHash: 'BvGBdMP8NUBtYrhc//tWazrzxEQ=',
    },
    tesseract: {
      dependsOn: [
        {
          attributes: ['UserPoolId'],
          category: 'auth',
          resourceName: 'tesseract32b8060e',
        },
      ],
      output: {
        authConfig: {
          additionalAuthenticationProviders: [
            {
              apiKeyConfig: {
                apiKeyExpirationDate: '2022-08-16T12:48:19.144Z',
                apiKeyExpirationDays: 7,
                description: 'tesseract-graphql',
              },
              authenticationType: 'API_KEY',
            },
            {
              authenticationType: 'AWS_IAM',
            },
          ],
          defaultAuthentication: {
            authenticationType: 'AMAZON_COGNITO_USER_POOLS',
            userPoolConfig: {
              userPoolId: 'authtesseract32b8060e',
            },
          },
        },
        GraphQLAPIIdOutput: '3fch3oorjnhtvbl3icflxqfmwi',
        GraphQLAPIEndpointOutput: 'https://lcdsxuudovbofpfaxsi7vihc3q.appsync-api.eu-west-1.amazonaws.com/graphql',
        GraphQLAPIKeyOutput: 'da2-vyepxblpnzaevf6kvnypdmv74a',
      },
      providerPlugin: 'awscloudformation',
      service: 'AppSync',
      lastPushTimeStamp: '2023-03-09T12:26:49.543Z',
      providerMetadata: {
        s3TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/api/cloudformation-template.json',
        logicalId: 'apitesseract',
      },
      lastPushDirHash: 'jJ2UPVCt15WC513WsDCXYBZLW8I=',
    },
  },
  auth: {
    tesseract32b8060e: {
      customAuth: false,
      dependsOn: [],
      frontendAuthConfig: {
        mfaConfiguration: 'OFF',
        mfaTypes: ['SMS'],
        passwordProtectionSettings: {
          passwordPolicyMinLength: 8,
          passwordPolicyCharacters: [],
        },
        signupAttributes: ['EMAIL'],
        socialProviders: [],
        usernameAttributes: ['EMAIL'],
        verificationMechanisms: ['EMAIL'],
      },
      providerPlugin: 'awscloudformation',
      service: 'Cognito',
      output: {
        UserPoolId: 'eu-west-1_bkCfPDviC',
        AppClientIDWeb: '2qs2u0fg4cpbb2a1khs96rb75t',
        AppClientID: '549ngb7jjm9of8r1g9bann5ud2',
        HostedUIDomain: 'tesseract74mo7u6u13ostdr72dhmoc6dv6-develop',
        IdentityPoolId: 'eu-west-1:9bbbcc97-2d17-4089-9f99-7518bd178c68',
        UserPoolArn: 'arn:aws:cognito-idp:eu-west-1:507548201851:userpool/eu-west-1_bkCfPDviC',
        IdentityPoolName: 'tesseract32b8060e_identitypool_32b8060e__develop',
        OAuthMetadata:
          '{"AllowedOAuthFlows":["code"],"AllowedOAuthScopes":["phone","email","openid","profile","aws.cognito.signin.user.admin"],"CallbackURLs":["http://localhost:3000/login/","https://develop.d1m9105kyx4cvx.amplifyapp.com/login/","https://portal.dev.actual-experience.com/login/","https://www.portal.dev.actual-experience.com/login/"],"LogoutURLs":["http://localhost:3000/logout/","https://develop.d1m9105kyx4cvx.amplifyapp.com/logout/","https://portal.dev.actual-experience.com/logout/","https://portal.dev.actual-experience.com/logout/"]}',
        UserPoolName: 'tesseract32b8060e_userpool_32b8060e',
      },
      lastPushTimeStamp: '2023-03-09T12:26:49.544Z',
      providerMetadata: {
        s3TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/auth/tesseract32b8060e-cloudformation-template.json',
        logicalId: 'authtesseract32b8060e',
      },
      lastPushDirHash: 'G8Roy3NWWoCH1jZ1WKNTtUhAHTM=',
    },
  },
  custom: {
    customResource5376c971: {
      dependsOn: [
        {
          attributes: [
            'IdentityPoolId',
            'IdentityPoolName',
            'HostedUIDomain',
            'OAuthMetadata',
            'UserPoolId',
            'UserPoolArn',
            'UserPoolName',
            'AppClientIDWeb',
            'AppClientID',
          ],
          category: 'auth',
          resourceName: 'tesseract32b8060e',
        },
        {
          attributes: ['BucketName', 'Region'],
          category: 'storage',
          resourceName: 'tesseractdevelop',
        },
        {
          attributes: ['GraphQLAPIKeyOutput', 'GraphQLAPIIdOutput', 'GraphQLAPIEndpointOutput'],
          category: 'api',
          resourceName: 'tesseract',
        },
      ],
      providerPlugin: 'awscloudformation',
      service: 'customCloudformation',
      output: {},
      lastPushTimeStamp: '2023-03-09T12:26:49.545Z',
      providerMetadata: {
        s3TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/custom/customResource5376c971-cloudformation-template.json',
        logicalId: 'customcustomResource5376c971',
      },
      lastPushDirHash: 'koWYqVrNmGIObfBmjb+BwbcLLgo=',
    },
  },
  function: {
    duLambda: {
      build: true,
      dependsOn: [
        {
          attributes: ['GraphQLAPIIdOutput'],
          category: 'api',
          resourceName: 'tesseract',
        },
      ],
      providerPlugin: 'awscloudformation',
      service: 'Lambda',
      output: {
        LambdaExecutionRoleArn: 'arn:aws:iam::507548201851:role/tesseractLambdaRoled81390b8-develop',
        Region: 'eu-west-1',
        Arn: 'arn:aws:lambda:eu-west-1:507548201851:function:duLambda-develop',
        Name: 'duLambda-develop',
        LambdaExecutionRole: 'tesseractLambdaRoled81390b8-develop',
      },
      lastPushTimeStamp: '2023-03-09T12:26:49.750Z',
      providerMetadata: {
        s3TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/function/duLambda-cloudformation-template.json',
        logicalId: 'functionduLambda',
      },
      s3Bucket: {
        deploymentBucketName: 'amplify-tesseract-develop-80750-deployment',
        s3Key: 'amplify-builds/duLambda-584c2f484d30396e5152-build.zip',
      },
      lastBuildTimeStamp: '2023-03-09T12:25:10.902Z',
      lastBuildType: 'PROD',
      lastPackageTimeStamp: '2023-03-09T12:25:11.149Z',
      distZipFilename: 'duLambda-584c2f484d30396e5152-build.zip',
      lastPushDirHash: 'jbn0SMjD/BiwweCi8Z2Jq2/REXU=',
    },
    dynamoDelete: {
      build: true,
      dependsOn: [
        {
          attributes: ['GraphQLAPIIdOutput', 'GraphQLAPIEndpointOutput', 'GraphQLAPIKeyOutput'],
          category: 'api',
          resourceName: 'tesseract',
        },
      ],
      providerPlugin: 'awscloudformation',
      service: 'Lambda',
      output: {
        LambdaExecutionRoleArn: 'arn:aws:iam::507548201851:role/tesseractLambdaRole70fe7189-develop',
        Region: 'eu-west-1',
        Arn: 'arn:aws:lambda:eu-west-1:507548201851:function:dynamoDelete-develop',
        Name: 'dynamoDelete-develop',
        LambdaExecutionRole: 'tesseractLambdaRole70fe7189-develop',
      },
      lastPushTimeStamp: '2023-03-09T12:26:49.750Z',
      providerMetadata: {
        s3TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/function/dynamoDelete-cloudformation-template.json',
        logicalId: 'functiondynamoDelete',
      },
      s3Bucket: {
        deploymentBucketName: 'amplify-tesseract-develop-80750-deployment',
        s3Key: 'amplify-builds/dynamoDelete-764c735a322b36446179-build.zip',
      },
      lastBuildTimeStamp: '2023-03-09T12:25:10.904Z',
      lastBuildType: 'PROD',
      lastPackageTimeStamp: '2023-03-09T12:25:11.345Z',
      distZipFilename: 'dynamoDelete-764c735a322b36446179-build.zip',
      lastPushDirHash: 'Ch19XgtZjYFKj4wL3PVZk1dBz6k=',
    },
    filterParseLambda: {
      build: true,
      providerPlugin: 'awscloudformation',
      service: 'Lambda',
      output: {
        LambdaExecutionRoleArn: 'arn:aws:iam::507548201851:role/tesseractLambdaRole26a571de-develop',
        Region: 'eu-west-1',
        Arn: 'arn:aws:lambda:eu-west-1:507548201851:function:filterParseLambda-develop',
        Name: 'filterParseLambda-develop',
        LambdaExecutionRole: 'tesseractLambdaRole26a571de-develop',
      },
      lastPushTimeStamp: '2023-03-09T12:26:49.750Z',
      providerMetadata: {
        s3TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/function/filterParseLambda-cloudformation-template.json',
        logicalId: 'functionfilterParseLambda',
      },
      s3Bucket: {
        deploymentBucketName: 'amplify-tesseract-develop-80750-deployment',
        s3Key: 'amplify-builds/filterParseLambda-795a417254655276592f-build.zip',
      },
      lastBuildTimeStamp: '2023-03-09T12:25:10.905Z',
      lastBuildType: 'PROD',
      lastPackageTimeStamp: '2023-03-09T12:25:13.195Z',
      distZipFilename: 'filterParseLambda-795a417254655276592f-build.zip',
      lastPushDirHash: 'D6h1Tf7aKGnoE3EHYQYUG9BLSM0=',
    },
    parseLambda: {
      build: true,
      dependsOn: [
        {
          attributes: ['GraphQLAPIIdOutput', 'GraphQLAPIEndpointOutput', 'GraphQLAPIKeyOutput'],
          category: 'api',
          resourceName: 'tesseract',
        },
      ],
      providerPlugin: 'awscloudformation',
      service: 'Lambda',
      output: {
        LambdaExecutionRoleArn: 'arn:aws:iam::507548201851:role/tesseractLambdaRolef680a4de-develop',
        Region: 'eu-west-1',
        Arn: 'arn:aws:lambda:eu-west-1:507548201851:function:parseLambda-develop',
        Name: 'parseLambda-develop',
        LambdaExecutionRole: 'tesseractLambdaRolef680a4de-develop',
      },
      lastPushTimeStamp: '2023-03-09T12:26:49.750Z',
      providerMetadata: {
        s3TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/function/parseLambda-cloudformation-template.json',
        logicalId: 'functionparseLambda',
      },
      s3Bucket: {
        deploymentBucketName: 'amplify-tesseract-develop-80750-deployment',
        s3Key: 'amplify-builds/parseLambda-34573635396c38525952-build.zip',
      },
      lastBuildTimeStamp: '2023-03-09T12:25:10.906Z',
      lastBuildType: 'PROD',
      lastPackageTimeStamp: '2023-03-09T12:25:12.017Z',
      distZipFilename: 'parseLambda-34573635396c38525952-build.zip',
      lastPushDirHash: 'RunAMMjwEdqIoxPlPoRCdvfFGfA=',
    },
    publishLambda: {
      build: true,
      dependsOn: [
        {
          attributes: ['BucketName'],
          category: 'storage',
          resourceName: 'tesseractdevelop',
        },
      ],
      providerPlugin: 'awscloudformation',
      service: 'Lambda',
      output: {
        LambdaExecutionRoleArn: 'arn:aws:iam::507548201851:role/tesseractLambdaRole68eac0e0-develop',
        Region: 'eu-west-1',
        Arn: 'arn:aws:lambda:eu-west-1:507548201851:function:publishLambda-develop',
        Name: 'publishLambda-develop',
        LambdaExecutionRole: 'tesseractLambdaRole68eac0e0-develop',
      },
      lastPushTimeStamp: '2023-03-09T12:26:49.750Z',
      providerMetadata: {
        s3TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/function/publishLambda-cloudformation-template.json',
        logicalId: 'functionpublishLambda',
      },
      s3Bucket: {
        deploymentBucketName: 'amplify-tesseract-develop-80750-deployment',
        s3Key: 'amplify-builds/publishLambda-476572684b6c78737a59-build.zip',
      },
      lastBuildTimeStamp: '2023-03-09T12:25:10.907Z',
      lastBuildType: 'PROD',
      lastPackageTimeStamp: '2023-03-09T12:25:11.184Z',
      distZipFilename: 'publishLambda-476572684b6c78737a59-build.zip',
      lastPushDirHash: 'iEJdpZUpoTNUqp4kVEOrU5lYsI8=',
    },
  },
  storage: {
    tesseractdevelop: {
      dependsOn: [],
      providerPlugin: 'awscloudformation',
      service: 'S3',
      output: {
        BucketName: 'tesseract1754e22f7d684346832b03c4b95cd4dd80750-develop',
        Region: 'eu-west-1',
      },
      lastPushTimeStamp: '2023-03-09T12:26:49.552Z',
      providerMetadata: {
        s3TemplateURL:
          'https://s3.amazonaws.com/amplify-tesseract-develop-80750-deployment/amplify-cfn-templates/storage/cloudformation-template.json',
        logicalId: 'storagetesseractdevelop',
      },
      lastPushDirHash: 'PkUe9Spd3bYMDkvrWVcZGT2187A=',
    },
  },
};

// src/constants/datastore.ts
var apiId = amplify_meta_default.api.tesseract.output.GraphQLAPIIdOutput;
var env = root_cloudformation_stack_default.Resources.apitesseract.Properties.Parameters.env;
var PERSONA_SETTINGS = 'PersonaSettings';
var INPUT_ASSUMPTION = 'InputAssumption';
var APPLICATION_USAGE = 'ApplicationUsage';
var PARTNER = 'Partner';
var ORGANISATION = 'Organisation';
var CONTEXT_MAP = 'ContextMap';
var REPORT = 'Report';
var PROJECT_TEMPLATE = 'ProjectTemplate';
var PROJECT = 'Project';
var PROJECT_INSIGHT = 'ProjectInsight';
var DU = 'DU';
var PARSE = 'Parse';
var PROJECT_DUS = 'ProjectDus';
var PERSONA_SETTINGS_TABLE = `${PERSONA_SETTINGS}-${apiId}-${env}`;
var INPUT_ASSUMPTION_TABLE = `${INPUT_ASSUMPTION}-${apiId}-${env}`;
var APPLICATION_USAGE_TABLE = `${APPLICATION_USAGE}-${apiId}-${env}`;
var PARTNER_TABLE = `${PARTNER}-${apiId}-${env}`;
var ORGANISATION_TABLE = `${ORGANISATION}-${apiId}-${env}`;
var CONTEXT_MAP_TABLE = `${CONTEXT_MAP}-${apiId}-${env}`;
var REPORT_TABLE = `${REPORT}-${apiId}-${env}`;
var PROJECT_TEMPLATE_TABLE = `${PROJECT_TEMPLATE}-${apiId}-${env}`;
var PROJECT_TABLE = `${PROJECT}-${apiId}-${env}`;
var PROJECT_INSIGHT_TABLE = `${PROJECT_INSIGHT}-${apiId}-${env}`;
var DU_TABLE = `${DU}-${apiId}-${env}`;
var PARSE_TABLE = `${PARSE}-${apiId}-${env}`;
var PROJECT_DUS_TABLE = `${PROJECT_DUS}-${apiId}-${env}`;

// lambda/filterParse/db.ts
var getDusById = async (duIds, ddClient) => {
  console.log('Querying dynamo for DUs...');
  const dus = await queryDynamoTableBatch(DU_TABLE, 'id', 'id', duIds, ddClient);
  console.log('Got DUs successfully');
  return dus;
};
var getOrganisation = async (orgId, ddClient) => {
  console.log('Querying dynamo for organisation', orgId);
  const query = await queryDynamoTable(
    ORGANISATION_TABLE,
    'byOrganisationId',
    'organisationId',
    orgId,
    void 0,
    void 0,
    ddClient
  );
  const org = query.Items?.[0];
  if (!org) {
    console.error(query);
    throw new Error(`Could not find org for ID ${orgId}`);
  }
  console.log('Got organisation successfully');
  return org;
};
var getReport = async (reportId, ddClient) => {
  console.log('Querying dynamo for report', reportId);
  const query = await queryDynamoTable(REPORT_TABLE, null, 'id', reportId, void 0, void 0, ddClient);
  const report = query.Items?.[0];
  if (!report) {
    console.error(query);
    throw new Error(`Could not find report for ID ${reportId}`);
  }
  console.log('Got report successfully');
  return report;
};

// lambda/filterParse/lib.ts
var getInputLocationsFromReportData = (reportData) => {
  const allOffices = reportData.worstOffices.all;
  return Object.keys(allOffices);
};
var mapDUsToEmployees = (dus, personaSettings) =>
  dus.map((du) => ({
    User: du.name,
    employeeHxScore: du.hxScore,
    analytics: du.analytics ?? [],
    hybridPercent: du.hybridPercent,
    employeeDailyWastedMinutes: du.timeLost,
    employeeOperationalLoss: du.payroll,
    employeeRevenueLoss: du.revenue,
    [personaSettings.termType]: {
      [personaSettings.term]: [du.persona],
    },
    locations: du.locations ? (typeof du.locations === 'string' ? JSON.parse(du.locations) : du.locations) : {},
    employeeQualityScore: 0,
    employeePotentialScore: 0,
    employeeScoreDelta: 0,
    employeeScoreWeight: 0,
  }));

// lambda/parse/report/locations.ts
var import_cloneDeep = __toESM(require_cloneDeep());

// lambda/shared/helpers.ts
var import_lib_dynamodb2 = __toESM(require_dist_cjs121());
var hasKey = (obj, key) => key in obj;
var round = (v, dp = 0) => {
  const m = 10 ** dp;
  return Math.round(v * m) / m;
};
function calculatePercentage(fraction, total, shouldRound = true, dp = 0) {
  if (fraction === 0 && total === 0) {
    return 0;
  }
  if (total === 0) {
    return 0;
  }
  const percentage = (100 / total) * fraction;
  return shouldRound ? round(percentage, dp) : percentage;
}
var constructValueDisplayString = (value, dp = 1, formatNumber = true, prefix = '') => {
  let parsedValue = typeof value === 'string' ? parseFloat(value) : value;
  if (typeof value === 'string' && Number.isNaN(parsedValue)) {
    return value;
  }
  let suffix = '';
  if (formatNumber) {
    if (parsedValue >= 1e6) {
      suffix = 'M';
      parsedValue = parsedValue / 1e6;
    } else if (parsedValue >= 1e3) {
      suffix = 'K';
      parsedValue = parsedValue / 1e3;
    }
  }
  parsedValue = round(parsedValue, dp);
  const returnValue = parsedValue % 1 != 0 ? parsedValue.toFixed(dp) : parsedValue;
  return `${prefix}${returnValue}${suffix}`;
};
var getParseForReport = async (reportId, ddClient) => {
  console.log('Scanning parse table for parseReportId', reportId);
  const scan = await scanDynamoTable(
    PARSE_TABLE,
    {
      ...defaultScanOptions,
      ExpressionAttributeNames: {
        ...defaultScanOptions.ExpressionAttributeNames,
        '#pr': 'parseReportId',
      },
      ExpressionAttributeValues: {
        ...defaultScanOptions.ExpressionAttributeValues,
        ':pr': reportId,
      },
      FilterExpression: `#pr = :pr AND ${defaultScanOptions.FilterExpression}`,
    },
    void 0,
    ddClient
  );
  const parse = scan.Items?.[0];
  if (!parse) {
    console.error(scan);
    throw new Error(`Could not find parse for report ID ${reportId}`);
  }
  console.log('Got parse successfully');
  return parse;
};

// lambda/parse/report/constants.ts
var PROPERTY_DU = 'agent';
var PROPERTY_GROUP = 'agent_group';
var PROPERTY_SPG = 'sp_group';
var PROPERTY_TARGET = 'target';
var CSV_FIELD_DU = 'du';
var CSV_FIELD_GROUP = 'dug';
var CSV_FIELD_SPG = 'spg';
var CSV_FIELD_TARGET = 'target';
var CSV_FIELD_MAPPED = 'mapped';
var PROPERTY_CSV_FIELD_MAP = {
  [PROPERTY_DU]: CSV_FIELD_DU,
  [PROPERTY_GROUP]: CSV_FIELD_GROUP,
  [PROPERTY_SPG]: CSV_FIELD_SPG,
  [PROPERTY_TARGET]: CSV_FIELD_TARGET,
};
var ADDRESS_TERM = '__address';
var CITY_TERM = '__city';
var COUNTRY_TERM = '__country';
var LATITUDE_TERM = '__latitude';
var LONGITUDE_TERM = '__longitude';
var REGION_TERM = '__region';
var POSTCODE_TERM = '__postCode';
var TERMS_AND_VALUES_DEFAULT = {
  [CSV_FIELD_DU]: {
    [ADDRESS_TERM]: [],
    [CITY_TERM]: [],
    [COUNTRY_TERM]: [],
    [REGION_TERM]: [],
    [POSTCODE_TERM]: [],
    [LATITUDE_TERM]: [],
    [LONGITUDE_TERM]: [],
  },
  [CSV_FIELD_GROUP]: {},
  [CSV_FIELD_SPG]: {},
  [CSV_FIELD_TARGET]: {},
  [CSV_FIELD_MAPPED]: {},
};
var TOTAL_GROUP_INITIAL_DATA = {
  count: 0,
  employeePercentageDailyWastedTimeSum: 0,
  employeePercentageDailyWastedTimeMean: 0,
  employeeWastedDaysSum: 0,
  employeeWastedDaysMean: 0,
  employeeDailyWastedMinutesSum: 0,
  employeeDailyWastedMinutesMean: 0,
  employeeOperationalLossSum: 0,
  employeeOperationalLossMean: 0,
  employeeRevenueLossSum: 0,
  employeeRevenueLossMean: 0,
  employeeQualityScoreSum: 0,
  employeeQualityScoreMean: 0,
  employeeHxScoreWeightSum: 0,
  employeeHxScoreSum: 0,
  logOfValue: 0,
  employeeOfficeDuration: 0,
  employeeRemoteDuration: 0,
};
var OP_LOSS_CATEGORY_ABOVE_5K_VALUE = 5e3;
var OP_LOSS_CATEGORY_4K_TO_5K_VALUE = 4e3;
var OP_LOSS_CATEGORY_3K_TO_4K_VALUE = 3e3;
var OP_LOSS_CATEGORY_2K_TO_3K_VALUE = 2e3;
var OP_LOSS_CATEGORY_1K_TO_2K_VALUE = 1e3;
var OP_LOSS_CATEGORY_HALFK_TO_1K_VALUE = 500;
var OP_LOSS_CATEGORY_ABOVE_5K = '>\xA35k';
var OP_LOSS_CATEGORY_4K_TO_5K = '\xA34k-\xA35k';
var OP_LOSS_CATEGORY_3K_TO_4K = '\xA33k-\xA34k';
var OP_LOSS_CATEGORY_2K_TO_3K = '\xA32k-\xA33k';
var OP_LOSS_CATEGORY_1K_TO_2K = '\xA31k-\xA32k';
var OP_LOSS_CATEGORY_HALFK_TO_1K = '\xA30.5k-\xA31k';
var OP_LOSS_CATEGORY_LESS_THAN_HALFK = '<\xA30.5k';
var SUFFERING_GROUP_FILTER = -1;
var UNKNOWN_TERM_CATEGORY = '__unknown__';
var EQUALITY_BOUNDARIES = [0.07, 0.15, 0.25, 0.4];
var EQUALITY_GRADE_A = 'A';
var EQUALITY_GRADE_B = 'B';
var EQUALITY_GRADE_C = 'C';
var EQUALITY_GRADE_D = 'D';
var EQUALITY_GRADE_E = 'E';
var CO2_SAVINGS_PER_MONTH = 1.35;
var ENVIRONMENT_ABLE = 'Able';
var ENVIRONMENT_STRUGGLING = 'Struggling';
var ENVIRONMENT_CHART_BAR_ORDER = {
  [ENVIRONMENT_ABLE]: 1,
  [ENVIRONMENT_STRUGGLING]: 2,
};
var DEFAULT_HYBRID_LOWER_PERCENT = 5;
var DEFAULT_HYBRID_UPPER_PERCENT = 95;
var DEFAULT_WORKING_DAYS = 240;
var DEFAULT_TIME_WORKED_PER_DAY = 480;
var DEFAULT_HYBRID_LOWER = DEFAULT_HYBRID_LOWER_PERCENT / 100;
var DEFAULT_HYBRID_UPPER = DEFAULT_HYBRID_UPPER_PERCENT / 100;
var CO2_REDUCTION_LABEL = 'Commuting impact (CO2)';
var DEFAULT_CURRENCY = '\xA3';

// lambda/parse/report/locations.ts
var updateScoreCountCategory = (scoreCounts, score) => {
  switch (true) {
    case score < 5:
      scoreCounts.suffering += 1;
      break;
    case score < 8:
      scoreCounts.frustrated += 1;
      break;
    default:
      scoreCounts.satisfied += 1;
      break;
  }
  return scoreCounts;
};
var calculateScoresPerLocation = (
  employeeData,
  { hybridLower, hybridUpper } = {
    hybridLower: DEFAULT_HYBRID_LOWER,
    hybridUpper: DEFAULT_HYBRID_UPPER,
    workingDays: DEFAULT_WORKING_DAYS,
  },
  personaTerm
) => {
  const defaultLocation = {
    count: 0,
    scoreSum: 0,
    weightSum: 0,
    hxScore: 0,
    scoreCounts: { total: 0, suffering: 0, frustrated: 0, satisfied: 0 },
  };
  const defaultHybrid = { count: 0, hybridBreakdown: { 0: 0, 20: 0, 40: 0, 60: 0, 80: 0 } };
  const combinedLocations = {
    all: {
      office: (0, import_cloneDeep.default)(defaultLocation),
      remote: (0, import_cloneDeep.default)(defaultLocation),
      hybrid: (0, import_cloneDeep.default)(defaultHybrid),
    },
    personas: {},
    offices: {},
  };
  employeeData.forEach((employee) => {
    const { locations } = employee;
    const offices = Object.fromEntries(Object.entries(locations).filter(([l]) => l !== 'remote'));
    const hasOffices = Object.keys(offices).length > 0;
    const hasRemote = !!locations.remote.locations.length;
    const officeDuration = Object.values(offices).reduce((p, o) => p + o.maxDuration, 0);
    const remoteDuration = locations.remote.maxDuration ?? 0;
    const totalDuration = officeDuration + remoteDuration;
    const hybridPercent = officeDuration / (totalDuration || 1);
    employee.officeDuration = officeDuration;
    employee.remoteDuration = remoteDuration;
    employee.hybridPercent = hybridPercent;
    employee.remote = false;
    employee.office = false;
    employee.hybrid = false;
    const employeeTerms = [];
    const terms = employee[personaTerm.termType];
    if (terms[personaTerm.value]) {
      employeeTerms.push(...terms[personaTerm.value]);
      employeeTerms.forEach((term) => {
        if (combinedLocations.personas && term in combinedLocations.personas) {
          combinedLocations.personas[term].count += 1;
        } else {
          if (!combinedLocations.personas) {
            combinedLocations.personas = {};
          }
          combinedLocations.personas[term] = {
            count: 1,
            office: (0, import_cloneDeep.default)(defaultLocation),
            remote: (0, import_cloneDeep.default)(defaultLocation),
            hybrid: (0, import_cloneDeep.default)(defaultHybrid),
          };
        }
      });
    }
    const updatePersonaCount = (key) =>
      employeeTerms.forEach((term) => {
        if (hasKey(combinedLocations.personas[term], key)) {
          combinedLocations.personas[term][key].count += 1;
        }
      });
    const updatePersonaHybridBreakdownCount = (key) =>
      employeeTerms.forEach((term) => {
        if (hasKey(combinedLocations.personas[term].hybrid.hybridBreakdown, key)) {
          combinedLocations.personas[term].hybrid.hybridBreakdown[key] += 1;
        }
      });
    if (hasOffices && hasRemote) {
      if (hybridPercent <= hybridLower) {
        combinedLocations.all.remote.count += 1;
        updatePersonaCount('remote');
        employee.remote = true;
      } else if (hybridPercent >= hybridUpper) {
        combinedLocations.all.office.count += 1;
        updatePersonaCount('office');
        employee.office = true;
      } else {
        combinedLocations.all.hybrid.count += 1;
        updatePersonaCount('hybrid');
        employee.hybrid = true;
        switch (true) {
          case hybridPercent < 0.2: {
            combinedLocations.all.hybrid.hybridBreakdown['0'] += 1;
            updatePersonaHybridBreakdownCount('0');
            break;
          }
          case hybridPercent < 0.4: {
            combinedLocations.all.hybrid.hybridBreakdown['20'] += 1;
            updatePersonaHybridBreakdownCount('20');
            break;
          }
          case hybridPercent < 0.6: {
            combinedLocations.all.hybrid.hybridBreakdown['40'] += 1;
            updatePersonaHybridBreakdownCount('40');
            break;
          }
          case hybridPercent < 0.8: {
            combinedLocations.all.hybrid.hybridBreakdown['60'] += 1;
            updatePersonaHybridBreakdownCount('60');
            break;
          }
          case hybridPercent < 1: {
            combinedLocations.all.hybrid.hybridBreakdown['80'] += 1;
            updatePersonaHybridBreakdownCount('80');
            break;
          }
        }
      }
    } else if (hasOffices && !hasRemote) {
      combinedLocations.all.office.count += 1;
      updatePersonaCount('office');
      employee.office = true;
    } else {
      combinedLocations.all.remote.count += 1;
      updatePersonaCount('remote');
      employee.remote = true;
    }
    Object.entries(locations).forEach(([locationKey, location]) => {
      let scoreKey = 'office';
      const locationScore = location.hxScore;
      if (locationKey === 'remote') {
        scoreKey = 'remote';
      } else {
        if (locationKey in combinedLocations.offices) {
          combinedLocations.offices[locationKey].count += 1;
          combinedLocations.offices[locationKey].scoreCounts.total += 1;
          combinedLocations.offices[locationKey].scoreSum += location.hxScore;
          combinedLocations.offices[locationKey].weightSum += location.weightSum;
        } else {
          combinedLocations.offices[locationKey] = {
            count: 1,
            hxScore: location.hxScore,
            scoreSum: location.hxScore,
            weightSum: location.weightSum,
            scoreCounts: {
              total: 1,
              suffering: 0,
              frustrated: 0,
              satisfied: 0,
            },
          };
        }
        combinedLocations.offices[locationKey].scoreCounts = updateScoreCountCategory(
          combinedLocations.offices[locationKey].scoreCounts,
          locationScore
        );
      }
      if (hasKey(combinedLocations.all, scoreKey)) {
        const parsedLocation = combinedLocations.all[scoreKey];
        parsedLocation.scoreCounts.total += 1;
        parsedLocation.scoreCounts = updateScoreCountCategory(parsedLocation.scoreCounts, locationScore);
        parsedLocation.scoreSum += location.hxScore;
        parsedLocation.weightSum += location.weightSum;
      }
      employeeTerms.forEach((term) => {
        if (hasKey(combinedLocations.personas[term], scoreKey)) {
          const personaLocation = combinedLocations.personas[term][scoreKey];
          personaLocation.scoreCounts.total += 1;
          personaLocation.scoreCounts = updateScoreCountCategory(personaLocation.scoreCounts, locationScore);
          personaLocation.scoreSum += location.hxScore;
          personaLocation.weightSum += location.weightSum;
        }
      });
    });
  });
  combinedLocations.all.office.hxScore =
    combinedLocations.all.office.scoreSum / (combinedLocations.all.office.scoreCounts.total || 1);
  combinedLocations.all.remote.hxScore =
    combinedLocations.all.remote.scoreSum / (combinedLocations.all.remote.scoreCounts.total || 1);
  Object.keys(combinedLocations.personas).forEach((term) => {
    combinedLocations.personas[term].office.hxScore =
      combinedLocations.personas[term].office.scoreSum /
      (combinedLocations.personas[term].office.scoreCounts.total || 1);
    combinedLocations.personas[term].remote.hxScore =
      combinedLocations.personas[term].remote.scoreSum /
      (combinedLocations.personas[term].remote.scoreCounts.total || 1);
  });
  Object.keys(combinedLocations.offices).forEach((office) => {
    combinedLocations.offices[office].hxScore =
      combinedLocations.offices[office].scoreSum / (combinedLocations.offices[office].scoreCounts.total || 1);
  });
  return combinedLocations;
};

// lambda/parse/report/chart-data.ts
var getWellbeingChartData = (wellbeingChartGroup) => {
  const emptyData = Object.fromEntries(Array.from({ length: 32 }, (v, i) => [i, 0]));
  const wellbeingChart = wellbeingChartGroup
    .order((p) => p.employeeWastedDaysMean)
    .top(Infinity)
    .filter((p) => p.key !== SUFFERING_GROUP_FILTER)
    .map((p) => ({ days: p.key, count: p.value.count }));
  if (wellbeingChart.length > 0) {
    const chartData = emptyData;
    wellbeingChart.forEach((p) => {
      chartData[p.days] = p.count;
    });
    return chartData;
  }
  return emptyData;
};
var getPayrollChartData = (payrollChartGroup) => {
  const chartData = {};
  const tooltipData = {};
  payrollChartGroup.top(Infinity).forEach(({ key, value }) => {
    chartData[key] = value.employeeOperationalLossMean;
    tooltipData[key] = {
      employees: value.count,
    };
  });
  return { chartData, tooltipData };
};
var getRevenueChartData = (revenueChartGroup) => {
  const chartData = {};
  const tooltipData = {};
  revenueChartGroup.all().forEach(({ key, value }) => {
    if (key !== UNKNOWN_TERM_CATEGORY) {
      chartData[key] = value.employeeRevenueLossMean;
      tooltipData[key] = {
        label: key,
        mean: value.employeeOperationalLossMean,
        employees: value.count,
        wastedMinutes: value.employeeDailyWastedMinutesMean,
      };
    }
  });
  return { chartData, tooltipData };
};
var getBusinessEfficiencyChartData = (businessChartGroup) => {
  const chartData = {};
  const tooltipData = {};
  businessChartGroup.all().forEach(({ key, value }) => {
    if (key !== UNKNOWN_TERM_CATEGORY) {
      const averageDaysLost = Math.round(value.employeeWastedDaysMean);
      const totalDaysLost = Math.round(value.employeeWastedDaysSum);
      chartData[key] = averageDaysLost;
      tooltipData[key] = {
        label: key,
        employees: value.count,
        wastedDays: totalDaysLost,
        mean: averageDaysLost,
      };
    }
  });
  return { chartData, tooltipData };
};
var getInputOfficeName = (needle, inputs) => {
  for (const o of inputs) {
    if (needle === o.toLocaleLowerCase()) {
      return o;
    }
  }
  return needle;
};
var buildWorstOfficeChartData = (officeLocations, inputLocations, keySitesInput, upgradingInput) => {
  const all = {};
  const worst10 = {};
  const keySites = {};
  const upgrading = {};
  const keySitesCheck = keySitesInput.map((s) => s.toLocaleLowerCase());
  const upgradingCheck = upgradingInput.map((s) => s.toLocaleLowerCase());
  const offices = Object.entries(officeLocations).map(([office, locationData]) => ({ office, ...locationData }));
  offices.sort((a, b) => a.hxScore - b.hxScore);
  offices.forEach((location, index) => {
    const { office, hxScore, count: employeeCount } = location;
    const officeName = getInputOfficeName(office, inputLocations);
    const officeLower = office.toLocaleLowerCase();
    const chartEntry = { hxScore, employeeCount };
    all[officeName] = chartEntry;
    if (index < 10) {
      worst10[officeName] = chartEntry;
    }
    if (keySitesCheck.includes(officeLower)) {
      keySites[officeName] = chartEntry;
    }
    if (upgradingCheck.includes(officeLower)) {
      upgrading[officeName] = chartEntry;
    }
  });
  return {
    all,
    ['Worst10' /* Worst10 */]: worst10,
    ['KeySites' /* KeySites */]: keySites,
    ['Upgrading' /* Upgrading */]: upgrading,
  };
};

// lambda/parse/report/crossfilter.ts
var import_crossfilter2 = __toESM(require_crossfilter());

// lambda/parse/report/employee.ts
var import_cloneDeep2 = __toESM(require_cloneDeep());
var calculateHxScoreForAllEmployees = (employeeData) => {
  const hxScores = employeeData.reduce((p, v) => p + v.employeeHxScore, 0);
  if (Number.isNaN(hxScores)) {
    return 0;
  }
  return hxScores / (employeeData.length || 1);
};
var calculateScoreBoundingsForAllEmployees = (employeeData) => {
  const buckets = {
    suffering: {
      employeeCount: 0,
      countValues: {
        1: 0,
        2: 0,
        3: 0,
        4: 0,
      },
    },
    frustrated: {
      employeeCount: 0,
      countValues: {
        5: 0,
        6: 0,
        7: 0,
      },
    },
    satisfied: {
      employeeCount: 0,
      countValues: {
        8: 0,
        9: 0,
        10: 0,
      },
    },
  };
  employeeData.forEach((employee) => {
    const score = round(employee.employeeHxScore, 12);
    if (score < 1) {
      console.warn('DU score < 1', employee.User);
      buckets.suffering.countValues['1'] += 1;
      buckets.suffering.employeeCount += 1;
    } else if (score < 2) {
      buckets.suffering.countValues['1'] += 1;
      buckets.suffering.employeeCount += 1;
    } else if (score < 3) {
      buckets.suffering.countValues['2'] += 1;
      buckets.suffering.employeeCount += 1;
    } else if (score < 4) {
      buckets.suffering.countValues['3'] += 1;
      buckets.suffering.employeeCount += 1;
    } else if (score < 5) {
      buckets.suffering.countValues['4'] += 1;
      buckets.suffering.employeeCount += 1;
    } else if (score < 6) {
      buckets.frustrated.countValues['5'] += 1;
      buckets.frustrated.employeeCount += 1;
    } else if (score < 7) {
      buckets.frustrated.countValues['6'] += 1;
      buckets.frustrated.employeeCount += 1;
    } else if (score < 8) {
      buckets.frustrated.countValues['7'] += 1;
      buckets.frustrated.employeeCount += 1;
    } else if (score < 9) {
      buckets.satisfied.countValues['8'] += 1;
      buckets.satisfied.employeeCount += 1;
    } else if (score < 10) {
      buckets.satisfied.countValues['9'] += 1;
      buckets.satisfied.employeeCount += 1;
    } else {
      buckets.satisfied.countValues['10'] += 1;
      buckets.satisfied.employeeCount += 1;
    }
  });
  return buckets;
};
var getEmployeePersonaSettings = (personaSettings, employee) => {
  const { termType, term } = personaSettings;
  const employeePersonaTypes = employee[termType];
  const [employeePersona] = employeePersonaTypes[term];
  const settings = personaSettings.inputAssumptions[employeePersona];
  return settings;
};

// lambda/parse/report/crossfilter.ts
var cfEmployeeKeys = [
  'employeePercentageDailyWastedTime',
  'employeeDailyWastedMinutes',
  'employeeOperationalLoss',
  'employeeRevenueLoss',
  'employeeQualityScore',
  'employeeScoreWeight',
  'employeeHxScore',
];
var updateTotalGroupOnNewRecord = (personaSettings, levers) => (p, v) => {
  if (cfEmployeeKeys.some((k) => Number.isNaN(v[k]))) {
    return p;
  }
  const settings = getEmployeePersonaSettings(personaSettings, v);
  const timeWorkedPerDay = settings?.TIME_WORKED_PER_DAY ?? DEFAULT_TIME_WORKED_PER_DAY;
  p.count += 1;
  p.employeePercentageDailyWastedTimeSum += v.employeePercentageDailyWastedTime;
  p.employeePercentageDailyWastedTimeMean = p.count ? p.employeePercentageDailyWastedTimeSum / p.count : 0;
  p.employeeDailyWastedMinutesSum += v.employeeDailyWastedMinutes;
  p.employeeDailyWastedMinutesMean = p.count ? p.employeeDailyWastedMinutesSum / p.count : 0;
  p.employeeWastedDaysSum += (v.employeeDailyWastedMinutes / timeWorkedPerDay) * levers.workingDays;
  p.employeeWastedDaysMean = p.count ? p.employeeWastedDaysSum / p.count : 0;
  p.employeeOperationalLossSum += v.employeeOperationalLoss;
  p.employeeOperationalLossMean = p.count ? p.employeeOperationalLossSum / p.count : 0;
  p.employeeRevenueLossSum += v.employeeRevenueLoss;
  p.employeeRevenueLossMean = p.count ? p.employeeRevenueLossSum / p.count : 0;
  p.employeeQualityScoreSum += v.employeeQualityScore;
  p.employeeQualityScoreMean = p.count ? p.employeeQualityScoreSum / p.count : 0;
  p.logOfValue = p.count ? Math.log(p.count) / Math.log(10) : 0;
  p.employeeOfficeDuration += v.officeDuration;
  p.employeeRemoteDuration += v.remoteDuration;
  p.employeeHxScoreWeightSum += v.employeeScoreWeight;
  p.employeeHxScoreSum += v.employeeHxScore * v.employeeScoreWeight;
  return p;
};
var updateTotalGroupOnRemoveRecord = (personaSettings, levers) => (p, v) => {
  if (cfEmployeeKeys.some((k) => Number.isNaN(v[k]))) {
    return p;
  }
  const settings = getEmployeePersonaSettings(personaSettings, v);
  const timeWorkedPerDay = settings?.TIME_WORKED_PER_DAY ?? DEFAULT_TIME_WORKED_PER_DAY;
  p.count -= 1;
  p.employeePercentageDailyWastedTimeSum -= v.employeePercentageDailyWastedTime;
  p.employeePercentageDailyWastedTimeMean = p.count ? p.employeePercentageDailyWastedTimeSum / p.count : 0;
  p.employeeDailyWastedMinutesSum -= v.employeeDailyWastedMinutes;
  p.employeeDailyWastedMinutesMean = p.count ? p.employeeDailyWastedMinutesSum / p.count : 0;
  p.employeeWastedDaysSum -= (v.employeeDailyWastedMinutes / timeWorkedPerDay) * levers.workingDays;
  p.employeeWastedDaysMean = p.count ? p.employeeWastedDaysSum / p.count : 0;
  p.employeeOperationalLossSum -= v.employeeOperationalLoss;
  p.employeeOperationalLossMean = p.count ? p.employeeOperationalLossSum / p.count : 0;
  p.employeeRevenueLossSum -= v.employeeRevenueLoss;
  p.employeeRevenueLossMean = p.count ? p.employeeRevenueLossSum / p.count : 0;
  p.employeeQualityScoreSum -= v.employeeQualityScore;
  p.employeeQualityScoreMean = p.count ? p.employeeQualityScoreSum / p.count : 0;
  p.logOfValue = p.count ? Math.log(p.count) / Math.log(10) : 0;
  p.employeeOfficeDuration -= v.employeeOfficeDuration;
  p.employeeRemoteDuration -= v.employeeRemoteDuration;
  p.employeeHxScoreWeightSum -= v.employeeScoreWeight;
  p.employeeHxScoreSum -= v.employeeHxScore * v.employeeScoreWeight;
  return p;
};
var hxScoreBandings = (d) => {
  if (!d || d.employeeHxScore === null || d.employeeHxScore === void 0 || Number.isNaN(d.employeeHxScore)) {
    return 'suffering';
  }
  switch (true) {
    case d.employeeHxScore < 5:
      return 'suffering';
    case d.employeeHxScore < 8:
      return 'frustrated';
    default:
      return 'satisfied';
  }
};
var wellbeingChartDays = (personaSettings, levers) => (d) => {
  if (d.employeeHxScore < 5) {
    const settings = getEmployeePersonaSettings(personaSettings, d);
    const timeWorkedPerDay = settings?.TIME_WORKED_PER_DAY ?? DEFAULT_TIME_WORKED_PER_DAY;
    return Number.isNaN(d.employeeDailyWastedMinutes)
      ? SUFFERING_GROUP_FILTER
      : Math.max(0, Math.round((d.employeeDailyWastedMinutes / (timeWorkedPerDay || 1)) * levers.workingDays));
  }
  return SUFFERING_GROUP_FILTER;
};
var opLossCategories = (d) => {
  if (d.employeeOperationalLoss > OP_LOSS_CATEGORY_ABOVE_5K_VALUE) {
    return OP_LOSS_CATEGORY_ABOVE_5K;
  } else if (d.employeeOperationalLoss > OP_LOSS_CATEGORY_4K_TO_5K_VALUE) {
    return OP_LOSS_CATEGORY_4K_TO_5K;
  } else if (d.employeeOperationalLoss > OP_LOSS_CATEGORY_3K_TO_4K_VALUE) {
    return OP_LOSS_CATEGORY_3K_TO_4K;
  } else if (d.employeeOperationalLoss > OP_LOSS_CATEGORY_2K_TO_3K_VALUE) {
    return OP_LOSS_CATEGORY_2K_TO_3K;
  } else if (d.employeeOperationalLoss > OP_LOSS_CATEGORY_1K_TO_2K_VALUE) {
    return OP_LOSS_CATEGORY_1K_TO_2K;
  } else if (d.employeeOperationalLoss >= OP_LOSS_CATEGORY_HALFK_TO_1K_VALUE) {
    return OP_LOSS_CATEGORY_HALFK_TO_1K;
  } else {
    return OP_LOSS_CATEGORY_LESS_THAN_HALFK;
  }
};
var personaCategories =
  ({ termType, value }) =>
  (d) => {
    const termList = d[termType][value];
    if (termList && termList.length > 0) {
      return termList[0];
    } else {
      return UNKNOWN_TERM_CATEGORY;
    }
  };
var createCrossfilterGroups = (employeeData, personaSettings, levers) => {
  const cf = (0, import_crossfilter2.default)(employeeData);
  const personaTerm = { termType: personaSettings.termType, value: personaSettings.term };
  const addToTotalGroup = updateTotalGroupOnNewRecord(personaSettings, levers);
  const removeFromTotalGroup = updateTotalGroupOnRemoveRecord(personaSettings, levers);
  const totalDim = cf.dimension(() => 'totals');
  const totalGroup = totalDim.group().reduce(addToTotalGroup, removeFromTotalGroup, () => ({
    ...TOTAL_GROUP_INITIAL_DATA,
  }));
  const hxDim = cf.dimension(hxScoreBandings);
  const hxGroup = hxDim.group().reduce(addToTotalGroup, removeFromTotalGroup, () => ({
    ...TOTAL_GROUP_INITIAL_DATA,
  }));
  const wellbeingChartDim = cf.dimension(wellbeingChartDays(personaSettings, levers));
  const wellbeingChartGroup = wellbeingChartDim.group().reduce(addToTotalGroup, removeFromTotalGroup, () => ({
    ...TOTAL_GROUP_INITIAL_DATA,
  }));
  const payrollChartDim = cf.dimension(opLossCategories);
  const payrollChartGroup = payrollChartDim.group().reduce(addToTotalGroup, removeFromTotalGroup, () => ({
    ...TOTAL_GROUP_INITIAL_DATA,
  }));
  const personaDim = cf.dimension(personaCategories(personaTerm));
  const revenueChartGroup = personaDim.group().reduce(addToTotalGroup, removeFromTotalGroup, () => ({
    ...TOTAL_GROUP_INITIAL_DATA,
  }));
  const businessEfficiencyChartGroup = personaDim.group().reduce(addToTotalGroup, removeFromTotalGroup, () => ({
    ...TOTAL_GROUP_INITIAL_DATA,
  }));
  return {
    totalGroup,
    hxGroup,
    wellbeingChartGroup,
    payrollChartGroup,
    revenueChartGroup,
    businessEfficiencyChartGroup,
  };
};

// lambda/parse/report/metrics.ts
function isNegativeZero(value) {
  return Object.is(value, -0);
}
var getWellbeingMetric = (hxGroup) => {
  const hxGroupBandings = hxGroup.order((p) => p.employeeHxScoreSum).all();
  const suffering = hxGroupBandings.filter((p) => p.key === 'suffering').pop();
  const total = hxGroupBandings.reduce((count, band) => count + band.value.count, 0);
  if (suffering && suffering.value.count) {
    const value = (suffering.value.count / (total || 1)) * 100;
    return { value, delta: 0 };
  }
  return { value: 0, delta: 0 };
};
var getWellbeingDifferentialMetric = (hxGroup) => {
  const hxGroupBandings = hxGroup.order((p) => p.employeeHxScoreSum).all();
  const suffering = hxGroupBandings.filter((p) => p.key === 'suffering').pop();
  const satisfied = hxGroupBandings.filter((p) => p.key === 'satisfied').pop();
  const total = hxGroupBandings.reduce((count, band) => count + band.value.count, 0);
  if (suffering && suffering.value.count && satisfied && satisfied.value.count) {
    const sufferingTimeLost = suffering.value.employeeDailyWastedMinutesMean;
    const satisfiedTimeLost = satisfied.value.employeeDailyWastedMinutesMean;
    const topPercent = (satisfied.value.count / (total || 1)) * 100;
    const timeDiff = sufferingTimeLost / (satisfiedTimeLost || 1);
    return { topPercent, scalar: round(timeDiff, 2) };
  }
  return { topPercent: 0, scalar: 0 };
};
var getEfficiencyMetric = (totalGroup) => {
  const totals = totalGroup
    .order((p) => p.employeeDailyWastedMinutesMean)
    .top(1)
    .pop();
  const wastedDays = totals?.value.employeeWastedDaysMean ?? 0;
  if (isNegativeZero(wastedDays)) {
    return { value: 0, delta: 0 };
  }
  return { value: wastedDays, delta: 0 };
};
var getRevenueMetric = (totalGroup) => {
  const totals = totalGroup
    .order((p) => p.employeeRevenueLossMean)
    .top(1)
    .pop();
  let value = Math.round((totals?.value.employeeRevenueLossMean ?? 0) * (totals?.value.count ?? 0));
  if (isNegativeZero(value)) {
    value = 0;
  }
  return { value, delta: 0 };
};
var getPayrollMetric = (totalGroup) => {
  const totals = totalGroup
    .order((p) => p.employeeDailyWastedMinutesMean)
    .top(1)
    .pop();
  let value = Math.round((totals?.value.employeeOperationalLossMean ?? 0) * (totals?.value.count ?? 0));
  if (isNegativeZero(value)) {
    value = 0;
  }
  return { value, delta: 0 };
};
var calculateGiniCoefficient = (distribution) => {
  const sum = (vals) => vals.reduce((p, v) => p + v, 0);
  const x = Object.keys(distribution).map((x2) => Number(x2));
  const counts = Object.values(distribution);
  const n = sum(counts);
  const m = x.length;
  const denominator = 2 * n * sum(counts.map((v, idx) => v * x[idx]));
  let outerSum = 0;
  for (let i = 0; i < m; i += 1) {
    let innerSum = 0;
    for (let j = 0; j < m; j += 1) {
      innerSum += counts[j] * Math.abs(i - j);
    }
    outerSum += counts[i] * innerSum;
  }
  return outerSum / denominator;
};
var getEqualityGrade = (gini) => {
  if (gini <= EQUALITY_BOUNDARIES[0]) {
    return EQUALITY_GRADE_A;
  } else if (gini <= EQUALITY_BOUNDARIES[1]) {
    return EQUALITY_GRADE_B;
  } else if (gini <= EQUALITY_BOUNDARIES[2]) {
    return EQUALITY_GRADE_C;
  } else if (gini <= EQUALITY_BOUNDARIES[3]) {
    return EQUALITY_GRADE_D;
  } else {
    return EQUALITY_GRADE_E;
  }
};
var getEqualityMetric = (scoreBoundings) => {
  const distribution = {
    1: scoreBoundings.suffering.countValues[1],
    2: scoreBoundings.suffering.countValues[2],
    3: scoreBoundings.suffering.countValues[3],
    4: scoreBoundings.suffering.countValues[4],
    5: scoreBoundings.frustrated.countValues[5],
    6: scoreBoundings.frustrated.countValues[6],
    7: scoreBoundings.frustrated.countValues[7],
    8: scoreBoundings.satisfied.countValues[8],
    9: scoreBoundings.satisfied.countValues[9],
    10: scoreBoundings.satisfied.countValues[10],
  };
  const gini = calculateGiniCoefficient(distribution);
  const value = getEqualityGrade(gini);
  console.log('hx distribution', distribution);
  console.log('gini coefficient', gini);
  console.log('grade', value);
  return { value, delta: 0 };
};
var calculateEnvironmentMetric = (officeDuration, remoteDuration, employeeCount) => {
  const totalDuration = officeDuration + remoteDuration;
  const officeProportion = officeDuration / (totalDuration || 1);
  const workingDaysPerMonth = 20;
  return CO2_SAVINGS_PER_MONTH * employeeCount * workingDaysPerMonth * officeProportion;
};
var getEnvironmentMetric = (hxGroup) => {
  const hxGroupBandings = hxGroup.order((p) => p.employeeHxScoreSum).all();
  const suffering = hxGroupBandings.filter((p) => p.key === 'suffering').pop();
  const officeDuration = suffering?.value.employeeOfficeDuration ?? 0;
  const remoteDuration = suffering?.value.employeeRemoteDuration ?? 0;
  const kg = calculateEnvironmentMetric(officeDuration, remoteDuration, suffering?.value.count ?? 0);
  return { value: kg, delta: 0 };
};
var getAverageDaysLostMetric = (totalGroup) => {
  const totals = totalGroup
    .order((p) => p.employeeDailyWastedMinutesMean)
    .top(1)
    .pop();
  const wastedDays = totals?.value.employeeWastedDaysMean ?? 0;
  return wastedDays;
};
var getBusinessEfficiencyMetric = (hxGroup) => {
  const hxGroups = hxGroup.all();
  const metrics = {};
  hxGroups.forEach(({ key, value }) => {
    metrics[key] = value.employeeWastedDaysMean;
  });
  return metrics;
};
var getSufferingMetrics = (hxGroup) => {
  const suffering = hxGroup
    .order((p) => p.employeeHxScoreSum)
    .top(3)
    .filter((p) => p.key === 'suffering')
    .pop();
  if (suffering) {
    const payroll = (suffering?.value.employeeOperationalLossMean ?? 0) * (suffering?.value.count ?? 0);
    const revenue = (suffering?.value.employeeRevenueLossMean ?? 0) * (suffering?.value.count ?? 0);
    return { payroll, revenue };
  }
  return { payroll: 0, revenue: 0 };
};
var getSufferingAverages = (hxGroup) => {
  const suffering = hxGroup
    .order((p) => p.employeeHxScoreSum)
    .top(3)
    .filter((p) => p.key === 'suffering')
    .pop();
  if (suffering) {
    const wastedDays = (suffering.value.employeeWastedDaysSum || 0) / (suffering.value.count || 1);
    const payroll = (suffering.value.employeeOperationalLossSum || 0) / (suffering.value.count || 1);
    const revenue = (suffering.value.employeeRevenueLossSum || 0) / (suffering.value.count || 1);
    const officeDuration = suffering?.value.employeeOfficeDuration || 0;
    const remoteDuration = suffering?.value.employeeRemoteDuration || 0;
    const environment =
      calculateEnvironmentMetric(officeDuration, remoteDuration, suffering.value.count || 0) /
      (suffering.value.count || 1);
    return { payroll, revenue, environment, wastedDays };
  }
  return { payroll: 0, revenue: 0, environment: 0, wastedDays: 0 };
};

// lambda/parse/report/persona.ts
var buildPersonaHybridBreakdown = (personaLocations) =>
  Object.entries(personaLocations).reduce(
    (obj, [term, personaLocation]) => ({
      ...obj,
      [term]: {
        total: personaLocation.count,
        home: personaLocation.remote.count,
        office: personaLocation.office.count,
        hybrid: personaLocation.hybrid.count,
        hybridBreakdown: { ...personaLocation.hybrid.hybridBreakdown },
      },
    }),
    {}
  );
var buildPersonaWorkingLocations = (personaLocations) =>
  Object.entries(personaLocations).reduce(
    (obj, [term, personaLocation]) => ({
      ...obj,
      [term]: {
        home: {
          score: personaLocation.remote.hxScore,
          percentages: {
            suffering: calculatePercentage(
              personaLocation.remote.scoreCounts.suffering,
              personaLocation.remote.scoreCounts.total,
              false
            ),
            frustrated: calculatePercentage(
              personaLocation.remote.scoreCounts.frustrated,
              personaLocation.remote.scoreCounts.total,
              false
            ),
            satisfied: calculatePercentage(
              personaLocation.remote.scoreCounts.satisfied,
              personaLocation.remote.scoreCounts.total,
              false
            ),
          },
        },
        office: {
          score: personaLocation.office.hxScore,
          percentages: {
            suffering: calculatePercentage(
              personaLocation.office.scoreCounts.suffering,
              personaLocation.office.scoreCounts.total,
              false
            ),
            frustrated: calculatePercentage(
              personaLocation.office.scoreCounts.frustrated,
              personaLocation.office.scoreCounts.total,
              false
            ),
            satisfied: calculatePercentage(
              personaLocation.office.scoreCounts.satisfied,
              personaLocation.office.scoreCounts.total,
              false
            ),
          },
        },
      },
    }),
    {}
  );

// lambda/parse/report/parse.ts
var buildReportData = (
  employeeData,
  locations,
  organisation,
  personaSettings,
  levers,
  inputLocations,
  keySites = [],
  upgrading = []
) => {
  const {
    totalGroup,
    hxGroup,
    wellbeingChartGroup,
    payrollChartGroup,
    revenueChartGroup,
    businessEfficiencyChartGroup,
  } = createCrossfilterGroups(employeeData, personaSettings, levers);
  const wellbeingChartData = getWellbeingChartData(wellbeingChartGroup);
  const { chartData: revenueChartData, tooltipData: revenueChartTooltip } = getRevenueChartData(revenueChartGroup);
  const { chartData: payrollChartData, tooltipData: payrollChartTooltip } = getPayrollChartData(payrollChartGroup);
  const { chartData: businessChartData, tooltipData: businessChartTooltip } =
    getBusinessEfficiencyChartData(businessEfficiencyChartGroup);
  const scoreBoundings = calculateScoreBoundingsForAllEmployees(employeeData);
  const efficiency = getEfficiencyMetric(totalGroup);
  const equality = getEqualityMetric(scoreBoundings);
  const payroll = getPayrollMetric(totalGroup);
  const revenue = getRevenueMetric(totalGroup);
  const businessMetrics = getBusinessEfficiencyMetric(hxGroup);
  const wellbeing = getWellbeingMetric(hxGroup);
  const wellbeingVars = getWellbeingDifferentialMetric(hxGroup);
  const averageDays = getAverageDaysLostMetric(totalGroup);
  const sufferingAverages = getSufferingAverages(hxGroup);
  const sufferingMetrics = getSufferingMetrics(hxGroup);
  const environment = getEnvironmentMetric(hxGroup);
  const currency = DEFAULT_CURRENCY;
  const json = {
    organisation,
    hxScore: { value: calculateHxScoreForAllEmployees(employeeData), delta: 0 },
    employees: {
      total: employeeData.length,
      home: locations.all.remote.count,
      office: locations.all.office.count,
      hybrid: locations.all.hybrid.count,
      hybridBreakdown: locations.all.hybrid.hybridBreakdown,
      levers: {
        hybridLower: levers.hybridLower,
        hybridUpper: levers.hybridUpper,
      },
      personas: buildPersonaHybridBreakdown(locations.personas),
    },
    scores: scoreBoundings,
    workingLocations: {
      office: {
        score: locations.all.office.hxScore,
        percentages: {
          suffering: calculatePercentage(
            locations.all.office.scoreCounts.suffering,
            locations.all.office.scoreCounts.total,
            false
          ),
          frustrated: calculatePercentage(
            locations.all.office.scoreCounts.frustrated,
            locations.all.office.scoreCounts.total,
            false
          ),
          satisfied: calculatePercentage(
            locations.all.office.scoreCounts.satisfied,
            locations.all.office.scoreCounts.total,
            false
          ),
        },
      },
      home: {
        score: locations.all.remote.hxScore,
        percentages: {
          suffering: calculatePercentage(
            locations.all.remote.scoreCounts.suffering,
            locations.all.remote.scoreCounts.total,
            false
          ),
          frustrated: calculatePercentage(
            locations.all.remote.scoreCounts.frustrated,
            locations.all.remote.scoreCounts.total,
            false
          ),
          satisfied: calculatePercentage(
            locations.all.remote.scoreCounts.satisfied,
            locations.all.remote.scoreCounts.total,
            false
          ),
        },
      },
      personas: buildPersonaWorkingLocations(locations.personas),
    },
    metrics: {
      currency,
      efficiency,
      equality,
      payroll,
      revenue,
      wellbeing,
    },
    worstOffices: buildWorstOfficeChartData(locations.offices, inputLocations, keySites, upgrading),
    blockData: {
      wellbeingBlockData: {
        title: 'Wellbeing',
        subtitle: `${constructValueDisplayString(
          wellbeing.value ?? 0
        )}% of your workforce struggle significantly to do their day to day jobs due to the experience they have with your digital workplace`,
        text: [
          'This group are having a continuously frustrating experience in the digital workplace, with constant issues using applications and carrying out basic tasks. The employees in this group lose a significant amount of working time due to waiting on the digital ecosystem.',
          `Your most adversely affected employees are losing a disproportionately large amount of time (almost ${constructValueDisplayString(
            wellbeingVars?.scalar ?? ''
          )} times more) than your top ${constructValueDisplayString(wellbeingVars?.topPercent ?? '0')}%.`,
        ],
        metrics: {
          averageDaysLost: {
            suffix: 'Days',
            value: sufferingAverages.wastedDays ?? 0,
          },
          payrollLost: {
            prefix: currency,
            value: sufferingMetrics.payroll ?? 0,
          },
          revenueOpportunity: {
            prefix: currency,
            value: sufferingMetrics.revenue ?? 0,
          },
          carbonReduction: {
            suffix: 'kg',
            value: environment.value ?? 0,
          },
        },
        table: {
          title: 'Average per employee',
          rows: [
            { label: 'Payroll Lost', value: sufferingAverages.payroll, prefix: currency },
            { label: 'Revenue Opportunity', value: sufferingAverages.revenue, prefix: currency },
            {
              label: CO2_REDUCTION_LABEL,
              value: sufferingAverages.environment ?? 0,
              suffix: 'kg',
            },
          ],
        },
        chartData: wellbeingChartData,
      },
      payrollBlockData: {
        title: 'Payroll',
        subtitle: 'Understand the financial impact of your digital friction',
        text: [
          'Calculated using wasted time per employee across a working year, combined with average payroll by department and location',
        ],
        metrics: {
          opportunity: {
            prefix: currency,
            value: payroll.value ?? 0,
          },
          averageOpportunity: {
            prefix: currency,
            value: payroll.value / (employeeData.length || 1),
          },
        },
        chartData: payrollChartData,
        chartTooltip: payrollChartTooltip,
      },
      revenueBlockData: {
        title: 'Revenue Opportunity',
        subtitle:
          "The revenue generation potential your business has if your digital world worked properly and didn't reduce productive employee time",
        text: [
          'Calculated using wasted time per employee across a working year, combined with average annual revenue generation by department in the business',
        ],
        metrics: {
          opportunity: {
            prefix: currency,
            value: revenue.value ?? 0,
          },
          averageOpportunity: {
            prefix: currency,
            value: revenue.value / (employeeData.length || 1),
          },
        },
        chartData: revenueChartData,
        chartTooltip: revenueChartTooltip,
      },
      businessBlockData: {
        title: 'Business Efficiency',
        subtitle: 'The average time lost per employee each year while they wait for the digital world to work properly',
        text: ['Calculated using wasted time per employee across a working year'],
        metrics: {
          averageDaysLost: {
            value: averageDays ?? 0,
            suffix: ' Days',
          },
          suffering: {
            value: businessMetrics.suffering ?? 0,
            suffix: ' Days',
          },
          frustrated: {
            value: businessMetrics.frustrated ?? 0,
            suffix: ' Days',
          },
          satisfied: {
            value: businessMetrics.satisfied ?? 0,
            suffix: ' Days',
          },
          personaTerm: {
            value: personaSettings.term,
          },
        },
        chartData: businessChartData,
        chartTooltip: businessChartTooltip,
      },
    },
  };
  return json;
};

// lambda/filterParse/app.ts
var app = (0, import_express.default)();
app.use(import_body_parser.default.json());
app.use(import_middleware.default.eventContext());
app.use(function (req, res, next) {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Headers', '*');
  next();
});
app.get('/filter-parse', function (req, res) {
  res.json({ success: true });
});
app.post('/filter-parse', async (req, res) => {
  try {
    const validateResult = mod
      .object({ reportId: mod.string(), dus: mod.array(mod.string()), orgId: mod.string() })
      .safeParse(req.body);
    if (!validateResult.success) {
      console.error(validateResult);
      return res.status(400).json({ error: 'Invalid request body' });
    }
    const { dus: duIds, reportId, orgId } = validateResult.data;
    const dynamoDocClient = import_lib_dynamodb3.DynamoDBDocumentClient.from(getDynamoClient());
    let report;
    try {
      report = await getReport(reportId, dynamoDocClient);
      if (!report.reportData) {
        console.error(report);
        throw new Error(`reportData missing from ${reportId}`);
      }
    } catch (err) {
      console.error(err);
      return res.status(500).json({ error: 'Could not get report record from database' });
    }
    const reportData = typeof report.reportData === 'string' ? JSON.parse(report.reportData) : report.reportData;
    const inputLocations = getInputLocationsFromReportData(reportData);
    let parseRecord;
    try {
      parseRecord = await getParseForReport(reportId);
    } catch (err) {
      console.error(err);
      return res.status(500).json({ error: 'Could not get parse from report ID' });
    }
    const { levers: dbLevers } = parseRecord;
    if (!dbLevers) {
      throw new Error('No levers found for parse');
    }
    let { personaSettings } = parseRecord;
    if (!personaSettings) {
      let organisation;
      try {
        organisation = await getOrganisation(orgId);
        personaSettings = organisation.personaSettings;
      } catch (err) {
        console.error(err);
        return res.status(500).json({ error: 'Could not get organisation record from database' });
      }
    }
    if (!personaSettings) {
      throw new Error('Could not find persona settings');
    }
    const settings = typeof personaSettings === 'string' ? JSON.parse(personaSettings) : personaSettings;
    const levers = typeof dbLevers === 'string' ? JSON.parse(dbLevers) : dbLevers;
    let dus = [];
    try {
      const dbDus = await getDusById(duIds, dynamoDocClient);
      if (dbDus.length === 0) {
        throw new Error('No DUs found for given IDs');
      }
      dus = mapDUsToEmployees(dbDus, settings);
    } catch (err) {
      console.error(err);
      return res.status(500).json({ error: 'Could not get DUs from DU ID list' });
    }
    const locations = calculateScoresPerLocation(dus, levers, {
      termType: settings.termType,
      value: settings.term,
    });
    const parseResult = buildReportData(
      dus,
      locations,
      orgId,
      settings,
      levers,
      new Set(inputLocations),
      levers.keySites ?? [],
      levers.upgradingSites ?? []
    );
    res.json(parseResult);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'filter parse failed' });
  }
});
app.listen(3e3, function () {
  console.log('App started');
});
var app_default = app;

// lambda/filterParse/index.ts
var server = import_aws_serverless_express.default.createServer(app_default);
var handler = (event, context) => {
  console.log(`EVENT: ${JSON.stringify(event)}`);
  return import_aws_serverless_express.default.proxy(server, event, context, 'PROMISE').promise;
};
var filterParse_default = handler;
// Annotate the CommonJS export names for ESM import in node:
0 &&
  (module.exports = {
    handler,
  });
//# sourceMappingURL=index.js.map
